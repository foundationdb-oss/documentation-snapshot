{
  "post_stream": {
    "posts": [
      {
        "id": 1167,
        "name": "Yury",
        "username": "urykhy",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png",
        "created_at": "2018-05-18T07:04:05.051Z",
        "cooked": "<p>Hello,</p>\n<p>OS: Centos 7.<br>\nFDB: 5.1.7.</p>\n<p>i\u2019m trying to implement secondary index with C API, but i can\u2019t make it work (entire code at end):</p>\n<pre><code class=\"lang-auto\">    const std::string key = \"try29:\";\n    for (int i = 0; i &lt; 10; i++)\n    {   \n        auto [res, ts] = getKeyTS(db, key);\n        std::cout &lt;&lt; key &lt;&lt; \" = [\" &lt;&lt; res &lt;&lt; \"]; ts = \" &lt;&lt; std::hex &lt;&lt; ts &lt;&lt; std::dec &lt;&lt; std::endl;\n        res += std::to_string(i);\n        res.append(\",\");\n        updateKeyTS(db, key, ts, res);\n        sleep(1);\n    }   \n</code></pre>\n<p>i make a loop and updating the same key 10 times,<br>\nactually i got an output:</p>\n<pre><code class=\"lang-auto\">try29: = []; ts = 0\ntry29: = []; ts = 0\ntry29: = [0,]; ts = 5afd78dc\ntry29: = [1,]; ts = 5afd78dd\ntry29: = [0,2,]; ts = 5afd78de\ntry29: = [1,3,]; ts = 5afd78df\ntry29: = [0,2,4,]; ts = 5afd78e0\ntry29: = [1,3,5,]; ts = 5afd78e1\ntry29: = [0,2,4,6,]; ts = 5afd78e2\ntry29: = [1,3,5,7,]; ts = 5afd78e3\n</code></pre>\n<p>this is not expected, i hope to see one variable collecting all digits.</p>\n<p>if i remove sleep - output will be something like that:</p>\n<pre><code class=\"lang-auto\">try30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\ntry30: = []; ts = 0\n</code></pre>\n<p>this result is trange as well, why it differ from previous one ?</p>\n<p>i must be wrong somewhere,<br>\nany help ?</p>\n<p>PS:<br>\nfull code</p>\n<pre><code class=\"lang-auto\">#include &lt;chrono&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n#include &lt;sstream&gt;\n\n#include &lt;unistd.h&gt;\n\n#define FDB_API_VERSION 510\n#include &lt;fdb_c.h&gt;\n\n/*\n g++ t1.cpp -I/usr/include/foundationdb -lfdb_c -O3 -ggdb -pthread -std=c++17\n*/\n\nvoid checkError(fdb_error_t errorNum)\n{\n    if(errorNum) { fprintf(stderr, \"Error (%d): %s\\n\", errorNum, fdb_get_error(errorNum)); exit(errorNum); }\n}\n\nvoid waitAndCheckError(FDBFuture *future)\n{\n    checkError(fdb_future_block_until_ready(future));\n\n    fdb_error_t r = fdb_future_get_error(future);\n    if (0 != r)\n        checkError(r);\n}\n\nvoid openDatabase(FDBCluster **cluster, FDBDatabase **db)\n{\n    FDBFuture *clusterFuture = fdb_create_cluster(\"/etc/foundationdb/fdb.cluster\");\n    waitAndCheckError(clusterFuture);\n\n    checkError(fdb_future_get_cluster(clusterFuture, cluster));\n    fdb_future_destroy(clusterFuture);\n\n    std::cout &lt;&lt; \"got cluster\" &lt;&lt; std::endl;\n\n    FDBFuture *dbFuture = fdb_cluster_create_database(*cluster, (const uint8_t*)\"DB\", 2);\n    waitAndCheckError(dbFuture);\n    checkError(fdb_future_get_database(dbFuture, db));\n    fdb_future_destroy(dbFuture);\n\n    std::cout &lt;&lt; \"got database\" &lt;&lt; std::endl;\n}\n\nvoid closeDatabase(FDBCluster *cluster, FDBDatabase *db)\n{\n    fdb_database_destroy(db);\n    fdb_cluster_destroy(cluster);\n}\n\n// key + timestamp\n\nstd::pair&lt;std::string, time_t&gt; getKeyTS(FDBDatabase *db, const std::string&amp; key)\n{\n    time_t ts = 0;\n    std::string result;\n\n    FDBTransaction *tr;\n    checkError(fdb_database_create_transaction(db, &amp;tr));\n\n    std::string end_key = key + \"z\";    // no `z` char in timestamp\n\n// FDBTransaction* transaction,\n// uint8_t const* begin_key_name, int begin_key_name_length, fdb_bool_t begin_or_equal, int begin_offset,\n// uint8_t const* end_key_name, int end_key_name_length fdb_bool_t end_or_equal, int end_offset,\n// int limit, int target_bytes,\n// FDBStreamingMode mode, int iteration,\n// fdb_bool_t snapshot, fdb_bool_t reverse\n    FDBFuture *getFuture = fdb_transaction_get_range(tr,\n                                                     FDB_KEYSEL_FIRST_GREATER_THAN((const uint8_t*)key.c_str(), key.size()),\n                                                     FDB_KEYSEL_LAST_LESS_THAN((const uint8_t*)end_key.c_str(), end_key.size()),\n                                                     10, 0,\n                                                     FDB_STREAMING_MODE_WANT_ALL, 0,\n                                                     0, 0);\n// fdb_transaction_get_range(tr, FDB_KEYSEL_LAST_LESS_OR_EQUAL(keys[0], keySize), FDB_KEYSEL_LAST_LESS_OR_EQUAL(keys[numKeys], keySize),\n// numKeys, 0, 0, 1, 0, 0);\n\n    waitAndCheckError(getFuture);\n\n    fdb_bool_t valuePresent;\n    FDBKeyValue const* res;\n    int count = 0;\n    fdb_bool_t more;\n    checkError(fdb_future_get_keyvalue_array(getFuture, &amp;res, &amp;count, &amp;more));\n    //std::cout &lt;&lt; \"found \" &lt;&lt; count &lt;&lt; \" entries\" &lt;&lt; std::endl;\n    if (count &gt; 0)\n    {\n        std::string key((const char*)res-&gt;key, res-&gt;key_length);\n        if (key.size() &gt; 8)\n            ts = std::strtol(key.c_str() + key.size() - 8, 0, 16);\n        result.assign((const char*)res-&gt;value, res-&gt;value_length);\n    }\n\n    fdb_future_destroy(getFuture);\n    fdb_transaction_destroy(tr);\n\n    return std::make_pair(result, ts);\n}\n\nstd::pair&lt;std::string, std::string&gt; makeKeyTS(const std::string&amp; key, const time_t ts = ::time(0))\n{\n    std::stringstream stream;\n    stream &lt;&lt; std::hex &lt;&lt; ts;\n    const std::string hextime = stream.str();\n    const std::string norm_key = key + hextime;\n    const std::string rev_key  = hextime + key;\n    return std::make_pair(norm_key, rev_key);\n}\n\nvoid updateKeyTS(FDBDatabase *db, const std::string&amp; key, const time_t ts, const std::string&amp; value)\n{\n    FDBTransaction *tr;\n    checkError(fdb_database_create_transaction(db, &amp;tr));\n\n    // rm old\n    {\n        auto [norm_key, rev_key] = makeKeyTS(key, ts);\n        fdb_transaction_clear(tr, (const uint8_t*)norm_key.c_str(), (int)norm_key.size());\n        fdb_transaction_clear(tr, (const uint8_t*)rev_key.c_str(), (int)rev_key.size());\n    }\n\n    // put new\n    {\n        auto [norm_key, rev_key] = makeKeyTS(key);\n        fdb_transaction_set(tr,\n                            (const uint8_t*)norm_key.c_str(), (int)norm_key.size(),\n                            (const uint8_t*)value.c_str(), (int)value.size());\n        fdb_transaction_set(tr,\n                            (const uint8_t*)rev_key.c_str(), (int)rev_key.size(),\n                            (const uint8_t*)0, 0);\n    }\n\n    FDBFuture *getFuture = fdb_transaction_commit(tr);\n    waitAndCheckError(getFuture);\n    fdb_future_destroy(getFuture);\n    fdb_transaction_destroy(tr);\n\n}\n\nvoid f3(void)\n{\n    FDBCluster *cluster;\n    FDBDatabase *db;\n    openDatabase(&amp;cluster, &amp;db);\n    const std::string key = \"try30:\";\n\n    for (int i = 0; i &lt; 10; i++)\n    {\n        auto [res, ts] = getKeyTS(db, key);\n        std::cout &lt;&lt; key &lt;&lt; \" = [\" &lt;&lt; res &lt;&lt; \"]; ts = \" &lt;&lt; std::hex &lt;&lt; ts &lt;&lt; std::dec &lt;&lt; std::endl;\n        res += std::to_string(i);\n        res.append(\",\");\n        updateKeyTS(db, key, ts, res);\n        sleep(1);\n    }\n\n    closeDatabase(cluster, db);\n}\n\nint main(void)\n{\n    checkError(fdb_select_api_version(FDB_API_VERSION));\n    checkError(fdb_setup_network());\n\n    std::thread fdbt([]{\n        checkError(fdb_run_network());\n    });\n    std::cerr &lt;&lt; \"sleeping\" &lt;&lt; std::endl;\n    sleep(1);\n\n    f3();\n\n    std::cerr &lt;&lt; \"stopping\" &lt;&lt; std::endl;\n    checkError(fdb_stop_network());\n    std::cerr &lt;&lt; \"joining\" &lt;&lt; std::endl;\n    fdbt.join();\n\n    return 0;\n}\n</code></pre>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-05-18T07:04:05.051Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 87,
        "reads": 58,
        "readers_count": 57,
        "score": 448.6,
        "yours": false,
        "topic_id": 430,
        "topic_slug": "emulate-secondary-index",
        "display_username": "Yury",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 268,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/emulate-secondary-index/430/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1175,
        "name": "Ian Peters",
        "username": "itp",
        "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
        "created_at": "2018-05-18T16:08:47.543Z",
        "cooked": "<p>At a glance, guessing your problem is in your call to <code>fdb_transaction_get_range()</code>. You are passing two key selectors, which are first resolved to keys that are present in the database, and then those keys define a range [begin,end).</p>\n<p>In your case, after the first iteration, it looks like you are trying to read a key like \u201ctry30:12345678\u201d. But the range you are defining will resolve to [\u201ctry30:12345678\u201d,\u201ctry30:12345678\u201d) which is by definition empty. (The same key is both the first greater than \u201ctry30:\u201d and the last less than \u201ctry30:z\u201d.)</p>\n<p>Haven\u2019t read your code well enough to understand the logic of your index, but you need to use key selectors to describe the first key that is not part of your range as the end point of your range read (either as an offset from the beginning, or as the first greater than/greater than or equal to a constructed key.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-05-18T16:08:47.543Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 17,
        "reads": 47,
        "readers_count": 46,
        "score": 99.4,
        "yours": false,
        "topic_id": 430,
        "topic_slug": "emulate-secondary-index",
        "display_username": "Ian Peters",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 190,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/emulate-secondary-index/430/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1204,
        "name": "Yury",
        "username": "urykhy",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png",
        "created_at": "2018-05-21T10:34:45.510Z",
        "cooked": "<p>i have try with FDB_KEYSEL_FIRST_GREATER_OR_EQUAL/FDB_KEYSEL_LAST_LESS_OR_EQUAL.</p>\n<pre><code class=\"lang-auto\">FDB_KEYSEL_FIRST_GREATER_OR_EQUAL((const uint8_t*)key.c_str(), key.size()),\nFDB_KEYSEL_LAST_LESS_OR_EQUAL((const uint8_t*)end_key.c_str(), end_key.size()),\n</code></pre>\n<p>but nothing changed.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-05-21T10:35:02.828Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 42,
        "readers_count": 41,
        "score": 18.4,
        "yours": false,
        "topic_id": 430,
        "topic_slug": "emulate-secondary-index",
        "display_username": "Yury",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 190,
          "username": "itp",
          "name": "Ian Peters",
          "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 268,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/emulate-secondary-index/430/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1206,
        "name": "Ian Peters",
        "username": "itp",
        "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
        "created_at": "2018-05-21T13:56:04.617Z",
        "cooked": "<p>That\u2019s because <code>FDB_KEYSEL_LAST_LESS_OR_EQUAL</code> still resolves to the wrong key. You initially will have no keys present that begin with \u201ctry30:\u201d but after your first iteration will have inserted one, e.g. \u201ctry30:12345678\u201d. The first key greater than \u201ctry30:\u201d is \u201ctry30:12345678\u201d, so your range read will begin at that key. The last key less than or eqaul to \u201ctry30:z\u201d is \u201ctry30:12345678\u201d (the same key!), so your range read will end at that key as well.</p>\n<p>Remember that all ranges are inclusive/exclusive (or open/closed), so the range is empty, and you don\u2019t successfully read the key you\u2019re looking for.</p>\n<p>You want:</p>\n<pre><code class=\"lang-auto\">FDB_KEYSEL_FIRST_GREATER_THAN((const uint8_t*)key.c_str(), key.size()),\nFDB_KEYSEL_FIRST_GREATER_THAN((const uint8_t*)end_key.c_str(), end_key.size()),\n</code></pre>\n<p>The first key greater than \u201ctry30:z\u201d may actually exist, or there may be nothing (in which case the key selector resolves to \u201c\\xFF\u201d), but it doesn\u2019t matter. Because the end of the range is excluded from the range, and we know there are no other keys between \u201ctry30:z\u201d and whatever it does resolve to, you\u2019ll only read the keys you were looking for.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-05-21T13:56:04.617Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 38,
        "readers_count": 37,
        "score": 22.6,
        "yours": false,
        "topic_id": 430,
        "topic_slug": "emulate-secondary-index",
        "display_username": "Ian Peters",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 268,
          "username": "urykhy",
          "name": "Yury",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 190,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/emulate-secondary-index/430/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1207,
        "name": "Yury",
        "username": "urykhy",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png",
        "created_at": "2018-05-21T14:11:05.503Z",
        "cooked": "<p>thanx a lot! it\u2019s working as expected now.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-05-21T14:11:05.503Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 35,
        "readers_count": 34,
        "score": 7.0,
        "yours": false,
        "topic_id": 430,
        "topic_slug": "emulate-secondary-index",
        "display_username": "Yury",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 268,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/emulate-secondary-index/430/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1167,
      1175,
      1204,
      1206,
      1207
    ]
  },
  "timeline_lookup": [
    [
      1,
      2714
    ],
    [
      2,
      2713
    ],
    [
      3,
      2711
    ],
    [
      4,
      2710
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Emulate secondary index",
  "id": 430,
  "title": "Emulate secondary index",
  "posts_count": 5,
  "created_at": "2018-05-18T07:04:04.967Z",
  "views": 1123,
  "reply_count": 2,
  "like_count": 1,
  "last_posted_at": "2018-05-21T14:11:05.503Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "emulate-secondary-index",
  "category_id": 7,
  "word_count": 1129,
  "deleted_at": null,
  "user_id": 268,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_430",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 5,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Missing API for getting just the count of a key range?",
      "id": 444,
      "title": "Missing API for getting just the count of a key range?",
      "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
      "posts_count": 14,
      "reply_count": 9,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-21T09:23:36.938Z",
      "last_posted_at": "2018-09-10T16:25:03.060Z",
      "bumped": true,
      "bumped_at": "2018-09-10T16:25:03.060Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 3599,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Is it possible to fetch two different keys using &ldquo;fdb_transaction_get_range&rdquo; API in C program",
      "id": 1388,
      "title": "Is it possible to fetch two different keys using \"fdb_transaction_get_range\" API in C program",
      "slug": "is-it-possible-to-fetch-two-different-keys-using-fdb-transaction-get-range-api-in-c-program",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-05-23T08:14:07.379Z",
      "last_posted_at": "2019-05-23T15:43:55.444Z",
      "bumped": true,
      "bumped_at": "2019-05-23T15:43:55.444Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 591,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 511,
            "username": "sakthivelpvs",
            "name": "Sakthivel",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9dc877/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Secondary indexing approaches",
      "id": 792,
      "title": "Secondary indexing approaches",
      "slug": "secondary-indexing-approaches",
      "posts_count": 7,
      "reply_count": 2,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2018-10-19T19:24:02.093Z",
      "last_posted_at": "2018-10-20T15:08:09.001Z",
      "bumped": true,
      "bumped_at": "2018-10-20T15:08:09.001Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2905,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 391,
            "username": "atombender",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Can&rsquo;t get last pair in FDBKeyValue array",
      "id": 1252,
      "title": "Can't get last pair in FDBKeyValue array",
      "slug": "cant-get-last-pair-in-fdbkeyvalue-array",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-03-24T06:57:23.327Z",
      "last_posted_at": "2019-03-25T21:53:28.346Z",
      "bumped": true,
      "bumped_at": "2019-03-25T22:09:28.671Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 886,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 542,
            "username": "jonahwest",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/90db22/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 268,
        "username": "urykhy",
        "name": "Yury",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      },
      {
        "id": 190,
        "username": "itp",
        "name": "Ian Peters",
        "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 268,
      "username": "urykhy",
      "name": "Yury",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png"
    },
    "last_poster": {
      "id": 268,
      "username": "urykhy",
      "name": "Yury",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png"
    }
  },
  "bookmarks": []
}