{
  "post_stream": {
    "posts": [
      {
        "id": 5694,
        "name": "Rishabh",
        "username": "rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "created_at": "2019-12-03T12:07:54.107Z",
        "cooked": "<p>We have a custom use case, for which we implemented our own layer in java. But we concluded that it was more or less same as record layer and we are now evaluating record layer.</p>\n<p>The first hurdle we have hit is that bulk migration (terabytes) of data via Record Layer is really slow.<br>\nHere are details of calls taking a lot of time:</p>\n<p>In our own implementation, we initialized a table without any index, migrated data fully and then created indexes later on (if required).<br>\nIn our implementation, population of a table without any indexes only performed set() operation and no get() operation. We relied on the fact that our (custom) saveRecord() implementation will override the previous key (if present).</p>\n<p>But in record Layer, saveRecord() API performs get() to get oldRecord and then set() the new one. Because there are extra operations, we are now seeing slowness in migration and sometimes \u201ctransaction too old\u201d error. In my short experience, a transaction with only set() operation is super fast and reliable.</p>\n<p>Looking at the the saveRecord() API of record layer, even when flag <em>existenceCheck</em> is set as <em>NONE</em>, we fetch oldRecord for 2 reasons:</p>\n<p>(1) to get splitting logic of oldRecord so that we can effectively clean it before inserting newRecord:</p>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L416\" target=\"_blank\" rel=\"nofollow noopener\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L416\" target=\"_blank\" rel=\"nofollow noopener\">FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L416</a></h4>\n<pre class=\"onebox\"><code class=\"lang-java\"><ol class=\"start lines\" start=\"406\" style=\"counter-reset: li-counter 405 ;\">\n<li>            throw new RecordAlreadyExistsException(\"record already exists\",</li>\n<li>                    LogMessageKeys.PRIMARY_KEY, primaryKey);</li>\n<li>        }</li>\n<li>        if (existenceCheck.errorIfTypeChanged() &amp;&amp; oldRecord.getRecordType() != recordType) {</li>\n<li>            throw new RecordTypeChangedException(\"record type changed\",</li>\n<li>                    LogMessageKeys.PRIMARY_KEY, primaryKey,</li>\n<li>                    LogMessageKeys.ACTUAL_TYPE, oldRecord.getRecordType().getName(),</li>\n<li>                    LogMessageKeys.EXPECTED_TYPE, recordType.getName());</li>\n<li>        }</li>\n<li>    }</li>\n<li class=\"selected\">    final FDBStoredRecord&lt;M&gt; newRecord = serializeAndSaveRecord(typedSerializer, recordBuilder, metaData, oldRecord);</li>\n<li>    if (oldRecord == null) {</li>\n<li>        addRecordCount(metaData, newRecord, LITTLE_ENDIAN_INT64_ONE);</li>\n<li>    } else {</li>\n<li>        if (getTimer() != null) {</li>\n<li>            getTimer().increment(FDBStoreTimer.Counts.REPLACE_RECORD_VALUE_BYTES, oldRecord.getValueSize());</li>\n<li>        }</li>\n<li>    }</li>\n<li>    return updateSecondaryIndexes(oldRecord, newRecord).thenApply(v -&gt; newRecord);</li>\n<li>});</li>\n<li>return context.instrument(FDBStoreTimer.Events.SAVE_RECORD, result);</li>\n</ol></code></pre>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>(2) to clear indexes corresponding to oldRecord:</p>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L424\" target=\"_blank\" rel=\"nofollow noopener\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L424\" target=\"_blank\" rel=\"nofollow noopener\">FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L424</a></h4>\n<pre class=\"onebox\"><code class=\"lang-java\"><ol class=\"start lines\" start=\"414\" style=\"counter-reset: li-counter 413 ;\">\n<li>            }</li>\n<li>        }</li>\n<li>        final FDBStoredRecord&lt;M&gt; newRecord = serializeAndSaveRecord(typedSerializer, recordBuilder, metaData, oldRecord);</li>\n<li>        if (oldRecord == null) {</li>\n<li>            addRecordCount(metaData, newRecord, LITTLE_ENDIAN_INT64_ONE);</li>\n<li>        } else {</li>\n<li>            if (getTimer() != null) {</li>\n<li>                getTimer().increment(FDBStoreTimer.Counts.REPLACE_RECORD_VALUE_BYTES, oldRecord.getValueSize());</li>\n<li>            }</li>\n<li>        }</li>\n<li class=\"selected\">        return updateSecondaryIndexes(oldRecord, newRecord).thenApply(v -&gt; newRecord);</li>\n<li>    });</li>\n<li>    return context.instrument(FDBStoreTimer.Events.SAVE_RECORD, result);</li>\n<li>}</li>\n<li>\n</li>\n<li>private &lt;M extends Message&gt; void addRecordCount(@Nonnull RecordMetaData metaData, @Nonnull FDBStoredRecord&lt;M&gt; record, @Nonnull byte[] increment) {</li>\n<li>    if (metaData.getRecordCountKey() == null) {</li>\n<li>        return;</li>\n<li>    }</li>\n<li>    final Transaction tr = ensureContextActive();</li>\n<li>    Key.Evaluated subkey = metaData.getRecordCountKey().evaluateSingleton(record);</li>\n</ol></code></pre>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>For <span class=\"hashtag\">#1</span>, if <em>metaData.isSplitLongRecords() == false</em>, we can safely pass <em>previousSizeInfo</em> as null in <em>saveWithSplit()</em> API.</p>\n<p>For <span class=\"hashtag\">#2</span>, if we don\u2019t have any secondary index on recordStore (which we get from metadata cache), we don\u2019t need to call <em>updateSecondaryIndexes()</em> at all.</p>\n<p>Is this understanding correct?<br>\nIf yes, does this mean that we can avoid getting oldRecord for case when:</p>\n<ul>\n<li>existenceCheck == NONE</li>\n<li>metaData.isSplitLongRecords() == false</li>\n<li>no secondary indexes?</li>\n</ul>\n<p>Are there lot of other get() calls we are doing in this workflow. If there are many other get() calls we do anyway, above optimizations might not be so useful.</p>\n<p>Some more info:<br>\nIn our custom implementation, we implemented record splitting logic as [ (key,1) -&gt; Split1 ] format. So to cleanup a key, we did <em>clear</em>(range(key)), which is still better then get() operation (based on my short experience). Right now, I am not sure about the splitting logic in record layer which required oldRecord to be fetched to clear it.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2019-12-09T15:28:19.643Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 145,
        "reads": 48,
        "readers_count": 47,
        "score": 734.6,
        "yours": false,
        "topic_id": 1794,
        "topic_slug": "bulk-load-in-record-layer-is-slow",
        "display_username": "Rishabh",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L424",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FDBRecordStore.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L416",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FDBRecordStore.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://forums.foundationdb.org/t/scaling-record-layer-for-bulk-writes/2249",
            "internal": true,
            "reflection": true,
            "title": "Scaling Record Layer for Bulk Writes",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 545,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/bulk-load-in-record-layer-is-slow/1794/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 5696,
        "name": "Mike McMahon",
        "username": "MMcM",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
        "created_at": "2019-12-03T15:46:24.999Z",
        "cooked": "<p>There is also bookkeeping associated with changes in the size of existing records along the same <span class=\"hashtag\">#1</span> path. So, you would need to somehow declare that you are not interested in that instrumentation. Maybe just the lack of a store-timer.</p>\n<p>Splitting per se does not require the old record. It is managing the two ways in which versions can be stored. So, some combination of declaring that you never used the old version format and/or that you don\u2019t use versions at all could turn that off.</p>\n<p>Do you actually call the synchronous <code>saveRecord</code> one at a time? Because, as a rule, using the <code>Async</code> version and having a dozen to a hundred outstanding would let the reads happen while you were encoding other records. This might still not be good enough for your needs.</p>\n<p>I don\u2019t see any fundamental objections to making it possible to skip the read under suitable circumstances. I would be interested to discuss whether this should just be an optimization based on the existing semantics when it can be proven that the old record is not needed. Or a new mode where the caller asserts that there is no old record (and corruption occurs if there is), which would also work if you happened to have secondary indexes.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2019-12-03T15:46:24.999Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 44,
        "readers_count": 43,
        "score": 13.8,
        "yours": false,
        "topic_id": 1794,
        "topic_slug": "bulk-load-in-record-layer-is-slow",
        "display_username": "Mike McMahon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 219,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/bulk-load-in-record-layer-is-slow/1794/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5710,
        "name": "Rishabh",
        "username": "rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "created_at": "2019-12-04T11:28:13.263Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"MMcM\" data-post=\"2\" data-topic=\"1794\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/m/d07c76/48.png\" class=\"avatar\"> MMcM:</div>\n<blockquote>\n<p>Do you actually call the synchronous <code>saveRecord</code> one at a time?</p>\n</blockquote>\n</aside>\n<p>No, we do async version with batching of records based on size (in MBs). We never got \u201ctransaction to old\u201d error in our implementation but we are getting it now on record layer.</p>\n<p>It might be that we need to change our strategy of bulk migration for record  layer, like keeping track of time as well. If so, please suggest alternates.</p>\n<aside class=\"quote no-group\" data-username=\"MMcM\" data-post=\"2\" data-topic=\"1794\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/m/d07c76/48.png\" class=\"avatar\"> MMcM:</div>\n<blockquote>\n<p>I would be interested to discuss whether this should just be an optimization based on the existing semantics when it can be proven that the old record is not needed.</p>\n</blockquote>\n</aside>\n<p>I am also interested in it. So the question is, if I have a store where:</p>\n<ul>\n<li>metaData.isSplitLongRecords() == false OR store does not use versions</li>\n<li>no secondary indexes</li>\n<li>no metric collection like store size</li>\n</ul>\n<p>Can <em>saveRecord(existenceCheck == NONE)</em> avoid <em>get(oldRecord)</em> call.</p>\n<p>Also, does record layer supports enabling/building metrics like \u201cstore size\u201d etc at a later stage?</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2019-12-04T11:28:13.263Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 38,
        "readers_count": 37,
        "score": 32.6,
        "yours": false,
        "topic_id": 1794,
        "topic_slug": "bulk-load-in-record-layer-is-slow",
        "display_username": "Rishabh",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 545,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/bulk-load-in-record-layer-is-slow/1794/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5716,
        "name": "Scott Gray",
        "username": "scgray",
        "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png",
        "created_at": "2019-12-04T15:33:58.759Z",
        "cooked": "<p>It might be useful for record layer to have a more explicit bulk-loading API to avoid an overly delicate dance of determining if the store is in a state that it could optimize the insert.  For some cases the API can help mitigate problems, such as by disabling any defined indexes, however if we wanted to allow bulk loading of split records (or with versioning enabled), it would be on the honor system that the client of the API would ensure that there are no duplicate records being loaded.</p>\n<p>As a note: with regard to avoiding transaction_too_old and other potential issues, you can take a look the <code>OnlineIndexer</code> logic.  There is an issue opened (<a href=\"https://github.com/FoundationDB/fdb-record-layer/issues/720\" rel=\"nofollow noopener\">https://github.com/FoundationDB/fdb-record-layer/issues/720</a>), in which the plan is to try to encapsulate the logic used in the <code>OnlineIndexer</code> into a generic runner that can automatically take care of managing your transaction work to maximize throughput.  In particular, it would be nice to have it use the ability to determine the current transaction size (<a href=\"https://github.com/apple/foundationdb/issues/1682\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/issues/1682</a>) in informing when to commit (this, along with the usual culprits of transaction time and conflict rates).</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2019-12-04T15:33:58.759Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 7,
        "reads": 36,
        "readers_count": 35,
        "score": 57.2,
        "yours": false,
        "topic_id": 1794,
        "topic_slug": "bulk-load-in-record-layer-is-slow",
        "display_username": "Scott Gray",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/issues/720",
            "internal": false,
            "reflection": false,
            "title": "Auto-throttling runner \u00b7 Issue #720 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 10
          },
          {
            "url": "https://github.com/apple/foundationdb/issues/1682",
            "internal": false,
            "reflection": false,
            "title": "Add methods to transactions to get commit size \u00b7 Issue #1682 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 4
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 545,
          "username": "rishabh",
          "name": "Rishabh",
          "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 34,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/bulk-load-in-record-layer-is-slow/1794/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      5694,
      5696,
      5710,
      5716
    ]
  },
  "timeline_lookup": [
    [
      1,
      2149
    ],
    [
      3,
      2148
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Bulk load in Record Layer is slow",
  "id": 1794,
  "title": "Bulk load in Record Layer is slow",
  "posts_count": 4,
  "created_at": "2019-12-03T12:07:54.035Z",
  "views": 1284,
  "reply_count": 2,
  "like_count": 1,
  "last_posted_at": "2019-12-04T15:33:58.759Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "bulk-load-in-record-layer-is-slow",
  "category_id": 12,
  "word_count": 1016,
  "deleted_at": null,
  "user_id": 545,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1794",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 4,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Record Layer query performance benchmarking against traditional RDBMS",
      "id": 2082,
      "title": "Record Layer query performance benchmarking against traditional RDBMS",
      "slug": "record-layer-query-performance-benchmarking-against-traditional-rdbms",
      "posts_count": 4,
      "reply_count": 0,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2020-04-20T18:46:55.680Z",
      "last_posted_at": "2020-04-22T15:51:53.223Z",
      "bumped": true,
      "bumped_at": "2020-04-22T15:51:53.223Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1528,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 712,
            "username": "rahul-nitkkr",
            "name": "Rahul Roy",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 34,
            "username": "scgray",
            "name": "Scott Gray",
            "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Multiple questions about Indexes, functions and watches to implement etcd-layer",
      "id": 2047,
      "title": "Multiple questions about Indexes, functions and watches to implement etcd-layer",
      "slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
      "posts_count": 8,
      "reply_count": 6,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2020-04-06T11:43:10.344Z",
      "last_posted_at": "2020-06-03T06:21:53.521Z",
      "bumped": true,
      "bumped_at": "2020-06-03T06:21:53.521Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 8,
      "views": 3094,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 534,
            "username": "PierreZ",
            "name": "Pierre Zemb",
            "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Behaviour of saveRecord to the recordStore?",
      "id": 1516,
      "title": "Behaviour of saveRecord to the recordStore?",
      "slug": "behaviour-of-saverecord-to-the-recordstore",
      "posts_count": 4,
      "reply_count": 0,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2019-07-11T08:14:05.493Z",
      "last_posted_at": "2019-07-11T17:54:24.341Z",
      "bumped": true,
      "bumped_at": "2019-07-11T17:54:24.341Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 685,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 388,
            "username": "amarjeet000",
            "name": "Amarjeet",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/e19adc/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Record layer saveRecord fails with ***java.util.concurrent.ExecutionException: com.apple.foundationdb.record.RecordCoreException: Expected only a single key extension for split record***",
      "id": 1887,
      "title": "Record layer saveRecord fails with ***java.util.concurrent.ExecutionException: com.apple.foundationdb.record.RecordCoreException: Expected only a single key extension for split record***",
      "slug": "record-layer-saverecord-fails-with-java-util-concurrent-executionexception-com-apple-foundationdb-record-recordcoreexception-expected-only-a-single-key-extension-for-split-record",
      "posts_count": 4,
      "reply_count": 1,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2020-01-17T12:24:17.084Z",
      "last_posted_at": "2020-01-22T17:17:40.033Z",
      "bumped": true,
      "bumped_at": "2020-01-22T17:17:40.033Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1023,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 712,
            "username": "rahul-nitkkr",
            "name": "Rahul Roy",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Key-val sizes in the Record Layer",
      "id": 1481,
      "title": "Key-val sizes in the Record Layer",
      "slug": "key-val-sizes-in-the-record-layer",
      "posts_count": 5,
      "reply_count": 1,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-06-23T09:20:30.497Z",
      "last_posted_at": "2020-07-15T12:46:20.435Z",
      "bumped": true,
      "bumped_at": "2020-07-15T12:46:20.435Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 2204,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 388,
            "username": "amarjeet000",
            "name": "Amarjeet",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/e19adc/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 790,
            "username": "shubham4060",
            "name": "Shubham",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/0ea827/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 34,
            "username": "scgray",
            "name": "Scott Gray",
            "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 545,
        "username": "rishabh",
        "name": "Rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 34,
        "username": "scgray",
        "name": "Scott Gray",
        "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 219,
        "username": "MMcM",
        "name": "Mike McMahon",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 545,
      "username": "rishabh",
      "name": "Rishabh",
      "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png"
    },
    "last_poster": {
      "id": 34,
      "username": "scgray",
      "name": "Scott Gray",
      "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png"
    },
    "links": [
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/issues/720",
        "title": "Auto-throttling runner \u00b7 Issue #720 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 10,
        "user_id": 34,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/issues/1682",
        "title": "Add methods to transactions to get commit size \u00b7 Issue #1682 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 34,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/scaling-record-layer-for-bulk-writes/2249",
        "title": "Scaling Record Layer for Bulk Writes",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 712,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L416",
        "title": "fdb-record-layer/FDBRecordStore.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 545,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L424",
        "title": "fdb-record-layer/FDBRecordStore.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 545,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}