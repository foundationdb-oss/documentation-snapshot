{
  "post_stream": {
    "posts": [
      {
        "id": 3148,
        "name": "Wolf Dan",
        "username": "WolfDan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "created_at": "2019-01-27T02:39:23.519Z",
        "cooked": "<p>Hey!</p>\n<p>I\u2019m trying to understand how the text index works on the record layer, I would like to implement it on my layer, but some things are not clear to me</p>\n<p>Based on the paper the index is saved on the database like this</p>\n<p><code>( p r e f i x , t o k e n 1 , pk 1 ) \u2192 o f f s e t s 1</code></p>\n<p>So for example the given string <code>\"My Car and my dog and mine, my Car is color blue\"</code>, the result will be something like this</p>\n<pre><code class=\"lang-auto\">   (prefix, \"my\", pk) = [0, 3, 7],\n   (prefix, \"car\", pk) = [1, 8],\n   (prefix, \"and\", pk) = [2],\n   (prefix, \"dog\", pk) = [4],\n   (prefix, \"mine\", pk) = [6],\n   (prefix, \"is\", pk) = [9],\n   (prefix, \"color\", pk) = [10],\n   (prefix, \"blue\", pk) = [11]\n</code></pre>\n<p>So my questions are\u2026</p>\n<ul>\n<li>What\u2019s <code>prefix</code> and <code>pk</code> exactly? From what I understand the <code>pk</code> is the record that is going to be index <code>id</code>, but not sure about the prefix</li>\n<li>How the index query exactly works and what\u2019s the <code>offset</code> for? I understand that you can get the word by querying with the prefix and the token itself or a partial part of the token, so <code>(prefix, \"car\")</code> will get <code>[1, 8]</code> and <code>(prefix, \"c\")</code> will get <code>[1, 8, 10]</code>, but here what\u2019s the use of the offsets?</li>\n<li>In the same topic, what about querying a <code>contains</code> function? for example if I give the query <code>stand</code> and we have the token <code>understand</code> that match that contains, this index match only the full word or can match this case as well?</li>\n</ul>\n<p>This can be explicit on the Java code, but is quite big and I\u2019m not good at reading it as wel\u2026 Sorry for that ^^\u2019</p>\n<p>Thank you!</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2019-01-27T02:39:23.519Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1162,
        "reads": 101,
        "readers_count": 100,
        "score": 5850.2,
        "yours": false,
        "topic_id": 1073,
        "topic_slug": "understanding-text-index-on-fdb-record-layer",
        "display_username": "Wolf Dan",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 323,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/understanding-text-index-on-fdb-record-layer/1073/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 3150,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2019-01-27T18:31:31.074Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"1\" data-topic=\"1073\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>What\u2019s <code>prefix</code> and <code>pk</code> exactly? From what I understand the <code>pk</code> is the record that is going to be index <code>id</code> , but not sure about the prefix</p>\n</blockquote>\n</aside>\n<p>The <code>pk</code> field is the primary key of the record being indexed. So, if you had a record like:</p>\n<pre data-code-wrap=\"javascript\"><code class=\"lang-javascript\">{\n   \"id\": 1066L,\n   \"text\": \"My car and my dog and mine, my Car is color blue\"\n}\n</code></pre>\n<p>where the <code>id</code> field was the primary key and the text index was on the <code>text</code> field, then your example laying out all of the keys and values stays the same except that <code>pk</code> is replaced with <code>1066L</code> in each kv-pair.</p>\n<p>The <code>prefix</code> is some subspace prefix. In the record layer, each record store is assigned a subspace (in some sense, it is <em>defined</em> by its subspace and meta-data), and within a record store, each index gets its own sub-subspace to avoid two different indexes writing over each other. (I think the document layer does something different, but substitute \u201crecord store\u201d with \u201ccollection\u201d.) It doesn\u2019t really matter what it is; it\u2019s just important that it exists and is unique.</p>\n<p>The actual pseudocode for the indexing work would be something like:</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">@fdb.transactional\ndef index_record(tr, record):\n    subspace = get_subspace_for_index()\n    pk = record.get_primary_key()\n    text = extract_text(record)\n    token_list = tokenize(text)\n    token_to_positions_map = get_position_list_for_each_token(token_list)\n    for token, position_list in token_to_positions_map:\n        key = subspace.subspace((token,)).pack(pk)\n        value = serialize(position_list)\n        tr[key] = value\n</code></pre>\n<p>A few caveats here:</p>\n<ol>\n<li>This doesn\u2019t handle deletes/updates</li>\n<li>The actual data storage format for the text index in the record layer combines adjacent keys within a single token in order to save space, but the format laid out above is equivalent from an API point of view (with the complexities hidden behind the <a href=\"https://javadoc.io/page/org.foundationdb/fdb-extensions/latest/com/apple/foundationdb/map/BunchedMap.html\">BunchedMap</a> class).</li>\n</ol>\n<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"1\" data-topic=\"1073\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>How the index query exactly works and what\u2019s the <code>offset</code> for? I understand that you can get the word by querying with the prefix and the token itself or a partial part of the token, so <code>(prefix, \"car\")</code> will get <code>[1, 8]</code> and <code>(prefix, \"c\")</code> will get <code>[1, 8, 10]</code> , but here what\u2019s the use of the offsets?</p>\n</blockquote>\n</aside>\n<p>The offsets are for satisfying phrase search queries and proximity search queries. In particular, there are <a href=\"https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/query/expressions/Text.html#containsPhrase-java.lang.String-\"><code>containsPhrase</code></a> and <a href=\"https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/query/expressions/Text.html#containsAll-java.lang.String-int-\"><code>containsAll</code> within a distance</a> predicates that make use of those offset lists.</p>\n<p>If you are searching for a single term (like \u201ccar\u201d), then these offsets are of essentially no use (except maybe to do highlighting). In that case, the index is scanned for all keys beginning with <code>(prefix, \"car\"</code>) and the <em>primary keys</em> can be extracted from the index. Then the actual records can be retrieved by primary key (or if the primary key is enough, that can be returned).</p>\n<p>If you are searching for a phrase (like \u201cmy car\u201d), then the index can be queried by scanning everything beginning with <code>(prefix, \"my\")</code> and everything beginning with <code>(prefix, \"car\")</code> in parallel. Then the two scans are first combined using something like merge-join in a traditional database, and any place where the scans intersect corresponds to a record where all of the searched for tokens are in the document. Then one can inspect the position lists to ensure everything is in the right order. Here \u201cmy\u201d has positions <code>[0, 3, 7]</code> and car has positions <code>[1, 8]</code>. For phrase search, you are looking for a position in \u201ccar\u201d that is exactly 1 greater than a position of \u201cmy\u201d. Here, \u201cmy\u201d at position 0 and \u201ccar\u201d at position 1 satisfies the predicate, and the primary key of that record is returned (1066, if using my sample record above). A similar procedure can be done for proximity search, but it checks instead if the minimum span between the position lists is less than or equal to the span given as a parameter to the query.</p>\n<p>Note that there is an index option, <a href=\"https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/metadata/IndexOptions.html#TEXT_OMIT_POSITIONS_OPTION\"><code>TEXT_OMIT_POSITIONS_OPTION</code></a>, which can be used to stop the index from writing the positions list. This can be used as a space-savings optimization if one doesn\u2019t need to perform those kinds of queries.</p>\n<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"1\" data-topic=\"1073\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>In the same topic, what about querying a <code>contains</code> function? for example if I give the query <code>stand</code> and we have the token <code>understand</code> that match that contains, this index match only the full word or can match this case as well?</p>\n</blockquote>\n</aside>\n<p>As described, no, the index can\u2019t satisfy suffix or infix queries like that. It only supports prefix matching and full-token matching. (This is essentially an artifact of the kinds of range scans that the FDB key-value store supports.) However, there are a couple different solutions that allows the user to extend the text index so that it can do those more powerful kinds of queries, most of which depend on the fact that the record layer text solution allows for pluggable tokenizers. You could:</p>\n<ol>\n<li>Write a tokenizer that calls \u201creverse\u201d on each token before inserting into the index. This can let you satisfy \u201csuffix\u201d queries. In the case of \u201cunderstand\u201d, it has been inserted into the database as \u201cdnatsrednu\u201d, so a prefix search for \u201cdnats\u201d will find that document. Note that this uses the same amount of space as a regular index, but it <em>only</em> supports suffix search, not infix search.</li>\n<li>Write a tokenizer that inserts all suffixes of each token. So \u201cunderstand\u201d gets inserted as \u201cunderstand\u201d, \u201cnderstand\u201d, \u201cderstand\u201d, \u201cerstand\u201d, \u201crstand\u201d, \u201cstand\u201d, \u201ctand\u201d, \u201cand\u201d, \u201cnd\u201d, and \u201cd\u201d. (Maybe you don\u2019t insert the smallest tokens to save space.) Then any <em>prefix</em> scan over the index returns any document with the searched for string in the <em>interior</em> of a token in the original document. So \u201cstand\u201d will match, as will \u201csta\u201d, \u201cders\u201d, \u201cndersta\u201d, etc. Note that for a token of length <em>n</em>, there will be <em>n</em> keys inserted into the index with an order of <em>n</em><sup>2</sup> characters in all inserted tokens together, but each infix query can be satisfied with a single range scan.</li>\n<li>Write a tokenizer that, say, writes all tri-grams, i.e., substrings of length 3. So \u201cunderstand\u201d becomes \u201cund\u201d, \u201cnde\u201d, \u201cder\u201d, \u201cers\u201d, \u201crst\u201d, \u201csta\u201d, \u201ctan\u201d, and \u201cand\u201d. Then an infix search for \u201cstand\u201d becomes a phrase search for \u201csta\u201d, \u201ctan\u201d, and \u201cand\u201d. Note that each token of length <em>n</em> will be spread across <em>n</em> - 2 keys, but as each inserted key-value pair is only 3 characters in length, it will insert a number of characters (across all tokens) that is linear with the size of the original token. The tradeoff is that to find an infix of size <em>k</em>, it must perform <em>k</em> - 2 scans (in parallel) and filter out misses, which probably means more data read than the option above.</li>\n</ol>\n<p>Two more things to note: in addition to the index maintainer taking a tokenizer option, text predicates in the record layer also take an optional tokenizer, and you can specify different behavior for the tokenizer at query and at index time. This can be used to make sure the same (or compatible) normalization and tokenization options get applied to query strings as are done to the indexed data, and it also means that it will only match the predicate against indexes with compatible tokenization strategies. (For example, if one went with the \u201creversing\u201d tokenizer, the user can still provide their strings in forward order and the tokenizer will reverse them for them.)</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2019-01-27T18:31:31.074Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 77,
        "reads": 94,
        "readers_count": 93,
        "score": 483.8,
        "yours": false,
        "topic_id": 1073,
        "topic_slug": "understanding-text-index-on-fdb-record-layer",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://javadoc.io/page/org.foundationdb/fdb-extensions/latest/com/apple/foundationdb/map/BunchedMap.html",
            "internal": false,
            "reflection": false,
            "clicks": 11
          },
          {
            "url": "https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/query/expressions/Text.html#containsPhrase-java.lang.String-",
            "internal": false,
            "reflection": false,
            "clicks": 9
          },
          {
            "url": "https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/query/expressions/Text.html#containsAll-java.lang.String-int-",
            "internal": false,
            "reflection": false,
            "clicks": 9
          },
          {
            "url": "https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/metadata/IndexOptions.html#TEXT_OMIT_POSITIONS_OPTION",
            "internal": false,
            "reflection": false,
            "clicks": 7
          },
          {
            "url": "https://forums.foundationdb.org/t/lucene-layer-on-foundationdb/1229/2",
            "internal": true,
            "reflection": true,
            "title": "Lucene-Layer on FoundationDB",
            "clicks": 8
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 5
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/understanding-text-index-on-fdb-record-layer/1073/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3170,
        "name": "Wolf Dan",
        "username": "WolfDan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "created_at": "2019-01-30T00:25:55.440Z",
        "cooked": "<p>Thank you so much!!!</p>\n<p>That\u2019s exactly what I was looking for, for my problem I think the second solution in the most suited for it, tho delete and update can be a bit expensive/problematic</p>\n<p>I didn\u2019t get my head around with all those papers etc\u2026 the explanations where perfect for me to understand all the concept!</p>\n<p>thank you once more <img src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=6\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\"></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2019-01-30T00:25:55.440Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 72,
        "readers_count": 71,
        "score": 84.4,
        "yours": false,
        "topic_id": 1073,
        "topic_slug": "understanding-text-index-on-fdb-record-layer",
        "display_username": "Wolf Dan",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 323,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/understanding-text-index-on-fdb-record-layer/1073/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      3148,
      3150,
      3170
    ]
  },
  "timeline_lookup": [
    [
      1,
      2460
    ],
    [
      2,
      2459
    ],
    [
      3,
      2457
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Understanding text index on fdb record layer",
  "id": 1073,
  "title": "Understanding text index on fdb record layer",
  "posts_count": 3,
  "created_at": "2019-01-27T02:39:23.416Z",
  "views": 3511,
  "reply_count": 1,
  "like_count": 8,
  "last_posted_at": "2019-01-30T00:25:55.440Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "understanding-text-index-on-fdb-record-layer",
  "category_id": 12,
  "word_count": 1679,
  "deleted_at": null,
  "user_id": 323,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1073",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 3,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Looking for ideas for index ordering",
      "id": 2556,
      "title": "Looking for ideas for index ordering",
      "slug": "looking-for-ideas-for-index-ordering",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2021-02-14T18:58:34.337Z",
      "last_posted_at": "2021-02-16T03:43:27.485Z",
      "bumped": true,
      "bumped_at": "2021-02-16T03:43:27.485Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 583,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 721,
            "username": "ggilley",
            "name": "Greg Gilley",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/7993a0/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 448,
            "username": "dongxinEric",
            "name": "Xin Dong",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dongxineric/{size}/434_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Can TEXT index work with KeyExpression using groupBy?",
      "id": 2599,
      "title": "Can TEXT index work with KeyExpression using groupBy?",
      "slug": "can-text-index-work-with-keyexpression-using-groupby",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2021-03-05T09:30:24.843Z",
      "last_posted_at": "2021-03-05T22:16:23.555Z",
      "bumped": true,
      "bumped_at": "2021-03-05T22:16:23.555Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 628,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 901,
            "username": "hiepsieunhan",
            "name": "Bui Do Hiep",
            "avatar_template": "/user_avatar/forums.foundationdb.org/hiepsieunhan/{size}/1037_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Multiple questions about Indexes, functions and watches to implement etcd-layer",
      "id": 2047,
      "title": "Multiple questions about Indexes, functions and watches to implement etcd-layer",
      "slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
      "posts_count": 8,
      "reply_count": 6,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2020-04-06T11:43:10.344Z",
      "last_posted_at": "2020-06-03T06:21:53.521Z",
      "bumped": true,
      "bumped_at": "2020-06-03T06:21:53.521Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 8,
      "views": 3094,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 534,
            "username": "PierreZ",
            "name": "Pierre Zemb",
            "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Application design using Subspace and Tuple",
      "id": 452,
      "title": "Application design using Subspace and Tuple",
      "slug": "application-design-using-subspace-and-tuple",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-05-22T21:46:43.537Z",
      "last_posted_at": "2018-07-14T21:02:50.010Z",
      "bumped": true,
      "bumped_at": "2018-07-14T21:02:50.010Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 3678,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 211,
            "username": "brk0v",
            "name": "Viacheslav Biriukov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 317,
            "username": "Lundin",
            "name": "Pontus Lundin",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/dfb087/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Secondary indexing approaches",
      "id": 792,
      "title": "Secondary indexing approaches",
      "slug": "secondary-indexing-approaches",
      "posts_count": 7,
      "reply_count": 2,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2018-10-19T19:24:02.093Z",
      "last_posted_at": "2018-10-20T15:08:09.001Z",
      "bumped": true,
      "bumped_at": "2018-10-20T15:08:09.001Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2905,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 391,
            "username": "atombender",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 323,
        "username": "WolfDan",
        "name": "Wolf Dan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 323,
      "username": "WolfDan",
      "name": "Wolf Dan",
      "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png"
    },
    "last_poster": {
      "id": 323,
      "username": "WolfDan",
      "name": "Wolf Dan",
      "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png"
    },
    "links": [
      {
        "url": "https://javadoc.io/page/org.foundationdb/fdb-extensions/latest/com/apple/foundationdb/map/BunchedMap.html",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 11,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/query/expressions/Text.html#containsAll-java.lang.String-int-",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 9,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/query/expressions/Text.html#containsPhrase-java.lang.String-",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 9,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://forums.foundationdb.org/t/lucene-layer-on-foundationdb/1229/2",
        "title": "Lucene-Layer on FoundationDB",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 8,
        "user_id": 13,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://javadoc.io/page/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/metadata/IndexOptions.html#TEXT_OMIT_POSITIONS_OPTION",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      }
    ]
  },
  "bookmarks": []
}