{
  "post_stream": {
    "posts": [
      {
        "id": 1200,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-21T09:23:36.987Z",
        "cooked": "<p>I started looking into foundationDB more closely, sofar it\u2019s quite exciting!</p>\n<p>Unless I missed something (entirely possible), however, it seems the fdb API / bindings don\u2019t<br>\noffer a way to just get a <strong>count</strong> of the number of keys in a key range, not the actual keys.<br>\nIt seems I would have to iterate over all the keys to obtain that count, which will produce<br>\nnetwork traffic proportional to their combined size, or not?</p>\n<p>In the context of the \u2018simple indices\u2019 data modelling recipe, such counts could be used to report how many items are indexed under a given dimension, e.g. think e-commerce and number of products with given category tuple slot such as \u2018fashion\u2019.</p>\n<p>Since keys are lexicographically ordered, counts would seem to<br>\nbe efficiently computable server-side.</p>\n<p>And since counts can be<br>\na compact estimator for purposes of expected network bandwidth before transmitting<br>\na large keyrange, or for query planning - e.g. start matching using the lowest-count criterion, then<br>\nintersect with the next one etc. - they seem to be broadly useful.</p>\n<p>Is there a deep reason why there are unavailable? Could they be added cheaply?<br>\nDo others see the same need?</p>\n<p>Any insights greatly appreciated!</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-21T09:23:36.987Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 904,
        "reads": 148,
        "readers_count": 147,
        "score": 4579.6,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1201,
        "name": "Richard Applebaum",
        "username": "dicklacara",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
        "created_at": "2018-05-21T09:59:57.102Z",
        "cooked": "<p>I think it depends on the Language you are using,</p>\n<p>I\u2019ve been playing around with Chris Lattner\u2019s Python/Swift Interoperability Playground:</p>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md\" target=\"_blank\" rel=\"nofollow noopener\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md\" target=\"_blank\" rel=\"nofollow noopener\">apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md</a></h4>\n<pre><code class=\"lang-md\"># Introduce User-defined \"Dynamic Member Lookup\" Types\n\n* Proposal: [SE-0195](0195-dynamic-member-lookup.md)\n* Author: [Chris Lattner](https://github.com/lattner)\n* Review Manager: [Ted Kremenek](https://github.com/tkremenek)\n* Implementation: [apple/swift#14546](https://github.com/apple/swift/pull/14546)\n* [Previous Revision #1](https://github.com/apple/swift-evolution/commit/59c7455170c231f3df9ab0ba923262e126afaa06#diff-b3460d13f154c3d6b1d8396e4159a1d2)\n* Status: **Implemented (Swift 4.2)**\n* Decision Notes: [Review extended](https://forums.swift.org/t/se-0195-introduce-user-defined-dynamic-member-lookup-types/8658/126), [Rationale](https://forums.swift.org/t/se-0195-introduce-user-defined-dynamic-member-lookup-types/8658/160)\n\n\n## Introduction\n\nThis proposal introduces a new `@dynamicMemberLookup` attribute.  Types that use it provide\n\"dot\" syntax for arbitrary names which are resolved\nat runtime - in a **completely type safe** way.  This provides syntactic sugar that allows the\nuser to write:\n\n```swift\n  a = someValue.someMember\n</code></pre>\n\n  This file has been truncated. <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md\" target=\"_blank\" rel=\"nofollow noopener\">show original</a>\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Chris admits that the syntax in currently a little bit kludgey, but is working on improvements.  Here\u2019s an example of priming  the FDB Class Scheduling database:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb.png\" title=\"FDB Class Scheduling Prime DB.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb_2_690x274.png\" alt=\"FDB%20Class%20Scheduling%20Prime%20DB\" width=\"690\" height=\"274\" srcset=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb_2_690x274.png, https://global.discourse-cdn.com/foundationdb/optimized/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb_2_1035x411.png 1.5x, https://global.discourse-cdn.com/foundationdb/optimized/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb_2_1380x548.png 2x\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">FDB Class Scheduling Prime DB.png</span><span class=\"informations\">3842\u00d71526 451 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-21T12:41:34.510Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 16,
        "reads": 146,
        "readers_count": 145,
        "score": 114.2,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Richard Applebaum",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md",
            "internal": false,
            "reflection": false,
            "title": "swift-evolution/0195-dynamic-member-lookup.md at master \u00b7 apple/swift-evolution \u00b7 GitHub",
            "clicks": 8
          },
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/73e7be92c478b14892b6d043b855f68bd6aedcbb.png",
            "internal": false,
            "reflection": false,
            "title": "73e7be92c478b14892b6d043b855f68bd6aedcbb.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 31,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1214,
        "name": "Jay Kominek",
        "username": "jkominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "created_at": "2018-05-21T21:27:28.387Z",
        "cooked": "<p>In your example of categorized products, your layer on top of FDB could keep track of that count in its own key as other records are modified. Then all you\u2019d need to fetch would be a single key.</p>\n<p>You could extend that to infinite data types by binning them up algorithmically. Integers and reals could have the count stored in <code>floor(value / 1000.0)</code>, or whatever else works.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-21T21:27:28.387Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 5,
        "reads": 136,
        "readers_count": 135,
        "score": 52.2,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Jay Kominek",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 173,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1218,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-05-22T06:52:36.408Z",
        "cooked": "<p>So, the main reason to not have a \u201cgetRangeCount\u201d API is that, as the storage servers are implemented, there isn\u2019t actually a better way (at the storage server level) to count the number of keys in a range without just iterating over all of them and counting (essentially what the client has to implement now). I\u2019m not sure how much I buy this argument myself, but in some sense, by not having the API, it means that we can discourage users who maybe don\u2019t realize the cost of doing the operation from na\u00efvely making that call and generating way more load on the cluster than they expect. (Our KeySelector API, if one gives it large offsets, has essentially the same problem, so the API comes with warning labels letting people know that it shouldn\u2019t be used with large offsets.) Granted, this function <em>could</em> help reduce network traffic as the \u201ccount\u201d function is now effectively pushed down, so maybe it\u2019s worth doing (or maybe some more general server-side function functionality is actually what is needed).</p>\n<p>Other arguments against it:</p>\n<ul>\n<li>If you wanted to do this the \u201coptimal\u201d way\u2013where each storage server knows how many nodes are between any two keys, then I think the only way to do it is to have each page keep track of how many nodes are in each child tree. This is additional space and bookkeeping that has to be updated with every write, which could be significant write amplification (essentially the same as a COW B-tree). (If you only wanted an estimate, the storage server could sample keys in a way similar to the way shard sizes are estimated, I suppose\u2026)</li>\n<li>Implementing a system that gives the right answer in the presence of outstanding uncommitted mutations within a transaction seems hard. (In other words, this operation might not support reading your writes.) You would either need to just ignore local writes, throw an error if a local write existed that was (or might be) in the counted range, or send all (relevant) mutations in the request so that the storage server could account for them when counting. It could also live outside the context of a transaction, but that would put it at odds with essentially all other parts of our API.</li>\n</ul>\n<p>So, what\u2019s the actually good way to implement counting the number of keys? Well, it doesn\u2019t work for <em>arbitrary</em> ranges, but for doing things like counting the number of keys in ranges that you <em>know</em> you will want to query (e.g., indices so you can, as suggested, choose the most selective filter when query planning), you can use <a href=\"https://apple.github.io/foundationdb/developer-guide.html#atomic-operations\">atomic operations</a>! In particular, you will want to use the <code>ADD</code> mutation. So, for example, if you wanted to implement keeping track of the size of multiple indices, you could do this by keeping each index in its own subspace, and then using a separate subspace (with maybe one key per index) with one key each indicating the count of that index. Then whenever you update the index, you also (transactionally) issue an atomic add to that key.* Then when you need to get the size, it\u2019s just a single-key read, which is pretty fast. (In this index example, you can actually get the sizes of all indices with a single range read, which is nice.)</p>\n<p>I believe that this covers most of the shortcomings of a more general \u201cgetRangeCount\u201d API:</p>\n<ul>\n<li>Queries require looking at a single key, not (implicitly) running a scan over an arbitrarily large amount of data.</li>\n<li>Write amplification and extra space is lower than if each page kept bookkeeping information about how many keys were in its children.</li>\n<li>If there are local writes, the RYW cache will be able to combine local updates with a value read from the database to produce the correct result.</li>\n</ul>\n<p>There are a few downsides:</p>\n<ul>\n<li>At high volumes, it can create hot-keys on the counter keys. (This can be somewhat alleviated by splitting up the work to multiple keys. If you are write-heavy, then you want to load balance your writes and then read all keys. If you are read-heavy, then you want to load balance your reads and write to all. If you are somewhere in the middle, it\u2019s possible you might need to have a lattice and have all writes go to a row in the lattice and all reads go to a column in the lattice.)</li>\n<li>It is now on the application- or layer-developer to keep this bookkeeping around and in sync (including possibly building a count key from existing data).</li>\n<li>It only supports getting the right answer for ranges you know (or think) you will need to count often. (You can get around this if you are okay with (once every so often) doing a big expensive scan to count something you didn\u2019t expect to need to count and sometimes building a count from existing data if you were initially wrong about what needs counting.)</li>\n</ul>\n<p>But even with the limitations, I think it probably covers most users\u2019 needs.</p>\n<hr>\n<p>* If you want to be strictly correct, you will need to check to see if the key exists before you write to the index, which you may or may not know without having to read the index entry. If you just want to be roughly correct, you can (probably) get away with just incrementing the count key every time you do a set to the index and decrementing it every time you do a (single-key) clear.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T06:52:36.408Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 23,
        "reads": 134,
        "readers_count": 133,
        "score": 161.8,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#atomic-operations",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 5.1",
            "clicks": 10
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1223,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-22T13:25:44.297Z",
        "cooked": "<p>How is the range.count implemented <em>underlyingly</em>? That\u2019s the key question. Since other language bindings use the C binding, as far as I understood, they would probably have no choice but to do enumeration of ranges, thus falling back to the problem I outlined. If you can demonstrate that is not the case for the Swift binding, I would be very interested, of course.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T13:25:44.297Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 99,
        "readers_count": 98,
        "score": 24.8,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 31,
          "username": "dicklacara",
          "name": "Richard Applebaum",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1224,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-22T13:29:48.792Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"cloudspeech\" data-post=\"5\" data-topic=\"444\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cloudspeech/48/330_2.png\" class=\"avatar\"> cloudspeech:</div>\n<blockquote>\n<p>How is the range.count implemented underlyingly?</p>\n</blockquote>\n</aside>\n<p>You can see an explanation in this thread =&gt; <a href=\"https://forums.foundationdb.org/t/getting-the-number-of-key-value-pairs/189\" class=\"inline-onebox\">Getting the number of key/value pairs</a></p>\n<p>.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T14:43:32.931Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 92,
        "readers_count": 91,
        "score": 53.4,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 4,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/getting-the-number-of-key-value-pairs/189",
            "internal": true,
            "reflection": false,
            "title": "Getting the number of key/value pairs",
            "clicks": 137
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1225,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-22T13:33:20.515Z",
        "cooked": "<p>Wow, thanks a lot for your in-depth answer!</p>\n<p>I think I can live with range-counts-as-additional-data suggestion, since indeed the applications I have in mind exhibit ranges I know I will want to query.</p>\n<p>As the main reason for the missing \"getRangeCount\u201d API you mention storage servers - are these synonymous with storage engines? If so, would the ongoing discussion for pluggable additional engines benefit from also considering efficient range counts as a criterion?</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T13:33:20.515Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 83,
        "readers_count": 82,
        "score": 21.6,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1226,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-22T13:37:12.550Z",
        "cooked": "<p>But this thread doesn\u2019t mention Swift at all, and is about all keys in a data base, isn\u2019t it?</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T13:37:12.550Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 78,
        "readers_count": 77,
        "score": 25.6,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1227,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-22T13:41:05.591Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"cloudspeech\" data-post=\"8\" data-topic=\"444\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cloudspeech/48/330_2.png\" class=\"avatar\"> cloudspeech:</div>\n<blockquote>\n<p>But this thread doesn\u2019t mention Swift at all, ?</p>\n</blockquote>\n</aside>\n<p>Swift, Java, Python and .NET all use the same underlying C API, so the same algorithm apply on all of them. The Swift binding probably implements a similar solution than the others.</p>\n<aside class=\"quote no-group\" data-username=\"cloudspeech\" data-post=\"8\" data-topic=\"444\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cloudspeech/48/330_2.png\" class=\"avatar\"> cloudspeech:</div>\n<blockquote>\n<p>and is about all keys in a data base, isn\u2019t it</p>\n</blockquote>\n</aside>\n<p>You can count a subset of the database by using <a href=\"https://apple.github.io/foundationdb/api-python.html#subspaces\" rel=\"noopener nofollow ugc\">subspaces</a>. I think the JAVA example from <a class=\"mention\" href=\"/u/spullara\">@spullara</a> at the bottom counts all keys in the db, while the .NET code can count inside subspaces, but this is trivial to add.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T13:41:05.591Z",
        "reply_count": 1,
        "reply_to_post_number": 8,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 82,
        "readers_count": 81,
        "score": 31.4,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-python.html#subspaces",
            "internal": false,
            "reflection": false,
            "title": "Python API \u2014 FoundationDB 5.1",
            "clicks": 4
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1228,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-22T13:45:02.042Z",
        "cooked": "<p>Before this gets out of hand due to misunderstandings accumulating - it has already been clarified earlier in this thread that there is <em>no</em> efficient API call in the underlying C API, for good reasons related to the design and architecture of FDB. So, no need to speculate further.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T13:45:02.042Z",
        "reply_count": 0,
        "reply_to_post_number": 9,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 69,
        "readers_count": 68,
        "score": 18.8,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1233,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-05-22T16:54:34.907Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"cloudspeech\" data-post=\"7\" data-topic=\"444\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cloudspeech/48/330_2.png\" class=\"avatar\"> cloudspeech:</div>\n<blockquote>\n<p>As the main reason for the missing \"getRangeCount\u201d API you mention storage servers - are these synonymous with storage engines? If so, would the ongoing discussion for pluggable additional engines benefit from also considering efficient range counts as a criterion?</p>\n</blockquote>\n</aside>\n<p>So, the storage server and storage engine aren\u2019t <em>quite</em> synonymous. A storage server is a process that provides endpoints to allow for storing and retrieving key value ranges. All FDB reads go directly to the storage servers, and all writes eventually go to them, though the pipeline is a little more involved.</p>\n<p>The storage engine is the underlying structure that a storage server sits on top of. I don\u2019t think it would be too incorrect to think of a storage server as a process with a storage engine and a network interface. (The code for a storage server is in <a href=\"https://github.com/apple/foundationdb/blob/master/fdbserver/storageserver.actor.cpp\">storageserver.actor.cpp</a>. The storage engine sits behind an <a href=\"https://github.com/apple/foundationdb/blob/master/fdbserver/IKeyValueStore.h\">IKeyValueStore</a>. Creating a new storage engine usually involves creating a new implementation of the IKeyValueStore interface and plumbing it through so that storage servers can actually use it.)</p>\n<p>If being able to get key counts for arbitrary regions was super important, I could see the argument for making a new storage engine that kept that bookkeeping around. Of course, it would only actually be useful if the endpoint were somehow exposed. If one were already making a new storage engine, I could see the logic in modifying your design to be more accommodating to such queries. One would still have to grapple with the fact that there is write amplification on the order of a COW B-tree (at least, in the implementation I have in my head) if done trivially, which I think is somewhat fundamental to the problem. You could probably do something like keep a separate disk-backed datastructure that was something like a finite number of keys with the number of keys and values between signposts. (And also the RYW issue can\u2019t be solved by a niftier storage engine.)</p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-22T16:54:34.907Z",
        "reply_count": 1,
        "reply_to_post_number": 7,
        "quote_count": 1,
        "incoming_link_count": 7,
        "reads": 74,
        "readers_count": 73,
        "score": 54.8,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/master/fdbserver/storageserver.actor.cpp",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/storageserver.actor.cpp at master \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 3
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/master/fdbserver/IKeyValueStore.h",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/IKeyValueStore.h at master \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2050,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2018-09-09T16:05:27.426Z",
        "cooked": "<p>(The topic suggestion tool of this forum works very well, I started typing a question and I ended up here)</p>\n<p>So, if understand correctly range count is not implemented because storage server would do the same as the client ie. fetch all keys with their associated value and count them. The workaround is that it\u2019s up to the layer-application to create counts using atomic operations.</p>\n<p>That would mean that instance when executing the following pseudo SQL query:</p>\n<pre><code class=\"lang-sql\">SELECT * FROM message WHERE 456 &lt; created_at &lt; 789 AND user=42\n</code></pre>\n<p>The query planner can not choose the optimal index that is on <code>created_at</code> because I can only precompute the total count of keys in that index and not the range count of the particular slice of keys I need to fetch. Both indices will have the same count by storing more data as metadata of the index subspace.</p>\n<p>AFAIK one way to workaround that is to split the index of <code>created_at</code> into several sub-indices like with elasticsearch (!) which leads anyway to more \u201cpressure\u201d application layer side.</p>\n<p>I am thinking out loud, but splitting manually is painful, maybe there is probabilistic-based solution for that problem that could automate splitings and querying even if the range count is an approximation.</p>\n<p>Also, maybe in the above example query, a compound <code>(created_at, user)</code> index using <a href=\"https://apple.github.io/foundationdb/spatial-indexing.html\" rel=\"nofollow noopener\">a space filling curve like morton code</a> can do the job.</p>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-09-09T16:06:41.528Z",
        "reply_count": 0,
        "reply_to_post_number": 11,
        "quote_count": 0,
        "incoming_link_count": 5,
        "reads": 57,
        "readers_count": 56,
        "score": 36.4,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/spatial-indexing.html",
            "internal": false,
            "reflection": false,
            "title": "Spatial Indexing \u2014 FoundationDB 5.2",
            "clicks": 9
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2051,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2018-09-09T16:11:24.317Z",
        "cooked": "<p>This reply in another topic is helpful <a href=\"https://forums.foundationdb.org/t/getting-the-number-of-key-value-pairs/189/6?u=amirouche\">Getting the number of key/value pairs</a> it propose to manually build statistic but automate it a little bit. Also it seems like it also useful for doing a random key lookup.</p>",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-09-09T16:11:24.317Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 55,
        "readers_count": 54,
        "score": 16.0,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/getting-the-number-of-key-value-pairs/189/6",
            "internal": true,
            "reflection": false,
            "title": "Getting the number of key/value pairs",
            "clicks": 39
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2056,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-09-10T16:25:03.060Z",
        "cooked": "<p>I think that there is a claim here that if you had an index on created_at, then you couldn\u2019t use it to find the number of results between two arbitrary points without a more sophisticated data structure. That is correct. That reply you linked to points towards a more sophisticated data structure that you might implement to do so, though.</p>\n<p>You could use a space filling curve to satisfy those two predicates in your query. If you had a regular one on <code>(user, created_at)</code>, then it\u2019s just a scan from <code>(42, 457)</code> to <code>(42, 789)</code>, though, which is definitely easier. This only works if you need equality on the user ID and don\u2019t have to do any range scans (which might be the case for some use cases).</p>",
        "post_number": 14,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-09-10T16:25:03.060Z",
        "reply_count": 0,
        "reply_to_post_number": 13,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 53,
        "readers_count": 52,
        "score": 45.6,
        "yours": false,
        "topic_id": 444,
        "topic_slug": "missing-api-for-getting-just-the-count-of-a-key-range",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 41,
          "username": "amirouche",
          "name": "Amirouche",
          "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/missing-api-for-getting-just-the-count-of-a-key-range/444/14",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1200,
      1201,
      1214,
      1218,
      1223,
      1224,
      1225,
      1226,
      1227,
      1228,
      1233,
      2050,
      2051,
      2056
    ]
  },
  "timeline_lookup": [
    [
      1,
      2711
    ],
    [
      3,
      2710
    ],
    [
      5,
      2709
    ],
    [
      12,
      2599
    ],
    [
      14,
      2598
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Missing API for getting just the count of a key range?",
  "id": 444,
  "title": "Missing API for getting just the count of a key range?",
  "posts_count": 14,
  "created_at": "2018-05-21T09:23:36.938Z",
  "views": 3599,
  "reply_count": 9,
  "like_count": 4,
  "last_posted_at": "2018-09-10T16:25:03.060Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
  "category_id": 8,
  "word_count": 2435,
  "deleted_at": null,
  "user_id": 208,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_444",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 14,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 6,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Getting the number of key/value pairs",
      "id": 189,
      "title": "Getting the number of key/value pairs",
      "slug": "getting-the-number-of-key-value-pairs",
      "posts_count": 12,
      "reply_count": 9,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2018-04-21T20:01:47.493Z",
      "last_posted_at": "2021-04-17T19:06:40.085Z",
      "bumped": true,
      "bumped_at": "2021-04-17T19:06:40.085Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 6235,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 132,
            "username": "Michael",
            "name": "Michael",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/4bbf92/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 323,
            "username": "WolfDan",
            "name": "Wolf Dan",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 41,
            "username": "amirouche",
            "name": "Amirouche",
            "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Limiting the cardinality of a key range",
      "id": 665,
      "title": "Limiting the cardinality of a key range",
      "slug": "limiting-the-cardinality-of-a-key-range",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-08-26T18:47:07.288Z",
      "last_posted_at": "2018-08-27T17:05:16.467Z",
      "bumped": true,
      "bumped_at": "2018-08-27T17:05:16.467Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1248,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 251,
            "username": "George",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Is it possible to fetch two different keys using &ldquo;fdb_transaction_get_range&rdquo; API in C program",
      "id": 1388,
      "title": "Is it possible to fetch two different keys using \"fdb_transaction_get_range\" API in C program",
      "slug": "is-it-possible-to-fetch-two-different-keys-using-fdb-transaction-get-range-api-in-c-program",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-05-23T08:14:07.379Z",
      "last_posted_at": "2019-05-23T15:43:55.444Z",
      "bumped": true,
      "bumped_at": "2019-05-23T15:43:55.444Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 591,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 511,
            "username": "sakthivelpvs",
            "name": "Sakthivel",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9dc877/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "How to get exact range of keys using fdb_transaction_get_range in C Programming",
      "id": 1355,
      "title": "How to get exact range of keys using fdb_transaction_get_range in C Programming",
      "slug": "how-to-get-exact-range-of-keys-using-fdb-transaction-get-range-in-c-programming",
      "posts_count": 5,
      "reply_count": 3,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-05-09T12:22:07.878Z",
      "last_posted_at": "2019-05-20T14:14:50.692Z",
      "bumped": true,
      "bumped_at": "2019-05-20T14:14:50.692Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1573,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 511,
            "username": "sakthivelpvs",
            "name": "Sakthivel",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9dc877/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "[Java] API to get only the keys?",
      "id": 972,
      "title": "[Java] API to get only the keys?",
      "slug": "java-api-to-get-only-the-keys",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-12-23T14:22:21.743Z",
      "last_posted_at": "2018-12-23T15:18:08.397Z",
      "bumped": true,
      "bumped_at": "2018-12-23T15:18:08.397Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 530,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 208,
        "username": "cloudspeech",
        "name": "Cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "post_count": 5,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 41,
        "username": "amirouche",
        "name": "Amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 31,
        "username": "dicklacara",
        "name": "Richard Applebaum",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 173,
        "username": "jkominek",
        "name": "Jay Kominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 208,
      "username": "cloudspeech",
      "name": "Cloudspeech",
      "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png"
    },
    "last_poster": {
      "id": 8,
      "username": "alloc",
      "name": "Alec Grieser",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
    },
    "links": [
      {
        "url": "https://forums.foundationdb.org/t/getting-the-number-of-key-value-pairs/189",
        "title": "Getting the number of key/value pairs",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 137,
        "user_id": 53,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/getting-the-number-of-key-value-pairs/189/6",
        "title": "Getting the number of key/value pairs",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 39,
        "user_id": 41,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#atomic-operations",
        "title": "Developer Guide \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 10,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/spatial-indexing.html",
        "title": "Spatial Indexing \u2014 FoundationDB 5.2",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 9,
        "user_id": 41,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md",
        "title": "swift-evolution/0195-dynamic-member-lookup.md at master \u00b7 apple/swift-evolution \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 8,
        "user_id": 31,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://apple.github.io/foundationdb/api-python.html#subspaces",
        "title": "Python API \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 53,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/master/fdbserver/storageserver.actor.cpp",
        "title": "foundationdb/storageserver.actor.cpp at master \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}