{
  "post_stream": {
    "posts": [
      {
        "id": 9812,
        "name": "Chetan Mittal",
        "username": "CodeOx",
        "avatar_template": "/user_avatar/forums.foundationdb.org/codeox/{size}/1151_2.png",
        "created_at": "2021-08-04T05:54:34.399Z",
        "cooked": "<p>Is there an efficient way to create a key-value pair if it\u2019s absent? A while ago someone suggested this can be added through the atomic mutation framework. I\u2019m trying to figure out how this might work?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-04T05:54:34.399Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 318,
        "reads": 54,
        "readers_count": 53,
        "score": 1615.8,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "Chetan Mittal",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/how-can-i-use-the-operation-of-cas-in-java-client/3543/2",
            "internal": true,
            "reflection": true,
            "title": "How can i use the operation of CAS in Java Client",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 986,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 9814,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2021-08-04T18:22:31.562Z",
        "cooked": "<p>It\u2019s relatively straightforward to add a new atomic mutation for a function <code>(key, Optional&lt;value&gt;) -&gt; Optional&lt;(key, value)&gt;</code>, as long as that function is <em>total</em> (i.e. doesn\u2019t crash and is well defined for all possible inputs). This function can even use one parameter to customize its behavior. For example the atomic add mutation takes a little-endian integer that encodes what to add to the little-endian value. I think some kind of <code>set_if_absent</code> mutation could make sense and fit that criteria. The semantics would probably be <code>set_if_absent &lt;key&gt; &lt;value&gt;</code> would set the key to value if previously unset and otherwise be a no-op.</p>\n<p>That said it\u2019s kind of a lot of work to add it, and it would probably not be available in a release for a while if we do decide to add it. Here\u2019s what\u2019s currently available:</p>\n<ol>\n<li>Read key at snapshot isolation</li>\n<li>If key is absent, add key to read conflict range manually and set key to value</li>\n<li>Commit</li>\n</ol>\n<p>This costs a GRV (get read version) to start the transaction, a read, and a commit, so basically three round trips to the server. If you\u2019re combining this with other operations in a transaction then this does have key in the read conflict range (some of the time), and so might cause the whole transaction to need to retry.</p>\n<p>If we did have the atomic mutation described above, then this would only cost two server round trips (GRV + commit), and would never have key in the read conflict range.</p>\n<p>I\u2019m imagining use cases for this and one might be if you need to register unique usernames at a high throughput or something and you always want the first writer to win. For this use case we could actually do something with versionstamped keys (though it\u2019s not as clean). Write <code>key + &lt;versionstamp&gt; -&gt; value</code> instead of just <code>key -&gt; value</code>, and when you read you do a range read with limit 1 for keys starting with <code>key</code>. I think this gives you the same semantics - the downside is that you use extra storage for keys that weren\u2019t the first writer. You could have some kind of background job to clean these keys up but that adds significant complexity.</p>\n<p>Edit: for completeness\u2019s sake I should probably point out that the key input and output must be the same in the <code>(key, Optional&lt;value&gt;) -&gt; Optional&lt;(key, value)&gt;</code> function described above. Maybe it makes more sense to just call it a function <code>Optional&lt;Value&gt; -&gt; Optional&lt;Value&gt;</code></p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-04T23:31:52.069Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 54,
        "readers_count": 53,
        "score": 50.8,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9819,
        "name": "Chetan Mittal",
        "username": "CodeOx",
        "avatar_template": "/user_avatar/forums.foundationdb.org/codeox/{size}/1151_2.png",
        "created_at": "2021-08-05T12:24:44.888Z",
        "cooked": "<p>Thank you for the detailed answer. It is really useful.</p>\n<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"2\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>The semantics would probably be <code>set_if_absent &lt;key&gt; &lt;value&gt;</code> would set the key to value if previously unset and otherwise be a no-op.</p>\n</blockquote>\n</aside>\n<p>This is essentially what is required. The only problem here is that there is no way to ensure whether the write actually happened. Is there a possibility to throw an error (i.e. fail the transaction somehow) if the write did not actually happen (which means the key was already present).</p>\n<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"2\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>If we did have the atomic mutation described above, then this would only cost two server round trips (GRV + commit), and would never have key in the read conflict range.</p>\n</blockquote>\n</aside>\n<p>This will be really useful. The use case is to optimize large transactions which insert a number of keys.  Since these are insert operations, I have to lookup these keys to be 100% certain no-one has created this as part of different transaction. The optimization that is proposed is if I can do an insert natively, the transactin will succeed 99 percent of the time and I will save one read operation for each insert.</p>\n<p>Is there any other way to go about this, if the atomic mutation framework cannot be used to fail the transaction? I\u2019m happy to raise a feature request and contribute to the implementation of it seems feasible.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-05T12:24:44.888Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 44,
        "readers_count": 43,
        "score": 43.8,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "Chetan Mittal",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 986,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9820,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2021-08-05T17:16:31.229Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"CodeOx\" data-post=\"3\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/codeox/48/1151_2.png\" class=\"avatar\"> CodeOx:</div>\n<blockquote>\n<p>The only problem here is that there is no way to ensure whether the write actually happened.</p>\n</blockquote>\n</aside>\n<p>The way mutations work is that you just commit the mutation and it succeeds (even if the mutation didn\u2019t end up having an effect) - you don\u2019t get any feedback about what the previous value actually was. You can always read the previous value in your transaction but that kind of defeats the purpose. There\u2019s some subtle tricks you can play with read conflict ranges - you can add a read conflict on the key without actually reading it. But all that really tells you is that no one modified the key at a version between your transaction\u2019s read version and commit version, exclusive. Sometimes you can infer that the key is empty at a particular read version without actually reading it based on some invariants of your data model - if that\u2019s the case then the read conflict without actually reading approach should work well.</p>\n<p>FWIW it turns out we have a use case for something slightly more general so I started writing a short design for it: <a href=\"https://github.com/apple/foundationdb/wiki/Proposal:-compare_and_set-mutation\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Proposal: compare_and_set mutation \u00b7 apple/foundationdb Wiki \u00b7 GitHub</a>. Still a work in progress.</p>\n<aside class=\"quote no-group\" data-username=\"CodeOx\" data-post=\"3\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/codeox/48/1151_2.png\" class=\"avatar\"> CodeOx:</div>\n<blockquote>\n<p>The use case is to optimize large transactions which insert a number of keys. Since these are insert operations, I have to lookup these keys to be 100% certain no-one has created this as part of different transaction.</p>\n</blockquote>\n</aside>\n<p>One idea is to create a new directory for the keys you\u2019re inserting, so that you can just blind write the bulk of the data into the directory\u2019s subspace and rely on seeing whether or not the directory was created to be certain no-one has already created this (be careful with <code>commit_unknown_result</code> - it could be that an earlier attempt in the retry loop actually succeeded, and you\u2019re not conflicting with another transaction)</p>\n<p>Another idea (which only works if all the keys you\u2019re inserting are adjacent and belong to a unique subspace) is that you can cheaply check if a key range is empty by doing a range read with limit 1. If you get 0 key value pairs back, then the range is empty. If you get 1, then it\u2019s not empty.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-05T17:16:31.229Z",
        "reply_count": 2,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 9,
        "reads": 44,
        "readers_count": 43,
        "score": 63.8,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/wiki/Proposal:-compare_and_set-mutation",
            "internal": false,
            "reflection": false,
            "title": "Proposal: compare_and_set mutation \u00b7 apple/foundationdb Wiki \u00b7 GitHub",
            "clicks": 26
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9821,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2021-08-05T18:37:23.001Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"4\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>FWIW it turns out we have a use case for something slightly more general</p>\n</blockquote>\n</aside>\n<p>Ok actually it turns out that it\u2019s not as useful as initially thought for us for the same reason (wanting to know whether or not it had an effect without reading)</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-05T18:37:23.001Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 7,
        "reads": 40,
        "readers_count": 39,
        "score": 43.0,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9825,
        "name": "Chetan Mittal",
        "username": "CodeOx",
        "avatar_template": "/user_avatar/forums.foundationdb.org/codeox/{size}/1151_2.png",
        "created_at": "2021-08-06T12:00:13.594Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"4\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>But all that really tells you is that no one modified the key at a version between your transaction\u2019s read version and commit version, exclusive.</p>\n</blockquote>\n</aside>\n<p>Yes, I don\u2019t think it will actually help when the key is already written as a part of a previously committed transaction.</p>\n<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"4\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>One idea is to create a new directory for the keys you\u2019re inserting, so that you can just blind write the bulk of the data into the directory\u2019s subspace and rely on seeing whether or not the directory was created to be certain no-one has already created this</p>\n</blockquote>\n</aside>\n<p>I\u2019m not sure if I understand correctly, but what happens if some key in the transaction is present already, then in that case will the directory be created even though the key was already there?</p>\n<p>Also, would having a native insert operation besides the set and a get operation follow the general FoundationDB philosophy? Having inserts supported natively will be really useful.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-06T12:00:13.594Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 37,
        "readers_count": 36,
        "score": 42.4,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "Chetan Mittal",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 986,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9826,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2021-08-06T15:58:22.643Z",
        "cooked": "<p>The idea is that if you\u2019re using the directory layer to manage all your subspaces then if you successfully create a directory in a transaction (and check that it wasn\u2019t already present), then you know the subspace associated with that directory you created is empty.</p>\n<aside class=\"quote no-group\" data-username=\"CodeOx\" data-post=\"6\" data-topic=\"2838\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/codeox/48/1151_2.png\" class=\"avatar\"> CodeOx:</div>\n<blockquote>\n<p>Also, would having a native insert operation besides the set and a get operation follow the general FoundationDB philosophy? Having inserts supported natively will be really useful.</p>\n</blockquote>\n</aside>\n<p>What would be the semantics of the insert operation? If it\u2019s another name for the create if absent operation we\u2019ve been talking about then the basic problem is that the way foundationdb separates transaction commits and reads architecturally makes it so that it\u2019s basically just as efficient to just read on the client even if we did want to implement that logic server-side.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2021-08-06T15:58:22.643Z",
        "reply_count": 0,
        "reply_to_post_number": 6,
        "quote_count": 1,
        "incoming_link_count": 5,
        "reads": 34,
        "readers_count": 33,
        "score": 31.8,
        "yours": false,
        "topic_id": 2838,
        "topic_slug": "efficient-way-to-create-if-absent-in-fdb",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-create-if-absent-in-fdb/2838/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      9812,
      9814,
      9819,
      9820,
      9821,
      9825,
      9826
    ]
  },
  "timeline_lookup": [
    [
      1,
      1540
    ],
    [
      2,
      1539
    ],
    [
      3,
      1538
    ],
    [
      6,
      1537
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Efficient way to create if absent in FDB",
  "id": 2838,
  "title": "Efficient way to create if absent in FDB",
  "posts_count": 7,
  "created_at": "2021-08-04T05:54:34.347Z",
  "views": 1021,
  "reply_count": 3,
  "like_count": 2,
  "last_posted_at": "2021-08-06T15:58:22.643Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "efficient-way-to-create-if-absent-in-fdb",
  "category_id": 7,
  "word_count": 1484,
  "deleted_at": null,
  "user_id": 986,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2838",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "How to minimize transaction conflicts on atomic operations?",
      "id": 1051,
      "title": "How to minimize transaction conflicts on atomic operations?",
      "slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
      "posts_count": 8,
      "reply_count": 4,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2019-01-24T15:30:28.527Z",
      "last_posted_at": "2019-01-25T16:01:20.698Z",
      "bumped": true,
      "bumped_at": "2019-01-25T16:01:20.698Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 2181,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 323,
            "username": "WolfDan",
            "name": "Wolf Dan",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "How can i use the operation of CAS in Java Client",
      "id": 3543,
      "title": "How can i use the operation of CAS in Java Client",
      "slug": "how-can-i-use-the-operation-of-cas-in-java-client",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2022-09-07T06:10:46.124Z",
      "last_posted_at": "2022-09-07T17:32:18.670Z",
      "bumped": true,
      "bumped_at": "2022-09-07T17:32:18.670Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 676,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 1158,
            "username": "T-TRz879",
            "name": "T T Rz879",
            "avatar_template": "/user_avatar/forums.foundationdb.org/t-trz879/{size}/1418_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Atomic_Add(key, -1) can &ldquo;leak&rdquo; keys with value 0 if you are not careful",
      "id": 148,
      "title": "Atomic_Add(key, -1) can \"leak\" keys with value 0 if you are not careful",
      "slug": "atomic-add-key-1-can-leak-keys-with-value-0-if-you-are-not-careful",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-04-20T19:00:47.495Z",
      "last_posted_at": "2018-04-21T10:05:05.991Z",
      "bumped": true,
      "bumped_at": "2018-04-21T10:05:05.991Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 817,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 111,
            "username": "andoma",
            "name": "Andreas Smas",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andoma/{size}/78_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 14,
        "username": "andrew.noyes",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 986,
        "username": "CodeOx",
        "name": "Chetan Mittal",
        "avatar_template": "/user_avatar/forums.foundationdb.org/codeox/{size}/1151_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      }
    ],
    "created_by": {
      "id": 986,
      "username": "CodeOx",
      "name": "Chetan Mittal",
      "avatar_template": "/user_avatar/forums.foundationdb.org/codeox/{size}/1151_2.png"
    },
    "last_poster": {
      "id": 14,
      "username": "andrew.noyes",
      "name": "",
      "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/wiki/Proposal:-compare_and_set-mutation",
        "title": "Proposal: compare_and_set mutation \u00b7 apple/foundationdb Wiki \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 26,
        "user_id": 14,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/how-can-i-use-the-operation-of-cas-in-java-client/3543/2",
        "title": "How can i use the operation of CAS in Java Client",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 2,
        "user_id": 14,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}