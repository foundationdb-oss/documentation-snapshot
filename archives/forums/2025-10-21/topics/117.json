{
  "post_stream": {
    "posts": [
      {
        "id": 177,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-04-20T10:47:12.065Z",
        "cooked": "<p>What is the most efficient way to model a log abstraction like Kafka or Amazon Kinesis on top of FoundationDB?</p>\n<p>So far I\u2019ve come up with is create N keys to be used as atomic counters to keep track of the current tail of the log, where N is the number of parallel shards (partitions in Kafka). Within a transaction, atomically increment the counter for the shard you\u2019re writing to, then write the keys in the form of \u201cLOG_NAME/SHARD_ID/OFFSET\u201d where offset is the value from the counter. The value at that key would be the value written at that position in the log.</p>\n<p>Reads of this structure are pretty obvious so I won\u2019t bother outlining them.</p>\n<p>Is there a more efficient way to do this using a part of the FoundationDB API I haven\u2019t tried yet? I saw something about versionstamps which could establish ordering, but I\u2019m not sure how to actually use those.</p>\n<p>Additionally, that key structure would potentially produce hot keys if they all share a prefix. Is that a problem in practice such that putting the Shard ID first in the key would help? The counter keys would be updated pretty frequently as well, which is the point of sharding them in the first place.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T10:47:12.065Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 556,
        "reads": 128,
        "readers_count": 127,
        "score": 2822.6,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/building-scalable-log-streaming-on-foundationdb/2781",
            "internal": true,
            "reflection": true,
            "title": "Building scalable log streaming on FoundationDB",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 190,
        "name": "Brian Haslet",
        "username": "pineapple",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
        "created_at": "2018-04-20T12:39:53.044Z",
        "cooked": "<p>Typically you would keep ID generator keys in a separate namespace that is related to the dataset they are tracking, but not necessarily a parent in the key space of the things being mapped. Then use the atomic to increment the ID generator during the insert transaction.</p>\n<p>You could use the version stamps on the ID generator keys, but you would still have to \u201ctouch them\u201d during the transaction.</p>\n<p>Does this help?</p>\n<p>There may be a way to do this implicitly, but I\u2019m not aware of it and I\u2019m three years out of date with the current codebase</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T12:39:53.044Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 125,
        "readers_count": 124,
        "score": 50.0,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Brian Haslet",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 78,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 191,
        "name": "Brian Haslet",
        "username": "pineapple",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
        "created_at": "2018-04-20T12:49:56.214Z",
        "cooked": "<p>So for instance, have a key, [TimeSeriesID, \u201cIDGenerator\u201d] that generates identifiers for a particular sharded time series, then store the actual time series data under another tuple</p>\n<p>[TimeSeriesID GeneratedTimeSeriesID\u2026 your data]</p>\n<p>The TimeSeriesID\u2019s are your ShardID\u2019s if you want to look at it that way.</p>\n<p>Maybe an FDB person can say if you can control the policy of how a specific key space is actually sharded physically rather than logically.  I dunno if that is possible.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T12:55:59.195Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 51,
        "reads": 119,
        "readers_count": 118,
        "score": 278.8,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Brian Haslet",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 78,
          "username": "pineapple",
          "name": "Brian Haslet",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 78,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 194,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-04-20T13:22:08.515Z",
        "cooked": "<p>Versionstamps are pretty much exactly for this. You don\u2019t need a separate \u201cgenerator\u201d key. set_versionstamped_key() will automatically fill in the desired part of your key with a monotonically increasing value derived from the version number at which your transaction commits. It is up to you to order the writes within each transaction.</p>\n<p>set_versionstamped_value is for building secondary indexes of your log.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T13:22:08.515Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 113,
        "readers_count": 112,
        "score": 99.6,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 195,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-04-20T13:29:48.579Z",
        "cooked": "<p>Yes, the assumption here is the data in question already has a defined order (and can be written as such) and it simply needs to be made available in a more convenient form for use in a different system or for long term storage.</p>\n<p>Thanks for the guidance, this sounds pretty trivial now!</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T13:29:48.579Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 111,
        "readers_count": 110,
        "score": 27.2,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 196,
        "name": "Brian Haslet",
        "username": "pineapple",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
        "created_at": "2018-04-20T13:29:53.650Z",
        "cooked": "<p>Perfect, that\u2019s good to know and super useful</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T13:29:53.650Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 109,
        "readers_count": 108,
        "score": 26.8,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Brian Haslet",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 78,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 199,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-04-20T14:01:21.359Z",
        "cooked": "<p>This changed my design for the read side a bit.</p>\n<p>Using the Python tuple API I get keys that look like this:</p>\n<p><code>\\x01foobar\\x003\\x00\\x00\\x00\\x0b&lt;\\xf1\\xc4\\xa0\\x00\\x00\\x00\\x00</code></p>\n<p>In order to read from start to finish within this <code>foobar</code> stream, I can use the get_range API to read the earliest key within that prefix pretty easily with something like <code>\\x01foobar\\x00</code> as the starting key, <code>\\x01foobar\\x01</code> as the ending key, and a limit of 1. Technically that would be hidden from me because I\u2019m using the Python tuple API, but I just want to understand what I\u2019m actually doing here.</p>\n<p>Reading past the first key I\u2019m not as sure about. Should I just take the first key I read and keep reading until <code>\\x01foobar\\x01</code> with a suitable limit as my batch size? Or is there a smarter way to go about finding the \u201cend of stream\u201d than just adding <code>1</code> onto the end of the key?</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T14:03:15.030Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 105,
        "readers_count": 104,
        "score": 46.0,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 212,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-04-20T16:07:19.081Z",
        "cooked": "<p>Yep, that\u2019s the right idea (that you can read until you reach <code>\\x01foobar\\x01</code>. The subspace class abstracts some of that away from you (see: <a href=\"https://apple.github.io/foundationdb/api-python.html#subspaces\">https://apple.github.io/foundationdb/api-python.html#subspaces</a>), so you can do something like <code>s = fdb.Subspace((\"foobar\",)) ; tr.get_range(last_key or s.range().start, s.range().end, limit=batch_size)</code>. Under the covers, it\u2019s scanning from <code>\\x01foobar\\x00\\x00</code> to <code>\\x01foobar\\x00\\xff</code> (that is, everything that is \u201cstrictly within\u201d the subspace\u2013it is strictly greater than <code>\\x01foobar\\x00</code> and less than <code>\\x01foobar\\x00\\xff</code>). You could alternatively scan through <code>\\x01foobar\\x01</code> and it would work the same way.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-04-20T16:07:19.081Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 107,
        "readers_count": 106,
        "score": 31.4,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-python.html#subspaces",
            "internal": false,
            "reflection": false,
            "title": "Python API \u2014 FoundationDB 5.1",
            "clicks": 4
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 81,
          "username": "ryanworl",
          "name": "Ryan Worl",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 806,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-03T16:41:30.495Z",
        "cooked": "<p>We just finished implementing a Log Layer that handles compaction of large blocks of log after a while (to benefit from better compression ratio), and this is definitely non-trivial to do ! (took 3 full days of work, from scratch).</p>\n<p>Our log Layer does support efficient insertion of small batches of logs into a \u201cincomplete\u201d arena, and when there is a sufficient quantity of logs, compacts a large batch of logs into a single chunk that goes into a \u201ccomplete\u201d arena, taking advantage of better compression ratio. Also, \u201ccomplete\u201d chunks are immutable, and can be cached as long as readers want (while incomplete chunks are not to be cached)</p>\n<p>So something like:</p>\n<ul>\n<li><code>(..., 'counter') = (total_log_count, incomplete_log_count)</code></li>\n<li><code>(..., 'complete', ID0000) = compressed[chunk[1000 logs]]</code></li>\n<li><code>(..., 'complete', ID1000) = compressed[chunk[1000 logs]]</code></li>\n<li><code>(..., 'complete', ....) // &lt;-- new compressed chunks are appended here</code></li>\n<li><code>(..., 'incomplete', ID2000) = chunk[2 logs]</code></li>\n<li><code>(..., 'incomplete', ID2002) = chunk[10 logs]</code></li>\n<li><code>(..., 'incomplete', ID2012) = chunk[1 logs]</code></li>\n<li><code>(..., 'incomplete', ID2013) = chunk[5 logs]</code></li>\n<li><code>(....,'incomplete', ....) // &lt;-- new logs are appended here</code></li>\n</ul>\n<p><em>of course, \u2018counter\u2019, \u2018complete\u2019, \u2018incomplete\u2019 etc\u2026 are not stored as strings but as small integers to reduce key size!</em></p>\n<p>The <code>counter</code> key is used to decide whether or not adding X more logs to the incomplete arena would go over the self-imposed limit of 1000 logs, and compact all the partial chunks into a single (or more!) compressed chunk. It will also be used by subscribers to create watches and be notified when stuff happens on this log.</p>\n<p>Readers can use the fact that compressed chunks have the same ID as the first log they contain, so if they want to read log <span class=\"hashtag\">#1234</span> to log <span class=\"hashtag\">#1304</span> (which are compressed) <code>GetRange(Last_Less_Or_Equal(ID1234), FirstGreaterThan(ID1304))</code> will return only the single chunk <code>ID1000</code> which contains all the rows I want.</p>\n<p>On paper, this looks simple to implement, especially the writer:</p>\n<ul>\n<li>Maximum Value Size of 100,000 bytes, so a <code>compressed[chunk[...]]</code> cannot take more than ~100KB, which when compressing if <em>very</em> difficult to target\n<ul>\n<li>the trick of splitting the chunks into multiple keys with <code>,0</code>, <code>,1</code> suffix is not possible here, because it breaks the invariant of 1 chunk = 1 key that is exploited to do efficient range reads of logs (using key selectors will not be possible if we don\u2019t know how many \u2018parts\u2019 a chunk is split into, and would require additional reads, or to read a lot more data than needed)</li>\n</ul>\n</li>\n<li>Maximum Transaction Size of 10,000,000 bytes, which means that bulk insertion of existing log files is also an issue (need to reset the transaction every N batches that are unpredictible in size)\n<ul>\n<li>the issue is: do some work to pack a chunk, check the final size, and discover that it will be more than the budget per transaction, so throw away everything, rollback the state to before, commit, reset, etc\u2026</li>\n</ul>\n</li>\n<li>We chose to have the writer responsible of adding new logs and compacting the data in a single transaction, so that we don\u2019t need to have any other background thread (that could fail, slow down, etc\u2026).</li>\n</ul>\n<p>The reader is less complex:</p>\n<ul>\n<li>spin two concurrent GetRange(\u2026) on both subspace with <code>Last_Less_Or_Equal(ID)</code> and merge both results into a single list of results.</li>\n</ul>\n<p>In the end, this is doable, and it works well, BUT this is somewhat complicated, with two nested loops</p>\n<ul>\n<li>outer loop that spins new transactions and do \u201cup to X MB of writes\u201d per transaction to stay under 10 MB budget</li>\n<li>inner loop that has to decide how many logs can fit into a a chunks that <em>after compression</em> will not exceed<br>\n100 KB</li>\n<li>inside the inner loop, some complex code that must decide to pack or not, and take into account leftovers from previous incomplete appends, etc\u2026</li>\n</ul>\n<p>I was initially planning to use VersionStamps for ID, but since the writer has to decide to pack or not pack, it needs to know <em>how many</em> incomplete logs are already there, so since it needs to read at least one key, it can also read the counter and create nicer looking sequential intergers.</p>\n<p>I could have done a non-deterministic writer that only attempt to pack on some probability (1 in 10?) because I don\u2019t care if I have a little bit more than 1000 unpacked logs. BUT there may be a subtle issue with this:</p>\n<ul>\n<li>if the writer takes the non-deterministic path of packing the logs, and there\u2019s some kind of bug (in the code, due to the more complex query, timeouts etc\u2026) it will retry</li>\n<li>if will then then take the no-packing code path which will not fail.</li>\n</ul>\n<p>After a while, I will end up with all writers ending the retry chain with a non-packing result, and will end up with a huge \u2018incomplete\u2019 arena that is less than optimized (especially if the rest the code assume that it will be ~1000 logs only and uses some O(N) algorithm on that).</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-03T16:52:29.279Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 18,
        "reads": 96,
        "readers_count": 95,
        "score": 124.2,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 807,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-05-03T17:35:34.126Z",
        "cooked": "<p>I had a similar idea for compaction of messages which operated in a similar way, except there would be a third layer which expelled the compressed data into a file that is written to an object store to keep the data size small on the relatively expensive SSDs that are running the database. The database only exists to perform the sequencing of messages and temporary storage until the majority of messages are written to object storage on the order of minutes or seconds. Further compactions can happen at the object storage layer. Basically like a distributed LSM tree. This way you can operate systems in batch mode that work soley with the object store which can read at X00MB/s without issue and keep ultra low latency steaming from impacting each other. I think Pravega is a system that operates similarly.</p>\n<p>For my compacting idea, each stream would have a single process elected to perform the compactions and it would always start from zero and read forward. Versionstamps work fine with this because the consumer API would not allow for read between X and Y, just read X + N messages. Efficient reads are easy as you outlined already, just choose the minimum key that exists before your desired key and your desired offset is somewhere in that compressed data.</p>\n<p>Because the compression is all performed by a single writer per stream, it can easily decide to recompress a chunk of data if it exceeds 100KB by including a smaller number of messages until it fits. It could even use some basic statistics to detect the compression ratio of the data in the stream to know how many messages should work to avoid doing extra work as the stream grows.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-03T17:35:34.126Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 83,
        "readers_count": 82,
        "score": 71.6,
        "yours": false,
        "topic_id": 117,
        "topic_slug": "log-abstraction-on-foundationdb",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/log-abstraction-on-foundationdb/117/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      177,
      190,
      191,
      194,
      195,
      196,
      199,
      212,
      806,
      807
    ]
  },
  "timeline_lookup": [
    [
      1,
      2741
    ],
    [
      9,
      2728
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Log abstraction on FoundationDB",
  "id": 117,
  "title": "Log abstraction on FoundationDB",
  "posts_count": 10,
  "created_at": "2018-04-20T10:47:11.941Z",
  "views": 3110,
  "reply_count": 3,
  "like_count": 3,
  "last_posted_at": "2018-05-03T17:35:34.126Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "log-abstraction-on-foundationdb",
  "category_id": 5,
  "word_count": 1899,
  "deleted_at": null,
  "user_id": 81,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_117",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 10,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 5,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Building scalable log streaming on FoundationDB",
      "id": 2781,
      "title": "Building scalable log streaming on FoundationDB",
      "slug": "building-scalable-log-streaming-on-foundationdb",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2021-07-06T09:08:27.981Z",
      "last_posted_at": "2021-07-14T14:03:10.175Z",
      "bumped": true,
      "bumped_at": "2021-07-14T14:03:10.175Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 9,
      "views": 1864,
      "category_id": 14,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 962,
            "username": "begelundmuller",
            "name": "Benjamin Egelund-M\u00fcller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/begelundmuller/{size}/1127_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Shard marker for log-like data structures",
      "id": 1772,
      "title": "Shard marker for log-like data structures",
      "slug": "shard-marker-for-log-like-data-structures",
      "posts_count": 16,
      "reply_count": 12,
      "highest_post_number": 16,
      "image_url": null,
      "created_at": "2019-11-19T20:59:06.598Z",
      "last_posted_at": "2020-07-13T15:18:48.203Z",
      "bumped": true,
      "bumped_at": "2020-07-13T15:18:48.203Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 2315,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Discussion thread for new storage engine ideas",
      "id": 101,
      "title": "Discussion thread for new storage engine ideas",
      "slug": "discussion-thread-for-new-storage-engine-ideas",
      "posts_count": 31,
      "reply_count": 16,
      "highest_post_number": 33,
      "image_url": null,
      "created_at": "2018-04-20T06:11:56.229Z",
      "last_posted_at": "2020-02-18T21:37:22.164Z",
      "bumped": true,
      "bumped_at": "2020-02-18T21:37:22.164Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 31,
      "views": 15718,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 68,
            "username": "daverosenthal",
            "name": "Dave Rosenthal",
            "avatar_template": "/user_avatar/forums.foundationdb.org/daverosenthal/{size}/51_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 257,
            "username": "cih.y2k",
            "name": "cih.y2k",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cih.y2k/{size}/423_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 419,
            "username": "doublemax",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8e7dd6/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 1,
            "username": "davelester",
            "name": "Dave Lester",
            "avatar_template": "/user_avatar/forums.foundationdb.org/davelester/{size}/1927_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Transaction Log",
      "id": 785,
      "title": "Transaction Log",
      "slug": "transaction-log",
      "posts_count": 4,
      "reply_count": 2,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2018-10-19T09:53:24.224Z",
      "last_posted_at": "2018-10-22T13:58:23.756Z",
      "bumped": true,
      "bumped_at": "2018-10-22T13:58:23.756Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2939,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 382,
            "username": "rahul",
            "name": "Rahul",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/f14d63/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 78,
        "username": "pineapple",
        "name": "Brian Haslet",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 81,
      "username": "ryanworl",
      "name": "Ryan Worl",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
    },
    "last_poster": {
      "id": 81,
      "username": "ryanworl",
      "name": "Ryan Worl",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/api-python.html#subspaces",
        "title": "Python API \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      }
    ]
  },
  "bookmarks": []
}