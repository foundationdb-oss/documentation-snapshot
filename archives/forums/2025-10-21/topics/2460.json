{
  "post_stream": {
    "posts": [
      {
        "id": 8823,
        "name": "ZhiyuanDong",
        "username": "zydong",
        "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png",
        "created_at": "2020-12-02T13:26:04.318Z",
        "cooked": "<p>Hi, I\u2019m new to FDB Record layer and decide to use it for fun. After I read the exciting sigmod\u201919 paper. I have some questions:</p>\n<ol>\n<li>\n<p>When building a universe index, we need to scan all the records stored in a record store and apply the given key expression to them. I wonder how does the record layer determine the type of binary value stored in FDB. In other words, how does the key expression maps the string field name to actual values in the binary value?</p>\n</li>\n<li>\n<p>Is the version of each record stored adjacent to the record itself?</p>\n</li>\n<li>\n<p>According to \"Simple requests for individual records are comparatively expensive, with an average of \u223c13.3 key read of which \u223c7.7 are not for record data. \", does it mean the simple requests get roughly 6 records on average and 6 key reads for their versions and the rest key reads are for other metadata in record layer?</p>\n</li>\n</ol>\n<p>Thanks,<br>\nZhiyuan Dong</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-12-02T21:39:02.994Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 104,
        "reads": 33,
        "readers_count": 32,
        "score": 531.6,
        "yours": false,
        "topic_id": 2460,
        "topic_slug": "question-about-fdb-record-layers-sigmod19-paper",
        "display_username": "ZhiyuanDong",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 857,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-about-fdb-record-layers-sigmod19-paper/2460/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 8825,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-12-02T21:26:29.970Z",
        "cooked": "<p>Very cool you found the paper exciting and are taking a look at it! I\u2019ve taken a stab at answering those questions below, but feel free to ask any clarifying questions if things are unclear.</p>\n<aside class=\"quote no-group\" data-username=\"zydong\" data-post=\"1\" data-topic=\"2460\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/zydong/48/994_2.png\" class=\"avatar\"> zydong:</div>\n<blockquote>\n<p>When building a universe index, we need to scan all the records stored in a record store and apply the given key expression to them. I wonder how does the record layer determine the type of binary value stored in FDB. In other words, how does the key expression maps the string field name to actual values in the binary value?</p>\n</blockquote>\n</aside>\n<p>It\u2019s possible I\u2019m misunderstanding the question, but the basic mechanism for a key expression to extract data from a record is that each key expression specifies the <em>names</em> of all fields (and their order, but not as important for this question) needed in the index or primary key (or whatever the expression is specifying). In the RecordMetaData, a full Protobuf definition for each record type is stored, and then from that, we can use primitives in Protobuf to extract each field by name from the Protobuf record. (The binary format only includes field numbers, not field names, but the Protobuf definition specifies how to match up names and numbers.) The Protobuf record type definition also includes field type information, though we don\u2019t use that directly (instead relying on Protobuf to make the correct type casts and data serialization/deserialization decisions).</p>\n<p>If that wasn\u2019t what you were asking about, though, let me know and I can try again.</p>\n<aside class=\"quote no-group\" data-username=\"zydong\" data-post=\"1\" data-topic=\"2460\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/zydong/48/994_2.png\" class=\"avatar\"> zydong:</div>\n<blockquote>\n<p>Is the version of each record stored adjacent to the record itself?</p>\n</blockquote>\n</aside>\n<p>Yeah, that\u2019s right. Each record is stored using 1 or more FDB keys, with the value of each key being the serialized Protobuf data, possibly split across multiple values if the record is large. We then store the version at a special key at a special key that\u2019s guaranteed to be the first key of a split record. (Essentially, the record will be stored using keys that are suffixed with (Tuple-encoded) numbers 0 through <em>n</em>, and then we store the version of the record at a key suffixed with -1.)</p>\n<aside class=\"quote no-group\" data-username=\"zydong\" data-post=\"1\" data-topic=\"2460\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/zydong/48/994_2.png\" class=\"avatar\"> zydong:</div>\n<blockquote>\n<p>According to \"Simple requests for individual records are comparatively expensive, with an average of \u223c13.3 key read of which \u223c7.7 are not for record data. \", does it mean the simple requests get roughly 6 records on average and 6 key reads for their versions and the rest key reads are for other metadata in record layer?</p>\n</blockquote>\n</aside>\n<p>The wording on that experiment is a little strange, but requests can ask for more than one record at a time, and so I believe that you\u2019re basically right that this is implying that there are on average 6 records per request, though there are a few ways that this might not quite be right. I think versions actually do count as record data, and also, large records (&gt;100 kB) are split across multiple keys, so you might have more than 1 FDB key per record. (So, a dataset of non-versioned 10 kB records where every request reads 6 records and a different dataset of versioned 500 kB records where every request reads 1 record would read 6 keys of \u201crecord data\u201d per request.)</p>\n<p>What doesn\u2019t count as \u201crecord data\u201d would be the other meta-data in the Record Layer: for example, every store has a key stating what version of the meta-data that store last used, and that wouldn\u2019t count, and each store also contains a list of which indexes haven\u2019t been built yet, etc. And those are the kinds of things being counted in that 7.7 number (which sounds a bit high to me\u2013I think the theoretical number is something like 1 per transaction in an ideal system).</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-12-02T21:26:29.970Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 33,
        "readers_count": 32,
        "score": 16.6,
        "yours": false,
        "topic_id": 2460,
        "topic_slug": "question-about-fdb-record-layers-sigmod19-paper",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-about-fdb-record-layers-sigmod19-paper/2460/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 8828,
        "name": "ZhiyuanDong",
        "username": "zydong",
        "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png",
        "created_at": "2020-12-03T02:21:22.701Z",
        "cooked": "<p>Thanks for your quick and patient response!</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"2\" data-topic=\"2460\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>It\u2019s possible I\u2019m misunderstanding the question, but the basic mechanism for a key expression to extract data from a record is that each key expression specifies the <em>names</em> of all fields (and their order, but not as important for this question) needed in the index or primary key (or whatever the expression is specifying). In the RecordMetaData, a full Protobuf definition for each record type is stored, and then from that, we can use primitives in Protobuf to extract each field by name from the Protobuf record. (The binary format only includes field numbers, not field names, but the Protobuf definition specifies how to match up names and numbers.) The Protobuf record type definition also includes field type information, though we don\u2019t use that directly (instead relying on Protobuf to make the correct type casts and data serialization/deserialization decisions).</p>\n</blockquote>\n</aside>\n<p>Sorry for my first unclear question. I would like to make it <strong>more specific</strong>.</p>\n<p>As far as I know, the encoded protobuf message does not contain the mapping from field numbers to field name. If we want to map the names in the key expression to actual values, we need a protobuf definition (descriptor). <strong>Then my question is that</strong>:</p>\n<p>When we store a binary value (encoded protobuf message) into FDB, do we encode some type information to describe which Protobuf definition should be used for deserialization, such as type_id or type_definition_id in Cloudkit VLDB\u201918 paper? Otherwise, how do we know which record type does a given protobuf message belong to? <img src=\"https://emoji.discourse-cdn.com/twitter/thinking.png?v=12\" title=\":thinking:\" class=\"emoji\" alt=\":thinking:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>Thanks,<br>\nZhiyuan Dong</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-12-03T02:21:22.701Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 30,
        "readers_count": 29,
        "score": 21.0,
        "yours": false,
        "topic_id": 2460,
        "topic_slug": "question-about-fdb-record-layers-sigmod19-paper",
        "display_username": "ZhiyuanDong",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 857,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-about-fdb-record-layers-sigmod19-paper/2460/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 8830,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-12-03T17:35:39.698Z",
        "cooked": "<p>Ah, I see. Now I think I understand.</p>\n<p>For a given RecordMetaData\u2019s Protobuf record definition, there is exactly one record type, known as the \u201cunion descriptor\u201d, that has one field for each top level record type in the database (see: <a href=\"https://foundationdb.github.io/fdb-record-layer/GettingStarted.html#protobuf-configuration\">https://foundationdb.github.io/fdb-record-layer/GettingStarted.html#protobuf-configuration</a>). So, something like:</p>\n<pre><code class=\"lang-auto\">message RecordTypeOne { }\nmessage RecordTypeTwo { }\n\nmessage UnionDescriptor {\n   option (com.apple.foundationdb.record.record).usage = UNION;\n   RecordTypeOne _RecordTypeOne = 1;\n   RecordTypeTwo _RecordTypeTwo = 2;\n}\n</code></pre>\n<p>In this case, there are two types of records that the user may insert into a record store (<code>RecordTypeOne</code> and <code>RecordTypeTwo</code>), and the <code>UnionDescriptor</code> message is essentially \u201clisting\u201d those types.</p>\n<p>The Record Layer then wraps all records in union descriptor messages, essentially treating it as a <code>oneof</code>. When data are serialized, the user hands a record to the Record Layer, and the Record Layer creates a union descriptor message and sets the appropriate field to the supplied record. Then it serializes that union descriptor message to the database. When it deserializes a record, it always first deserializes it into an instance of the union descriptor, and then it searches to see which field in the union descriptor is set. From there, it knows what type the record is from the union descriptor definition.</p>\n<p>So, even though the Record Layer allows the user to save a heterogenous set of records of various types into the database, they are always stored using as a homogenous set of union descriptors, and so the same Protobuf deserializer can be used for every record in the store.</p>\n<p>(Note that because of how Protobuf serialization works, this essentially means that every record is assigned a \u201ctype number\u201d, which is the field number of that record in the union descriptor message. Then the type number (and, less relevantly, the message length) is then stored with the message data, so an alternative approach would have been to have had each record type definition just take a type number, and then we could have concatenated the type number with the serialized Protobuf data for that type. We didn\u2019t do that, partially because it\u2019s easier to just let Protobuf handle that for us, but we <em>did</em> take advantage of the fact that there\u2019s already a record type number when the <code>recordType()</code> key expression was created. That expression evaluates to some value that is guaranteed to be unique per record type (for a given meta-data definition), and by default, it\u2019s the union descriptor field number for that record.)</p>\n<p>(Also left out of this analysis is that in reality, you are allowed to have multiple fields in the union descriptor of the same type. At serialization time, the same field is consistently chosen based on some internal logic, and at deserialization time, it will look to see if <em>any</em> field is set and take the type from that field. But you can use this logic to do things like create a new field in the union descriptor every time you edit the record type, and then the field that\u2019s used on any given record is essentially a record of what version of the record type was current at the time the record was written.)</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-12-03T17:35:39.698Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 29,
        "readers_count": 28,
        "score": 25.8,
        "yours": false,
        "topic_id": 2460,
        "topic_slug": "question-about-fdb-record-layers-sigmod19-paper",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://foundationdb.github.io/fdb-record-layer/GettingStarted.html#protobuf-configuration",
            "internal": false,
            "reflection": false,
            "title": "Getting Started Guide",
            "clicks": 3
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 857,
          "username": "zydong",
          "name": "ZhiyuanDong",
          "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-about-fdb-record-layers-sigmod19-paper/2460/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 8834,
        "name": "ZhiyuanDong",
        "username": "zydong",
        "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png",
        "created_at": "2020-12-04T12:54:03.141Z",
        "cooked": "<p>Ah, I see.</p>\n<p>I really appreciate your detailed reponses!!!</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-12-04T12:54:03.141Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 24,
        "readers_count": 23,
        "score": 4.8,
        "yours": false,
        "topic_id": 2460,
        "topic_slug": "question-about-fdb-record-layers-sigmod19-paper",
        "display_username": "ZhiyuanDong",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 857,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-about-fdb-record-layers-sigmod19-paper/2460/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      8823,
      8825,
      8828,
      8830,
      8834
    ]
  },
  "timeline_lookup": [
    [
      1,
      1784
    ],
    [
      4,
      1783
    ],
    [
      5,
      1782
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Question about FDB Record Layer&rsquo;s SIGMOD&rsquo;19 paper",
  "id": 2460,
  "title": "Question about FDB Record Layer's SIGMOD'19 paper",
  "posts_count": 5,
  "created_at": "2020-12-02T13:26:04.240Z",
  "views": 1056,
  "reply_count": 3,
  "like_count": 0,
  "last_posted_at": "2020-12-04T12:54:03.141Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "question-about-fdb-record-layers-sigmod19-paper",
  "category_id": 12,
  "word_count": 1639,
  "deleted_at": null,
  "user_id": 857,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2460",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 5,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Record Layer query performance benchmarking against traditional RDBMS",
      "id": 2082,
      "title": "Record Layer query performance benchmarking against traditional RDBMS",
      "slug": "record-layer-query-performance-benchmarking-against-traditional-rdbms",
      "posts_count": 4,
      "reply_count": 0,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2020-04-20T18:46:55.680Z",
      "last_posted_at": "2020-04-22T15:51:53.223Z",
      "bumped": true,
      "bumped_at": "2020-04-22T15:51:53.223Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1528,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 712,
            "username": "rahul-nitkkr",
            "name": "Rahul Roy",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 34,
            "username": "scgray",
            "name": "Scott Gray",
            "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB Summit 2019: FoundationDB Record Layer: Open Source Structured Storage on FoundationDB",
      "id": 1767,
      "title": "FoundationDB Summit 2019: FoundationDB Record Layer: Open Source Structured Storage on FoundationDB",
      "slug": "foundationdb-summit-2019-foundationdb-record-layer-open-source-structured-storage-on-foundationdb",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2019-11-18T23:45:23.860Z",
      "last_posted_at": "2019-11-18T23:45:23.921Z",
      "bumped": true,
      "bumped_at": "2020-03-19T22:43:54.422Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 945,
      "category_id": 10,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Announcing the FoundationDB Record Layer",
      "id": 1018,
      "title": "Announcing the FoundationDB Record Layer",
      "slug": "announcing-the-foundationdb-record-layer",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-01-15T00:10:52.338Z",
      "last_posted_at": "2019-01-15T00:11:00.429Z",
      "bumped": true,
      "bumped_at": "2019-01-15T00:10:52.417Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": true,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 823,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 1,
            "username": "davelester",
            "name": "Dave Lester",
            "avatar_template": "/user_avatar/forums.foundationdb.org/davelester/{size}/1927_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "About the Record Layer category",
      "id": 939,
      "title": "About the Record Layer category",
      "slug": "about-the-record-layer-category",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2018-12-06T20:43:53.135Z",
      "last_posted_at": null,
      "bumped": true,
      "bumped_at": "2018-12-06T21:04:22.837Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": true,
      "unpinned": null,
      "excerpt": "Topics related to the FoundationDB Record Layer.",
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 882,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 1,
            "username": "davelester",
            "name": "Dave Lester",
            "avatar_template": "/user_avatar/forums.foundationdb.org/davelester/{size}/1927_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Record Layer Design Questions",
      "id": 3468,
      "title": "Record Layer Design Questions",
      "slug": "record-layer-design-questions",
      "posts_count": 22,
      "reply_count": 16,
      "highest_post_number": 22,
      "image_url": null,
      "created_at": "2022-07-27T05:43:33.408Z",
      "last_posted_at": "2023-07-20T14:19:37.434Z",
      "bumped": true,
      "bumped_at": "2023-07-20T14:19:37.434Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 7,
      "views": 1688,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 946,
            "username": "rajivr",
            "name": "Rajiv M Ranganath",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 857,
        "username": "zydong",
        "name": "ZhiyuanDong",
        "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 857,
      "username": "zydong",
      "name": "ZhiyuanDong",
      "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png"
    },
    "last_poster": {
      "id": 857,
      "username": "zydong",
      "name": "ZhiyuanDong",
      "avatar_template": "/user_avatar/forums.foundationdb.org/zydong/{size}/994_2.png"
    },
    "links": [
      {
        "url": "https://foundationdb.github.io/fdb-record-layer/GettingStarted.html#protobuf-configuration",
        "title": "Getting Started Guide",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 8,
        "domain": "foundationdb.github.io",
        "root_domain": "foundationdb.github.io"
      }
    ]
  },
  "bookmarks": []
}