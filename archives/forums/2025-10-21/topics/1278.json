{
  "post_stream": {
    "posts": [
      {
        "id": 3813,
        "name": "",
        "username": "pH14",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
        "created_at": "2019-04-03T02:54:03.724Z",
        "cooked": "<p>Hello! Thought I\u2019d share something I\u2019ve been hacking on: to get my feet wet with FDB, I made a layer that implements the bones of the Zookeeper 3.4.6 API: <a href=\"https://github.com/pH14/fdb-zk\" rel=\"nofollow noopener\">https://github.com/pH14/fdb-zk</a></p>\n<p>I can\u2019t say I\u2019d recommend using it yet, but I\u2019m soliciting feedback for next steps / design choices, and of course, contributors are welcome <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=6\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"></p>\n<p>The ideal goal is to offer a drop-in replacement for Zookeeper on top of FDB that can support much higher read/write volume and data size than ZK. ZK\u2019s API is relatively simple, so it seemed like a good opportunity to show off FDB\u2019s flexibility, and for me to learn a bit more about each system. I think it\u2019d be valuable if you could spin up FDB, fire up Curator, and voila: scalable lock server. Or further lean into layers, and be able to replace multiple systems, like both Mongo / and that-ZK-cluster-you-need-for-other-system-X, with just FDB.</p>\n<p>That said, let the tome commence:</p>\n<h3>K/V modeling</h3>\n<h4>ZNodes on the DirectoryLayer</h4>\n<p>In terms of key/value design, a ZK node is largely modeled on top of the <code>DirectoryLayer</code>, which maps quite well to the problem. The DL reduces key size (at the cost of more reads), and already enforces invariants that align with the ZK API \u2013 e.g. it won\u2019t let you create a subpath unless the parent directory already exists (no <code>mkdir -p</code>). The fact that the DL\u2019s prefixes are assigned per-path also means that the full keyspace will be used, even for large directory trees. This reduces locality, but in the access patterns I\u2019ve contemplated, is a potential win to distribute load.</p>\n<h4>ZNode stats</h4>\n<p>For an individual ZK node, the <code>DirectoryLayer</code>-assigned subspace is then used to store a variety of keys that map to node values. All of the <code>stat</code> entries, such as creation txn id, last-modified txn id, data size, etc each have their own key within the node\u2019s subspace: <code>directoryLayer(zk_node_path):stat_key_name --&gt; stat_key_value</code>. Fetching the full <code>stat</code> is then a simple range scan: <code>directoryLayer(zk_node_path):stat_key*</code>, and individual stat entries can be fetched directly.</p>\n<h4>ZNode data</h4>\n<p>The node\u2019s data is broken into 100kB chunks, which are pushed into a keyspace that boils down to <code>directoryLayer(zk_node_path):data:blockN --&gt; byte array</code>. Fortunately, ZK has a pretty low default data-size cap, so we don\u2019t have to do any shenanigans to avoid hitting FDB\u2019s max-data-size-per-transaction limit.</p>\n<h4>Global Transaction ID</h4>\n<p>One of the signature aspects of ZK is its global transaction id, which supplies a total ordering to all writes. To replace this, we use FDB\u2019s versionstamp and write this value in every place that uses a ZK global id. While still monotonic (with caveats, more on this below), this differs from ZK which begins at txnid 1 and increments by 1 each time. This unfortunately means it\u2019s not super easy to run fdb-zk against ZK\u2019s tests which looks for +1 incremented ids.</p>\n<p>This is enough to get the basic CRUD operations on ZK nodes going, and some things fall into place really nicely. Things like fetching children nodes is pretty trivial on top of the DirectoryLayer, since it\u2019s already tracking children of a given path.</p>\n<h4>Watches</h4>\n<p>Implementing ZK\u2019s watches requires a bit more trickery: if someone leaves a on-creation watch on node <code>/locks/some-id</code>, how do we know what path the <code>DirectoryLayer</code> is going to assign for that node? We don\u2019t, so instead we leave a watch on a key: e.g. <code>directoryLayer(watch-subspace) : /locks/some-id : on-create</code>, and when the node is created, the layer sets the value of this key to the current versionstamp, triggering the FDB watch (note: we use a versionstamp so we can guarantee the value is different each time, since rewriting the same value to a key won\u2019t trigger a watch). Watches on child-creation and deletion are also supported.</p>\n<h4>Client Sessions</h4>\n<p>Session handling is a bit of a WIP right now. The thought was to borrow a tip from the Record Layer, which does some cool stuff like leaving cursors inside FDB itself, and store all session information + heartbeat timestamps in another subspace. That\u2019s what\u2019s currently done right now, but it needs more TLC and testing. The rough schema is something like: <code>directoryLayer(session_subspace) : client_id --&gt; heartbeat timestamp</code>, where <code>client_id</code> is derived from yet another versionstamp.</p>\n<h3>Actually running it</h3>\n<p>For now, the layer exists as a co-hosted process to an application, and the application can continue to use its preferred ZK client pointed to <code>localhost</code>. This allows it to work in a language-agnostic, client-only manner, similar to the design of the Document Layer. If you wanted, the process could also live as a FDB coprocessor, and clients could hit that directly instead.</p>\n<pre><code class=\"lang-nohighlight\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502   Application    \u2502 \u2502     \u2502 \u2502   Application    \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502           \u2502          \u2502     \u2502           \u2502          \u2502\n\u2502           \u2502          \u2502     \u2502           \u2502          \u2502\n\u2502       ZooKeeper      \u2502     \u2502       ZooKeeper      \u2502\n\u2502        protocol      \u2502     \u2502        protocol      \u2502\n\u2502           \u2502          \u2502     \u2502           \u2502          \u2502\n\u2502           \u2502          \u2502     \u2502           \u2502          \u2502\n\u2502           \u25bc          \u2502     \u2502           \u25bc          \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502  fdb-zk service  \u2502 \u2502     \u2502 \u2502  fdb-zk service  \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502                            \u2502\n         FDB ops                      FDB ops\n            \u2502                            \u2502\n            \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   FoundationDB                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n<p>The layer sits behind a janky shim of the actual Zookeeper server, which handles all request/response IO and translates calls into FDB operations. At the moment, this is definitely the weakest component, and the thing I\u2019ve spent the least time on. The ZK server isn\u2019t terribly heavyweight, but there\u2019s no reason to run much of anything except the bare essential network IO and an FDB client. The flip side: it meant not having to write ZK protocol network code\u2026 yet <img src=\"https://emoji.discourse-cdn.com/twitter/sweat_smile.png?v=6\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\"></p>\n<p>Overall, I\u2019ve gotten some Curator libs to sometimes work on it, but I\u2019m missing something in the network / session handling code right now that can cause disconnects. I\u2019ve also had issues running actual ZK locally, so I\u2019m clearly doing something foolish ^^</p>\n<p>Of course, if you\u2019re aiming to replace ZK, a system whose purpose is simplicity and stability, you\u2019d want a <em>lot</em> of testing.</p>\n<h3>Open questions (the interesting part!)</h3>\n<h4>Ephemeral nodes</h4>\n<p>There are some elements of ZK functionality that are hard to emulate in a purely stateless-client environment. A key example of this is ephemeral nodes: given that clients can die at any time, who becomes responsible for cleaning up ephemeral nodes that are supposed to expire at client disconnect?</p>\n<p>Spitballing ideas:</p>\n<ul>\n<li>Clients periodically scan the session subspace and look for related unexpired nodes past their prime and remove them</li>\n<li>Deploy a dedicated fdb-zk client whose job is for central-server-like operations</li>\n<li>Deploy a fdb-zk layer coprocess on the FDB nodes themselves that are responsible for central-server ops on their local key subspaces</li>\n<li>Do everything at read-time \u2013 if a client is asked to create a node that already exists, check the sessions table if it should have been expired, if so, create a new node, if not, throw an error.</li>\n</ul>\n<h4>Viability of versionstamps</h4>\n<p>Using versionstamps to replace ZK\u2019s transaction id feels nice at first, but given the discussions in <a href=\"https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/2\" class=\"inline-onebox\">VersionStamp uniqueness and monotonicity</a>, I\u2019m not sure they\u2019re truly a viable option. Trusting that the versionstamp will always be increasing is an important aspect of the design. Having a forever-monotonic id would be a really powerful construct.</p>\n<h4>ACLs</h4>\n<p>Full confession: despite trying to mimic ZK, I actually know very little about Zookeeper in practice. I\u2019m not familiar with how the ACLs are used, nor how we\u2019d want to store &amp; enforce them.</p>\n<h4>Watch Guarantees</h4>\n<p>ZK states this about watches (from <a href=\"https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html#ch_zkWatches\" rel=\"nofollow noopener\">https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html#ch_zkWatches</a>) :</p>\n<pre><code class=\"lang-nohighlight\">Watches are ordered with respect to other events, other watches, and asynchronous replies. The ZooKeeper client libraries ensures that everything is dispatched in order.\n\nA client will see a watch event for a znode it is watching before seeing the new data that corresponds to that znode.\n\nThe order of watch events from ZooKeeper corresponds to the order of the updates as seen by the ZooKeeper service.\n</code></pre>\n<p>I haven\u2019t thought too much about these guarantees or looked into how they\u2019re implemented, so I\u2019m not sure using FDB\u2019s watches the way <code>fdb-zk</code> currently does maintains the same semantics.</p>\n<h3>Misc. feedback on using FDB / Java bindings</h3>\n<p>So far I\u2019m pretty happy at how quickly this has moved along, given that it\u2019s 1x engineer working on it on the side, and a lot of that credit goes to the data model of FDB and the existence of the <code>DirectoryLayer</code>. Of course, there were a few things that came up that caused some confusion. I\u2019m semi-hesitant to include them here since I don\u2019t want to distract from the questions above, but, hey, here goes:</p>\n<ul>\n<li>\n<p>Versionstamps need more documentation if they\u2019re to be a first-class feature. The interplay between the commit version, transaction batch order, user bytes, 80-bits vs 96-bits flavors is a lot to unravel. I leaned heavily on some existing forum posts like <a href=\"https://forums.foundationdb.org/t/versionstamp-vs-committedversion/600\" class=\"inline-onebox\">VersionStamp vs CommittedVersion</a>, and it doesn\u2019t seem too terrible to distill down the learnings there to some concise usage guides / API docs.</p>\n</li>\n<li>\n<p>little-endian-only atomic operations was a surprise. All of the byte serialization was written using Guava, which uses big-endian for integer &lt;\u2013&gt; byte array conversion, so this was a painful realization. Would there be interest in supporting big-endian ADD / MIN / MAX natively as well? That would be enormously helpful for many projects that already live in a big-endian world.</p>\n</li>\n<li>\n<p>Handling versionstamps / commit versions in the Java bindings gets tricky. There have been a few posts on this, but returning a <code>CompletableFuture</code> that only completes after the transaction completes can require a bit of contorting to work around when that value is relevant for other aspects of the transaction / application operation.</p>\n</li>\n<li>\n<p>You can\u2019t cancel a transaction from within <code>fdb.run(tr -&gt; lambda)</code> without throwing an exception, since it\u2019ll try to commit once the function completes and that fails if the transaction has already been cancelled.</p>\n</li>\n<li>\n<p>Unit testing wasn\u2019t super simple. I pushed the whole app into its own directory subspace, so every key is actually prefixed by <code>directoryLayer(fdb-zk)</code>. Right now the tests blow away the whole directory and start over each time, but they could ideally reassign the root directory to <code>directoryLayer(fdb-zk-test)</code>. An embedded test server would be nice.</p>\n</li>\n</ul>\n<p>Phew! That was a lot. Let me know if you have any thoughts on the design choices so far and ideas for tackling the open questions (and further questions I might be missing!). I am neither ZK nor FDB expert, so I\u2019m sure there\u2019s a lot in my blindspots. If this is interesting to anyone\u2026 PRs welcome <img src=\"https://emoji.discourse-cdn.com/twitter/smiling_imp.png?v=6\" title=\":smiling_imp:\" class=\"emoji\" alt=\":smiling_imp:\"></p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-03T02:54:03.724Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2675,
        "reads": 55,
        "readers_count": 54,
        "score": 13451.0,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/pH14/fdb-zk",
            "internal": false,
            "reflection": false,
            "title": "GitHub - pH14/fdb-zk: ZooKeeper server on top of FoundationDB",
            "clicks": 85
          },
          {
            "url": "https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/2",
            "internal": true,
            "reflection": false,
            "title": "VersionStamp uniqueness and monotonicity",
            "clicks": 13
          },
          {
            "url": "https://forums.foundationdb.org/t/versionstamp-vs-committedversion/600",
            "internal": true,
            "reflection": false,
            "title": "VersionStamp vs CommittedVersion",
            "clicks": 3
          },
          {
            "url": "https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html#ch_zkWatches",
            "internal": false,
            "reflection": false,
            "title": "ZooKeeper Programmer's Guide",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 4
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 113,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 3826,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-04-03T22:11:31.733Z",
        "cooked": "<p>Oooh, fancy.  I\u2019ve been curious to hear how something like this would actually go.</p>\n<p>It sounds like overall well for the basic data model, but then starts to become difficult when you get to the features which assume that ZK has one leader on one machine.  Which is, I suppose, pretty unsurprising.</p>\n<aside class=\"quote no-group\" data-username=\"pH14\" data-post=\"1\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ph14/48/92_2.png\" class=\"avatar\"> pH14:</div>\n<blockquote>\n<h4>Ephemeral nodes</h4>\n<p>There are some elements of ZK functionality that are hard to emulate in a purely stateless-client environment. A key example of this is ephemeral nodes: given that clients can die at any time, who becomes responsible for cleaning up ephemeral nodes that are supposed to expire at client disconnect?</p>\n</blockquote>\n</aside>\n<p>I think running a janky leader election on top of FDB to nominate one of your layer processes as the one to do the central-server-like operations shouldn\u2019t be too hard.  You then have something to do your scan and clear.  When I\u2019ve thought through similar ideas before, I haven\u2019t liked anything client driven, because of the unreliability of clients, and pushing the work off to read time means forever increasing amounts of data in the cluster if clients never happen to try and read the right keys.</p>\n<aside class=\"quote no-group\" data-username=\"pH14\" data-post=\"1\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ph14/48/92_2.png\" class=\"avatar\"> pH14:</div>\n<blockquote>\n<h4>Viability of versionstamps</h4>\n<p>Using versionstamps to replace ZK\u2019s transaction id feels nice at first, but given the discussions in <a href=\"https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/2\">VersionStamp uniqueness and monotonicity </a>, I\u2019m not sure they\u2019re truly a viable option. Trusting that the versionstamp will always be increasing is an important aspect of the design. Having a forever-monotonic id would be a really powerful construct.</p>\n</blockquote>\n</aside>\n<p>They\u2026 should.  Admittedly, versionstamps interacting with DR and backup was overlooked for a while, but fixes to both will be in FDB 6.1.  The only case I\u2019m aware of that would cause versionstamps to not be monotonically increasing is if you handroll your own code to copy data between clusters, and there\u2019s not much we can do about that.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"pH14\" data-post=\"1\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ph14/48/92_2.png\" class=\"avatar\"> pH14:</div>\n<blockquote>\n<h4>Watch Guarantees</h4>\n<p>ZK states this about watches (from <a href=\"https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html#ch_zkWatches\" class=\"inline-onebox\">ZooKeeper Programmer's Guide</a>)</p>\n</blockquote>\n</aside>\n<p>This feels like you would need something more like change feeds than watches.  I\u2019m not aware of any promises we have on the ordering of watch events being triggered, and the API of watches says that in the case of an A-&gt;B-&gt;A update chain, we\u2019re allowed to never send a notification at all.</p>\n<p>I managed to hand wave out a way to be able to abuse transaction conflicts to be able to tell when data has probably changed as a way to implement change feeds on FDB, but it\u2019s a horrible and unscaleable idea.  I\u2019m not aware of any better way to do it, than just implementing change feeds for FDB.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-03T22:11:31.733Z",
        "reply_count": 3,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 5,
        "reads": 46,
        "readers_count": 45,
        "score": 49.2,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3827,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2019-04-03T22:35:07.404Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>I managed to hand wave out a way to be able to abuse transaction conflicts to be able to tell when data has probably changed as a way to implement change feeds on FDB, but it\u2019s a horrible and unscaleable idea. I\u2019m not aware of any better way to do it, than just implementing change feeds for FDB.</p>\n</blockquote>\n</aside>\n<p>Has this been discussed before in a way that isn\u2019t just the way <code>fdbdr</code> works? An API to directly read TLog data like \u201cread this key prefix forward from version X\u201d, where the client would go to the TLog that owns that range where the prefix falls, and then the TLog filters further out the data for that range.</p>\n<p>I\u2019ll move this out into a separate thread if it gets too far off topic. <img src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=12\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-03T22:47:07.500Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 43,
        "readers_count": 42,
        "score": 8.6,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3829,
        "name": "",
        "username": "pH14",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
        "created_at": "2019-04-04T01:02:55.742Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>I think running a janky leader election on top of FDB to nominate one of your layer processes as the one to do the central-server-like operations shouldn\u2019t be too hard. You then have something to do your scan and clear. When I\u2019ve thought through similar ideas before, I haven\u2019t liked anything client driven, because of the unreliability of clients, and pushing the work off to read time means forever increasing amounts of data in the cluster if clients never happen to try and read the right keys.</p>\n</blockquote>\n</aside>\n<p>That\u2019s an interesting idea \u2013 it seems like it\u2019d have to be coupled with read-repairs, in the case that a client hasn\u2019t yet been elected. Any preferred janky leader election techniques?</p>\n<p>I haven\u2019t looked too deeply into the Record Layer \u2013 how does it handle a task like generating a new secondary index on existing data? That seems like a related concern.</p>\n<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>They\u2026 should. Admittedly, versionstamps interacting with DR and backup was overlooked for a while, but fixes to both will be in FDB 6.1.</p>\n</blockquote>\n</aside>\n<p><img src=\"https://emoji.discourse-cdn.com/twitter/+1.png?v=12\" title=\":+1:\" class=\"emoji\" alt=\":+1:\" loading=\"lazy\" width=\"20\" height=\"20\">  good to know</p>\n<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>This feels like you would need something more like change feeds than watches. I\u2019m not aware of any promises we have on the ordering of watch events being triggered, and the API of watches says that in the case of an A-&gt;B-&gt;A update chain, we\u2019re allowed to never send a notification at all.</p>\n<p>I managed to hand wave out a way to be able to abuse transaction conflicts to be able to tell when data has probably changed as a way to implement change feeds on FDB, but it\u2019s a horrible and unscaleable idea. I\u2019m not aware of any better way to do it, than just implementing change feeds for FDB.</p>\n</blockquote>\n</aside>\n<p>Makes sense, I\u2019ll chew on this one for a bit and read more into what exactly ZK is doing as well. If anyone has more familiarity here, I\u2019m all ears.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-04T01:02:55.742Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 43,
        "readers_count": 42,
        "score": 33.6,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 113,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3830,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-04-04T01:06:33.857Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"pH14\" data-post=\"4\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ph14/48/92_2.png\" class=\"avatar\"> pH14:</div>\n<blockquote>\n<p>That\u2019s an interesting idea \u2013 it seems like it\u2019d have to be coupled with read-repairs, in the case that a client hasn\u2019t yet been elected. Any preferred janky leader election techniques?</p>\n</blockquote>\n</aside>\n<p>You can have your clients check <code>leaderKey</code> for an (ID, versionstamp), and consider that process to be the leader if its versionstamp is within 10,000,000 of your read version.  Write {ID, versionstamp} to the database if the key is empty or the versionstamp was too old.  Heartbeat <code>leaderKey</code>, and also watch it from the leader so that it is informed if it loses leadership.  You\u2019ll get re-elections every time FDB has a recovery, and you could have more than one leader for a short time, but that seems fine in your use case.</p>\n<aside class=\"quote no-group\" data-username=\"pH14\" data-post=\"4\" data-topic=\"1278\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ph14/48/92_2.png\" class=\"avatar\"> pH14:</div>\n<blockquote>\n<p>I haven\u2019t looked too deeply into the Record Layer \u2013 how does it handle a task like generating a new secondary index on existing data? That seems like a related concern.</p>\n</blockquote>\n</aside>\n<p>See <a href=\"https://forums.foundationdb.org/t/best-way-to-add-an-index-on-already-existing-data/97/2\" class=\"inline-onebox\">Best way to add an index on already-existing data? - #2 by alloc</a>, which is Alec answering basically that.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-04T01:13:24.940Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 43,
        "readers_count": 42,
        "score": 53.6,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/best-way-to-add-an-index-on-already-existing-data/97/2",
            "internal": true,
            "reflection": false,
            "title": "Best way to add an index on already-existing data?",
            "clicks": 7
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3857,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2019-04-06T15:00:29.730Z",
        "cooked": "<p>We once prototyped a coordination system (not a ZK emulator, but with similar capabilities) on top of FDB that (as best I can recall) used the following solutions for these problems:</p>\n<ol>\n<li>\n<p>Ephemeral nodes: We kept an index of ephemeral nodes by their expiration time.  Scanning the index makes it easy to locate the old nodes that should be cleared, and you can also check at read time if you want expirations to be more precise.  This system kept its own global clock cooperatively by having everyone read the clock, wait one second, and write it to clock+1 transactionally; only one such transaction will succeed each second.  I think we made the client that incremented the clock a short term \u201cleader\u201d responsible for clearing ephemeral nodes for that second.  An alternative would be to use the cluster version, which occasionally jumps forward but is monotonic and usually runs at a predictable rate.</p>\n</li>\n<li>\n<p>Watches: I think that system had FDB-like watch semantics (watches are asynchronous, reads are consistent).  I think the only plausible way to reproduce the exact ZK semantics efficiently in a leaderless system is to keep indices something like:</p>\n</li>\n</ol>\n<p>(\u201cactive_watches\u201d, zknode, clientId, watchId) := ()<br>\n(\u201ctriggered_watches\u201d, clientId, versionStamp) := watchId<br>\n(\u201cwatch_watch\u201d, clientId) := incrementing_value (or versionStamp, or whatever)</p>\n<p>When you are writing to a zknode, you range read and clear its active_watches list and move each one into the appropriate place in the triggered_watches index.  You also increment watch_watch for the affected client. Clients can quickly range read (and clear) the triggered_watches index to get an ordered list of events.  Clients (fdb) watch the \u201cwatch_watch\u201d index to avoid polling, and also check triggered_watches before doing any consistent read.</p>\n<p>Dave</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-06T15:00:29.730Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 6,
        "reads": 38,
        "readers_count": 37,
        "score": 52.6,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3869,
        "name": "",
        "username": "pH14",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
        "created_at": "2019-04-09T04:13:12.883Z",
        "cooked": "<p>Thanks for the added context Dave, that\u2019s very helpful.</p>\n<p>The clock-based election make sense \u2013 do you still see this pattern as a good solution here? My hesitation with it would be the amount of write traffic that targets the c+1 key if there are a lot of clients (maybe have only a certain % of clients vie for a given time slot). And maybe it doesn\u2019t become a problem \u2013 one thing I don\u2019t have good intuition for yet is the relative cost of a read vs write vs read conflict vs write conflict, and when a certain # of each to an individual key becomes problematic in FDB.</p>\n<p>The watch schema you outlined looks a lot like what I\u2019ve been sketching out after Alex\u2019s change feed suggestion, so that\u2019s promising <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=6\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-04-09T04:13:12.883Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 34,
        "readers_count": 33,
        "score": 26.8,
        "yours": false,
        "topic_id": 1278,
        "topic_slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 113,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/fdb-zk-rough-cut-of-zookeeper-api-layer/1278/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      3813,
      3826,
      3827,
      3829,
      3830,
      3857,
      3869
    ]
  },
  "timeline_lookup": [
    [
      1,
      2394
    ],
    [
      2,
      2393
    ],
    [
      6,
      2390
    ],
    [
      7,
      2388
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Fdb-zk: rough cut of Zookeeper API layer",
  "id": 1278,
  "title": "Fdb-zk: rough cut of Zookeeper API layer",
  "posts_count": 7,
  "created_at": "2019-04-03T02:54:03.579Z",
  "views": 5102,
  "reply_count": 3,
  "like_count": 6,
  "last_posted_at": "2019-04-09T04:13:12.883Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
  "category_id": 7,
  "word_count": 3408,
  "deleted_at": null,
  "user_id": 113,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1278",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "A FoundationDB layer for apiserver as an alternative to etcd",
      "id": 2697,
      "title": "A FoundationDB layer for apiserver as an alternative to etcd",
      "slug": "a-foundationdb-layer-for-apiserver-as-an-alternative-to-etcd",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2021-05-11T17:23:35.277Z",
      "last_posted_at": "2021-10-15T09:24:06.276Z",
      "bumped": true,
      "bumped_at": "2021-10-19T21:04:32.807Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 7,
      "views": 3572,
      "category_id": 14,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 935,
            "username": "wilsonwang371",
            "name": "Wilson Wang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wilsonwang371/{size}/1072_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 1012,
            "username": "julienlau",
            "name": "Julien Laurenceau",
            "avatar_template": "/user_avatar/forums.foundationdb.org/julienlau/{size}/1199_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 534,
            "username": "PierreZ",
            "name": "Pierre Zemb",
            "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB Summit 2019: A ZooKeeper Layer for FoundationDB",
      "id": 1764,
      "title": "FoundationDB Summit 2019: A ZooKeeper Layer for FoundationDB",
      "slug": "foundationdb-summit-2019-a-zookeeper-layer-for-foundationdb",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2019-11-18T22:52:12.484Z",
      "last_posted_at": "2019-11-18T22:52:12.535Z",
      "bumped": true,
      "bumped_at": "2019-12-10T18:34:55.015Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 847,
      "category_id": 10,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Changefeeds (watching and getting updates on ranges of keys)",
      "id": 511,
      "title": "Changefeeds (watching and getting updates on ranges of keys)",
      "slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-06-16T12:26:34.710Z",
      "last_posted_at": "2018-07-06T14:46:54.646Z",
      "bumped": true,
      "bumped_at": "2018-07-06T14:46:54.646Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 4221,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 307,
            "username": "jwr",
            "name": "Jan Rychter",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Detecting cluster availability transitions for long running clients",
      "id": 365,
      "title": "Detecting cluster availability transitions for long running clients",
      "slug": "detecting-cluster-availability-transitions-for-long-running-clients",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-05-07T08:18:42.873Z",
      "last_posted_at": "2018-05-08T17:59:06.057Z",
      "bumped": true,
      "bumped_at": "2018-05-08T17:59:06.057Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1318,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 113,
        "username": "pH14",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      }
    ],
    "created_by": {
      "id": 113,
      "username": "pH14",
      "name": "",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png"
    },
    "last_poster": {
      "id": 113,
      "username": "pH14",
      "name": "",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png"
    },
    "links": [
      {
        "url": "https://github.com/pH14/fdb-zk",
        "title": "GitHub - pH14/fdb-zk: ZooKeeper server on top of FoundationDB",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 85,
        "user_id": 113,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/2",
        "title": "VersionStamp uniqueness and monotonicity",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 13,
        "user_id": 113,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/best-way-to-add-an-index-on-already-existing-data/97/2",
        "title": "Best way to add an index on already-existing data?",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 13,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/versionstamp-vs-committedversion/600",
        "title": "VersionStamp vs CommittedVersion",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 113,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html#ch_zkWatches",
        "title": "ZooKeeper Programmer's Guide",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 113,
        "domain": "zookeeper.apache.org",
        "root_domain": "apache.org"
      }
    ]
  },
  "bookmarks": []
}