{
  "post_stream": {
    "posts": [
      {
        "id": 4825,
        "name": "Jan Rychter",
        "username": "jwr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "created_at": "2019-08-07T19:22:14.411Z",
        "cooked": "<p>I\u2019m working on Clojure bindings for FoundationDB, which means I\u2019m using the Java API. Some things are unclear to me even after looking at the source code and reading the documentation, so I thought I\u2019d ask and make sure:</p>\n<ul>\n<li>Do I understand correctly that if I call <code>forEach</code> on the <code>AsyncIterable</code>, I can expect to get a callback whenever an item becomes available, without tying up the FDB Java API?</li>\n<li>Is there a better way to achieve the same thing (get a callback for each item becoming available)?</li>\n<li>What if my callback function blocks because of backpressure? Is that something that the FDB API expects?</li>\n<li>Calling <code>open</code> on an <code>FDB</code> instance will return a <code>Database</code> object. Is this object intended to be shared by all threads within the application? Will the underlying networking code \u201cdo the right thing\u201d?</li>\n<li>Assuming I do not perform my own blocking operations in transactions, do I need to worry about thread pool size and the potential for deadlocks from thread pool exhaustion if multiple long-running operations are launched?</li>\n</ul>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-08-07T19:30:04.754Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 378,
        "reads": 65,
        "readers_count": 64,
        "score": 1908.0,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "Jan Rychter",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/java-reusing-the-database-in-watches-seems-to-hang/2613",
            "internal": true,
            "reflection": true,
            "title": "Java: reusing the Database in watches seems to hang",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 307,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 4828,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2019-08-08T00:14:28.458Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"1\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>Do I understand correctly that if I call <code>forEach</code> on the <code>AsyncIterable</code> , I can expect to get a callback whenever an item becomes available, without tying up the FDB Java API?</p>\n</blockquote>\n</aside>\n<p>Hm, I think it depends on what you mean. We don\u2019t override the <code>forEach</code> method, so it\u2019s exactly equivalent to:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">for (T item : asyncIterable) {\n    func.apply(item);\n}\n</code></pre>\n<p>So it will block and eat up a thread doing so, but the callback will, in fact, be invoked as results become available. That thread is the <em>caller</em> thread, rather than, say, the FDB native thread that is actually serving requests, so it won\u2019t tie up everything, but it will eat up resources.</p>\n<p>There\u2019s an asynchronous version that executes its callbacks on a user-providable executor, if you want that behavior instead: <a href=\"https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/async/AsyncUtil.html#forEach-com.apple.foundationdb.async.AsyncIterable-java.util.function.Consumer-java.util.concurrent.Executor-\" class=\"inline-onebox\">AsyncUtil (FoundationDB Java Client API)</a></p>\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"1\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>Is there a better way to achieve the same thing (get a callback for each item becoming available)?</p>\n</blockquote>\n</aside>\n<p>I think the <code>forEachAsync</code> method in <code>AsyncUtil</code> (linked above) is what you want.</p>\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"1\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>What if my callback function blocks because of backpressure? Is that something that the FDB API expects?</p>\n</blockquote>\n</aside>\n<p>If your function ends up blocking, then it will block the execution thread of whatever executor is running it. The better way to handle that is to return a future to wait instead of blocking. We implemented something like that using a scheduled executor in the Record Layer: <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/152d3c5b16da550edc511c8d29cff131df9d88f7/fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java#L802\">https://github.com/FoundationDB/fdb-record-layer/blob/152d3c5b16da550edc511c8d29cff131df9d88f7/fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java#L802</a></p>\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"1\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>Calling <code>open</code> on an <code>FDB</code> instance will return a <code>Database</code> object. Is this object intended to be shared by all threads within the application? Will the underlying networking code \u201cdo the right thing\u201d?</p>\n</blockquote>\n</aside>\n<p>Yep, the <code>Database</code> object can be shared by multiple threads (and, indeed, this is expected behavior). The underlying code executes everything on a single threaded executor (more-or-less), so all the complicated stuff won\u2019t care about how many threads you have calling it.</p>\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"1\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>Assuming I do not perform my own blocking operations in transactions, do I need to worry about thread pool size and the potential for deadlocks from thread pool exhaustion if multiple long-running operations are launched?</p>\n</blockquote>\n</aside>\n<p>Hm. If everything is, in fact, non-blocking, then in general, you shouldn\u2019t need to worry too much about thread pool exhaustion except that (as stated above), there is one (and only one) network thread at the native level, so <em>that</em> thread can get clogged up. I don\u2019t know if I\u2019d say that you \u201cnever\u201d need to worry about backing up, say, a thread pool that executes callbacks from async work, but if you don\u2019t have any blocking operations, I wouldn\u2019t be too concerned about it. But be forewarned that it can be easy to accidentally introduce blocking code and accidentally tie up threads in your thread pool.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-08-08T00:14:28.458Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 8,
        "reads": 65,
        "readers_count": 64,
        "score": 63.0,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/async/AsyncUtil.html#forEach-com.apple.foundationdb.async.AsyncIterable-java.util.function.Consumer-java.util.concurrent.Executor-",
            "internal": false,
            "reflection": false,
            "title": "AsyncUtil (FoundationDB Java Client API)",
            "clicks": 18
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/152d3c5b16da550edc511c8d29cff131df9d88f7/fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java#L802",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/MoreAsyncUtil.java at 152d3c5b16da550edc511c8d29cff131df9d88f7 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 11
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4838,
        "name": "Jan Rychter",
        "username": "jwr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "created_at": "2019-08-08T19:14:43.712Z",
        "cooked": "<p>Hmm. I am looking at <code>forEach</code> here: <a href=\"https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L95\" rel=\"noopener nofollow ugc\">https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L95</a> which would appear to call <code>forEachRemaining</code> with a <code>DEFAULT_EXECUTOR</code> <a href=\"https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L131\" rel=\"noopener nofollow ugc\">https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L131</a></p>\n<p>I am not sure I fully understand the behavior of <code>forEachRemaining</code>, but at a first glance it appears to be what I need: it calls <code>consumer.accept()</code> for every item. I just don\u2019t know what will happen if the consumer blocks because the downstream isn\u2019t ready for more data.</p>\n<p>Let me ask a more general question, which will perhaps explain where I\u2019m coming from. Let\u2019s imagine I\u2019m doing a monster <code>getRange()</code> query. As the results start flowing in (I\u2019m assuming they aren\u2019t all buffered in memory, but are being streamed), my code is consuming them, but can\u2019t keep up. Even if there are buffers, they are not infinite, so there needs to be a backpressure mechanism. How do I consume these results, providing backpressure if needed, but without tying up critical FDB threads? Ideally I\u2019d just block in <code>consumer.accept()</code>, but have to know that this is expected.</p>\n<p>I was also hoping for a mechanism where FDB controls what happens, so that I don\u2019t need to manage a separate thread pool with threads that block waiting for data (so, promises don\u2019t help much in this case).</p>\n<blockquote>\n<p>But be forewarned that it can be easy to accidentally introduce blocking code and accidentally tie up threads in your thread pool</p>\n</blockquote>\n<p>Yes, I\u2019ve just had this happen in a large and complex application (not using FDB) and the resulting deadlocks are incredibly difficult to debug. That\u2019s why I\u2019m being extra careful this time.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-08-08T19:14:43.712Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 51,
        "readers_count": 50,
        "score": 30.2,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "Jan Rychter",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L95",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/AsyncUtil.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 3
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L131",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/AsyncUtil.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 307,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4839,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2019-08-08T20:17:05.168Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"3\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>which would appear to call <code>forEachRemaining</code> with a <code>DEFAULT_EXECUTOR</code></p>\n</blockquote>\n</aside>\n<p>There is also a variant to specify your own executor:</p>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L114\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L114\" target=\"_blank\" rel=\"noopener\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L114\" target=\"_blank\" rel=\"noopener\">apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L114</a></h4>\n\n\n\n    <pre class=\"onebox\"><code class=\"lang-java\">\n      <ol class=\"start lines\" start=\"104\" style=\"counter-reset: li-counter 103 ;\">\n          <li>\t *  will be processed only after the item before it has finished processing. Asynchronous</li>\n          <li>\t *  tasks needed to complete this operation are scheduled on the provided executor.</li>\n          <li>\t *</li>\n          <li>\t * @param iterable the source of data over from which to consume</li>\n          <li>\t * @param consumer operation to apply to each item</li>\n          <li>\t * @param executor executor on which to schedule asynchronous tasks</li>\n          <li>\t * @param &lt;V&gt; type of the items returned by the iterable</li>\n          <li>\t *</li>\n          <li>\t * @return a future that is ready once the asynchronous operation completes</li>\n          <li>\t */</li>\n          <li class=\"selected\">\tpublic static &lt;V&gt; CompletableFuture&lt;Void&gt; forEach(final AsyncIterable&lt;V&gt; iterable, final Consumer&lt;? super V&gt; consumer, final Executor executor) {</li>\n          <li>\t\treturn forEachRemaining(iterable.iterator(), consumer, executor);</li>\n          <li>\t}</li>\n          <li></li>\n          <li>\t/**</li>\n          <li>\t * Run the {@code consumer} on each element remaining in the iterator in order. The future will</li>\n          <li>\t *  complete with either the first error encountered by either the iterator itself</li>\n          <li>\t *  or by the consumer provided or with {@code null} if the future completes</li>\n          <li>\t *  successfully. Items are processed in order from the iterator, and each item</li>\n          <li>\t *  will be processed only after the item before it has finished processing.</li>\n          <li>\t *</li>\n      </ol>\n    </code></pre>\n\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"3\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>I am not sure I fully understand the behavior of <code>forEachRemaining</code> , but at a first glance it appears to be what I need: it calls <code>consumer.accept()</code> for every item.</p>\n</blockquote>\n</aside>\n<p><code>forEachRemaining</code> is a non-blocking function (at least with respect to reading from the iterator) that calls your <code>Consumer</code> on every item remaining in an <code>AsyncIterator</code>. When called from <code>forEach</code>, you\u2019ll get a fresh iterator from your <code>AsyncIterable</code> and will therefore consume every item.</p>\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"3\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>I just don\u2019t know what will happen if the consumer blocks because the downstream isn\u2019t ready for more data.</p>\n</blockquote>\n</aside>\n<p>This will block whatever thread the executor is using to run this work. It won\u2019t block the FDB network thread (where all of the FDB client-side work happens) unless you are using some executor that is running everything on the network thread, which I wouldn\u2019t recommend.</p>\n<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"3\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>As the results start flowing in (I\u2019m assuming they aren\u2019t all buffered in memory, but are being streamed), my code is consuming them, but can\u2019t keep up. Even if there are buffers, they are not infinite, so there needs to be a backpressure mechanism. How do I consume these results, providing backpressure if needed, but without tying up critical FDB threads? Ideally I\u2019d just block in  <code>consumer.accept()</code> , but have to know that this is expected.</p>\n</blockquote>\n</aside>\n<p>When reading ranges, we fetch the results in batches, only starting a new batch once we\u2019ve exhausted a prior batch. If you slow down your consumption of the iterator, then it will slow down the rate at which results are requested from the cluster. It isn\u2019t necessary that you slow things down by blocking, though. As Alec mentioned, you could instead return a future from your function that processes each result and avoid tying up thread resources. I don\u2019t think we have a variant of <code>forEach</code> to do this exactly, but you could write one using <code>whileTrue</code> if desired.</p>\n<p>If you aren\u2019t concerned about blocking threads in your executor, then blocking in the consumption of items should be safe to do from the perspective of the FDB network thread (again with the caveat that you aren\u2019t using an executor that runs things on the FDB network thread).</p>\n<p>In either case (either with blocking or using futures), you\u2019ll need to avoid waiting too long if you want to be able to read a range transactionally. After the first read, a transaction will only be able to continue reading for 5 seconds, and since the results are fetched in batches you may find that later batches fail if it takes too long to get to them. In fact, even if you don\u2019t block at all you\u2019ll still be limited in how large a range you can read in one transaction.</p>\n<p>If you thought that the processing of data was going to be slow enough to be a problem with respect to this time limit, you could force the reading of all the data at once using the <a href=\"https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncIterable.java#L50\"><code>asList</code> function</a>.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-08-08T20:17:05.168Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 53,
        "readers_count": 52,
        "score": 25.6,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncIterable.java#L50",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/AsyncIterable.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L114",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/AsyncUtil.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4843,
        "name": "Jan Rychter",
        "username": "jwr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "created_at": "2019-08-09T20:04:57.523Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"4\" data-topic=\"1571\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>When reading ranges, we fetch the results in batches, only starting a new batch once we\u2019ve exhausted a prior batch. If you slow down your consumption of the iterator, then it will slow down the rate at which results are requested from the cluster. It isn\u2019t necessary that you slow things down by blocking, though. As Alec mentioned, you could instead return a future from your function that processes each result and avoid tying up thread resources. I don\u2019t think we have a variant of <code>forEach</code> to do this exactly, but you could write one using <code>whileTrue</code> if desired.</p>\n</blockquote>\n</aside>\n<p>After digging deeper into Java async programming, I think I need to do something different and access the iterator myself. I plan to write something similar to <code>forEachRemaining</code> but not in the form of a loop. The difference would be that it would call the subsequent <code>iterator.onHasNext()</code> only after the (Clojure) <code>put!</code> to my outgoing channel has succeeded (from my <code>put!</code> callback). A recursion pattern similar to the one shown on this page <a href=\"https://github.com/clojure/core.async/wiki/Go-Block-Best-Practices\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Go Block Best Practices \u00b7 clojure/core.async Wiki \u00b7 GitHub</a></p>\n<p>From what I understand, this should not block any threads, because it would use the async facilities both on the Java and on Clojure side, and it would provide backpressure. It would also not create any extra thread pools or buffers, which I\u2019m really trying to avoid.</p>\n<p>I do realize there is a time limit on transactions. That\u2019s fine. I\u2019m writing a library here, and I\u2019d like to get things correct, regardless of what the application actually does. I\u2019m not actually concerned about multi-second reads, but mostly about an incorrect implementation where some requests throttle others.</p>\n<p>By the way, your (that\u2019s a collective team \u201cyour\u201d) answers in these forums are fantastic. I don\u2019t know how you find the time or the energy to do this, but the resulting value is incredible. Thank you!</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-08-09T20:04:57.523Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 48,
        "readers_count": 47,
        "score": 14.6,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "Jan Rychter",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/clojure/core.async/wiki/Go-Block-Best-Practices",
            "internal": false,
            "reflection": false,
            "title": "Go Block Best Practices \u00b7 clojure/core.async Wiki \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 307,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7392,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-06-18T13:11:13.237Z",
        "cooked": "<p>Hello, <a class=\"mention\" href=\"/u/alloc\">@alloc</a>. There is no forEachAsync method in  AsyncUtils class</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2020-06-18T13:22:29.077Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 33,
        "readers_count": 32,
        "score": 26.6,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7394,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-06-18T15:02:27.357Z",
        "cooked": "<p>Right, yeah. Sorry for the confusion. I meant the <code>forEach</code> method on <code>AsyncUtil</code>, sorry.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2020-06-18T15:02:27.357Z",
        "reply_count": 0,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 33,
        "readers_count": 32,
        "score": 16.6,
        "yours": false,
        "topic_id": 1571,
        "topic_slug": "java-concurrency-questions",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/large-range-scans-avoid-5s-limit/292/23",
            "internal": true,
            "reflection": true,
            "title": "Large Range Scans - avoid 5s limit",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 711,
          "username": "osamarin",
          "name": "Oleg Samarin",
          "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/java-concurrency-questions/1571/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      4825,
      4828,
      4838,
      4839,
      4843,
      7392,
      7394
    ]
  },
  "timeline_lookup": [
    [
      1,
      2267
    ],
    [
      3,
      2266
    ],
    [
      5,
      2265
    ],
    [
      6,
      1951
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings"
  ],
  "tags_descriptions": {},
  "fancy_title": "Java: concurrency questions",
  "id": 1571,
  "title": "Java: concurrency questions",
  "posts_count": 7,
  "created_at": "2019-08-07T19:22:14.348Z",
  "views": 1793,
  "reply_count": 5,
  "like_count": 1,
  "last_posted_at": "2020-06-18T15:02:27.357Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "java-concurrency-questions",
  "category_id": 7,
  "word_count": 1975,
  "deleted_at": null,
  "user_id": 307,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1571",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Is That Possible to Force Prefetching on AsyncIterators at FDB Client?",
      "id": 2434,
      "title": "Is That Possible to Force Prefetching on AsyncIterators at FDB Client?",
      "slug": "is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2020-11-12T10:24:46.625Z",
      "last_posted_at": "2020-11-16T17:39:48.396Z",
      "bumped": true,
      "bumped_at": "2020-11-16T17:39:48.396Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings",
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 737,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 531,
            "username": "jltz",
            "name": "Jun Li",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c0e974/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "[Java] FoundationDB client thread related question",
      "id": 599,
      "title": "[Java] FoundationDB client thread related question",
      "slug": "java-foundationdb-client-thread-related-question",
      "posts_count": 3,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-07-29T10:57:29.288Z",
      "last_posted_at": "2018-08-08T16:45:45.782Z",
      "bumped": true,
      "bumped_at": "2018-08-08T16:45:45.782Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 9111,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 38,
            "username": "panghy",
            "name": "Clement Pang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "AsyncIterator `hasNext` method not returning value",
      "id": 1718,
      "title": "AsyncIterator `hasNext` method not returning value",
      "slug": "asynciterator-hasnext-method-not-returning-value",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-11-06T20:55:47.298Z",
      "last_posted_at": "2019-11-08T23:40:07.479Z",
      "bumped": true,
      "bumped_at": "2019-11-08T23:40:07.479Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 816,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 660,
            "username": "kc626",
            "name": "Kevin Chan",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/k/4af34b/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Clj-foundationdb - Clojure bindings over Java wrapper",
      "id": 393,
      "title": "Clj-foundationdb - Clojure bindings over Java wrapper",
      "slug": "clj-foundationdb-clojure-bindings-over-java-wrapper",
      "posts_count": 6,
      "reply_count": 3,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2018-05-10T09:39:50.001Z",
      "last_posted_at": "2018-05-10T16:00:56.888Z",
      "bumped": true,
      "bumped_at": "2018-05-10T16:00:56.888Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 1013,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 231,
            "username": "xtreak",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/x/ad7895/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Throughput of a Queue/Set like data structure",
      "id": 205,
      "title": "Throughput of a Queue/Set like data structure",
      "slug": "throughput-of-a-queue-set-like-data-structure",
      "posts_count": 8,
      "reply_count": 2,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2018-04-22T17:16:09.148Z",
      "last_posted_at": "2018-04-22T19:42:40.040Z",
      "bumped": true,
      "bumped_at": "2018-04-22T19:42:40.040Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1829,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 142,
            "username": "biturbo",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/b/43a26b/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 307,
        "username": "jwr",
        "name": "Jan Rychter",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 711,
        "username": "osamarin",
        "name": "Oleg Samarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 307,
      "username": "jwr",
      "name": "Jan Rychter",
      "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png"
    },
    "last_poster": {
      "id": 8,
      "username": "alloc",
      "name": "Alec Grieser",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/async/AsyncUtil.html#forEach-com.apple.foundationdb.async.AsyncIterable-java.util.function.Consumer-java.util.concurrent.Executor-",
        "title": "AsyncUtil (FoundationDB Java Client API)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 18,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/152d3c5b16da550edc511c8d29cff131df9d88f7/fdb-extensions/src/main/java/com/apple/foundationdb/async/MoreAsyncUtil.java#L802",
        "title": "fdb-record-layer/MoreAsyncUtil.java at 152d3c5b16da550edc511c8d29cff131df9d88f7 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 11,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L95",
        "title": "foundationdb/AsyncUtil.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 307,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/clojure/core.async/wiki/Go-Block-Best-Practices",
        "title": "Go Block Best Practices \u00b7 clojure/core.async Wiki \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 307,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncIterable.java#L50",
        "title": "foundationdb/AsyncIterable.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 12,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/ff78d27575bc793f9d69d6a217b076ebd074a4df/bindings/java/src/main/com/apple/foundationdb/async/AsyncUtil.java#L131",
        "title": "foundationdb/AsyncUtil.java at ff78d27575bc793f9d69d6a217b076ebd074a4df \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 307,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/large-range-scans-avoid-5s-limit/292/23",
        "title": "Large Range Scans - avoid 5s limit",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 711,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}