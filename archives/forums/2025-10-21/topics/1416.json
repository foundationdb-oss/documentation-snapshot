{
  "post_stream": {
    "posts": [
      {
        "id": 4264,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2019-06-02T19:01:31.076Z",
        "cooked": "<p>SRFI is standardization process for Scheme programming language.</p>\n<p>I am pleased to announce that we will reach the last round of drafts for two proposals I made to SRFI standardization process to support <a href=\"https://srfi.schemers.org/srfi-167/srfi-167.html\" rel=\"noopener nofollow ugc\">Ordered Key-Value Store (SRFI-167)</a> and <a href=\"https://srfi.schemers.org/srfi-168/srfi-168.html\" rel=\"noopener nofollow ugc\">Generic N-Tuple Store (SRFI-168)</a> in Scheme implementations.</p>\n<p>SRFI-167 abstract is the following:</p>\n<blockquote>\n<p>This library describe an interface for ordered key-value store that is suitable to implement a storage engine for the generic tuple store SRFI. It maps cleanly with existing ordered key-value databases that may or may not provide transactions.</p>\n</blockquote>\n<p>SRFI-168 abstract is the following:</p>\n<blockquote>\n<p>This library is a generic approach to the database abstractions known as triple store and quad store. Generic Tuple Store Database implements n-tuple ordered sets and associated primitives for working with them in the context of data management.</p>\n</blockquote>\n<p>Like I said, it is the last call before finalization, so if you have feedback to make about those documents, now is the time!</p>\n<p>I made bindings for GNU Guile: <a href=\"https://git.sr.ht/~amz3/guile-foundationdb\" rel=\"noopener nofollow ugc\">https://git.sr.ht/~amz3/guile-foundationdb</a></p>\n<p>Thanks!</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-06-02T19:01:31.076Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 60,
        "reads": 30,
        "readers_count": 29,
        "score": 306.0,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://srfi.schemers.org/srfi-167/srfi-167.html",
            "internal": false,
            "reflection": false,
            "title": "SRFI 167: Ordered Key Value Store",
            "clicks": 8
          },
          {
            "url": "https://git.sr.ht/~amz3/guile-foundationdb",
            "internal": false,
            "reflection": false,
            "title": "~amz3/guile-foundationdb - sourcehut git",
            "clicks": 7
          },
          {
            "url": "https://srfi.schemers.org/srfi-168/srfi-168.html",
            "internal": false,
            "reflection": false,
            "title": "SRFI 168: Generic Tuple Store Database",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 4265,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-06-03T08:06:12.053Z",
        "cooked": "<h3><a name=\"srfi-167-okvs-1\" class=\"anchor\" href=\"#srfi-167-okvs-1\"></a>SRFI-167 OKVS</h3>\n<p>I see that <code>okvs-ref</code> instead of <code>okvs-get</code> is to be consistent within scheme, but I\u2019m struggling to find another egg that uses <code>*-rm</code> as a function name.  Copying from hashtable, is <code>*-clear</code> or <code>*-remove</code> more standard?</p>\n<p>I also notice that you\u2019ve elided range clears entirely from your API.  Was that intentional?  They are inconsistently supported across kv stores\u2026</p>\n<blockquote>\n<p>CONFIG might contain the following options:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\u2026</td>\n<td>\u2026</td>\n</tr>\n<tr>\n<td><code>'isolation</code></td>\n<td>a symbol among  <code>'read-uncommited</code> ,  <code>read-commited</code> ,  <code>snapshot</code> .</td>\n</tr>\n</tbody>\n</table>\n</div></blockquote>\n<p>Be careful about using the ANSI definitions of isolation, as they don\u2019t map cleanly to anything that\u2019s not a single-version pessimistically locked database. See <a href=\"https://blog.acolyer.org/2016/02/24/a-critique-of-ansi-sql-isolation-levels/\">A critique of ANSI SQL Isolation Levels</a> and <a href=\"https://blog.acolyer.org/2016/02/25/generalized-isolation-level-definitions/\">Generalized Isolation Levels</a>.</p>\n<p>I feel like isolation is something you\u2019d be better off leaving out of the SRFI.  Which you kind of did already, as it\u2019s in an optional config struct.</p>\n<blockquote>\n<p><code>(okvs-transaction-commit transaction config)</code></p>\n</blockquote>\n<p>Various transaction APIs disagree on if transactions need to be explicitly committed or aborted, so you\u2019d probably want to be conservative, and mandate in the SRFI that you must commit or roll back any started transaction.</p>\n<blockquote>\n<p><code>(okvs-range some start-key start-include? end-key end-include? [CONFIG])</code></p>\n<p><code>SOME</code>  can be a  <code>okvs</code>  or  <code>transaction</code>  object. This procedure should be decorated with with okvs-transactional.</p>\n</blockquote>\n<p>The only difference between an ordered and unordered key-value store is if it supports efficient range operations.  If your SRFI requires arbitrary get-ranges, you\u2019re going to require someone to write an almost-equivalent unordered key-value store SRFI, and you also technically ban systems like Cassandra that distributes data such that a known prefix of the key is randomly distributed and a suffix of the key is sequentially distributed.</p>\n<blockquote>\n<p><code>(okvs-transactional proc) -&gt; procedure</code></p>\n</blockquote>\n<p>I\u2019m happy to see that your proposal includes a transaction runner, but I don\u2019t recall seeing \u201cdecorator\u201d be a common scheme pattern?  I feel like I see explicit transaction runner functions in most other language\u2019s database bindings.  You could just offer a function like <code>(okvs-run okvs proc)</code>, and then <code>(okvs-run okvs (lambda (db) (okvs-ref db key)))</code> would be equivalent to the current <code>((okvs-transaction (lambda (db) (okvs-ref db key))) okvs)</code>, the latter of which I find harder to mentally parse.</p>\n<p>That said, I have enjoyed <code>@fdb.transaction</code> making life simple in the python bindings, and I don\u2019t really have a great sense of what is or is not idiomatic for scheme anyway.</p>\n<h3><a name=\"srfi-168-tuple-store-2\" class=\"anchor\" href=\"#srfi-168-tuple-store-2\"></a>SRFI-168 Tuple Store</h3>\n<p>I don\u2019t have any additional comments on this, other than, could you provide an example of nstore-from \u2192 nstore-where chaining with nstore-select.  My brain is breaking slightly trying to understand this generator of bindings getting manipulated.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-06-03T08:06:12.053Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 58,
        "reads": 26,
        "readers_count": 25,
        "score": 300.2,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://blog.acolyer.org/2016/02/24/a-critique-of-ansi-sql-isolation-levels/",
            "internal": false,
            "reflection": false,
            "title": "A Critique of ANSI SQL Isolation Levels \u2013 the morning paper",
            "clicks": 0
          },
          {
            "url": "https://blog.acolyer.org/2016/02/25/generalized-isolation-level-definitions/",
            "internal": false,
            "reflection": false,
            "title": "Generalized Isolation Level Definitions \u2013 the morning paper",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4266,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2019-06-03T09:38:22.585Z",
        "cooked": "<blockquote>\n<p>I\u2019m struggling to find another egg that uses <code>*-rm</code> as a function name. Copying from hashtable, is <code>*-clear</code> or <code>*-remove</code> more standard?</p>\n</blockquote>\n<p>Indeed, I will replace it with <code>okvs-clear!</code> because R7RS hash-table use <code>hash-table-clear!</code></p>\n<blockquote>\n<p>I also notice that you\u2019ve elided range clears entirely from your API. Was that intentional? They are inconsistently supported across kv stores\u2026</p>\n</blockquote>\n<p>I will add it.</p>\n<blockquote>\n<p>I feel like isolation is something you\u2019d be better off leaving out of the SRFI. Which you kind of did already, as it\u2019s in an optional config struct.</p>\n</blockquote>\n<p>Ok.</p>\n<blockquote>\n<p>The only difference between an ordered and unordered key-value store is if it supports efficient range operations. If your SRFI requires arbitrary get-ranges, you\u2019re going to require someone to write an almost-equivalent unordered key-value store SRFI, and</p>\n</blockquote>\n<p>Unordered key-value store seems not very useful to compose higher abstraction. I will think about it. I might make the <code>okvs-range</code> and <code>okvs-prefix</code> optional.</p>\n<blockquote>\n<p>you also technically ban systems like Cassandra that distributes data such that a known prefix of the key is randomly distributed and a suffix of the key is sequentially distributed.</p>\n</blockquote>\n<p>I don\u2019t have enough experience with Cassandra to support it.</p>\n<blockquote>\n<p>I don\u2019t recall seeing \u201cdecorator\u201d be a common scheme pattern?</p>\n</blockquote>\n<p>It is not really a common pattern in the sens there is no word for it. That said, higher order procedures, that is procedures that take procedure as argument are common place. <code>memoize</code> is an example of high order procedure that is also a decorator.</p>\n<blockquote>\n<p>I feel like I see explicit transaction runner functions in most other language\u2019s database bindings.</p>\n</blockquote>\n<p>I don\u2019t understand this paragraph:</p>\n<blockquote>\n<p>You could just offer a function like <code>(okvs-run okvs proc)</code> , and then <code>(okvs-run okvs (lambda (db) (okvs-ref db key)))</code> would be equivalent to the current <code>((okvs-transaction (lambda (db) (okvs-ref db key))) okvs)</code> , the latter of which I find harder to mentally parse.</p>\n</blockquote>\n<p>Right now, the way to use <code>okvs-ref</code> is as follow:</p>\n<pre data-code-wrap=\"scheme\"><code class=\"lang-scheme\">(define db (okvs config))\n(okvs-set! db #vu8(42) #vu8(2019))\n(define value (okvs-ref db #vu8(42))\n</code></pre>\n<p>Which is equivalent to:</p>\n<pre data-code-wrap=\"scheme\"><code class=\"lang-scheme\">(define db (okvs config))\n\n;; set\n(define tr (okvs-transaction-begin db))\n(okvs-set! tr #vu8(42) #vu8(2019))\n(okvs-transaction-commit tr)\n\n;; ref\n(define tr (okvs-transaction-begin db))\n(define value (okvs-ref tr #vu8(42))\n(okvs-transaction-commit tr)\n</code></pre>\n<blockquote>\n<p>That said, I have enjoyed <code>@fdb.transaction</code> making life simple in the python bindings, and I don\u2019t really have a great sense of what is or is not idiomatic for scheme anyway.</p>\n</blockquote>\n<p>As far as I understand, it <code>transactional</code> in scheme is not very idiomatic. The R7RS sheperd proposed something else:</p>\n<blockquote>\n<p>A more Schemey approach would be <code>(in-transaction database proc failure success)</code>, which evaluates <code>PROC</code> passing a newly created transaction as its argument.  When <code>PROC</code> returns, the transaction is committed and <code>in-transaction</code> applies whatever <code>PROC</code> returned to the <code>SUCCESS</code> procedure and returns its result.  If <code>PROC</code> calls \u201crollback\u201d instead, then the transaction is rolled back, the execution of <code>PROC</code> is abandoned, <code>FAILURE</code> is called with no arguments, and <code>in-transaction</code> returns its result.  By default <code>FAILURE</code> is <code>raise</code> and <code>SUCCESS</code> is <code>identity</code>.</p>\n</blockquote>\n<p>My rationale behind <code>transactional</code>, tell me if I am mistaken, is that it is very easy to use procedures decorated with <code>transactional</code> in REPL. The <code>in-transaction</code> approach is a little bit more ceremony.</p>\n<p>It seems like the above <code>okvs-run</code> you mention looks like <code>in-transaction</code>.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-06-03T09:38:22.585Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 23,
        "readers_count": 22,
        "score": 4.6,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4276,
        "name": "Mike McMahon",
        "username": "MMcM",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
        "created_at": "2019-06-04T14:03:27.984Z",
        "cooked": "<p>This is more portable, but I\u2019m afraid less useful for anything non-trivial, by not exposing that the key-value store might be asynchronous. Everything that could be staging more work will be in <code>fdb-future-block-until-ready</code>.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-06-04T14:03:27.984Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 9.0,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Mike McMahon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 219,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4279,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-06-04T23:35:36.201Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"MMcM\" data-post=\"4\" data-topic=\"1416\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/m/d07c76/48.png\" class=\"avatar\"> MMcM:</div>\n<blockquote>\n<p>by not exposing that the key-value store might be asynchronous</p>\n</blockquote>\n</aside>\n<p>Ah, thank you, I had forgotten this part.</p>\n<p>To pull from some wisdom previously left on our forums:</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"221\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"><a href=\"https://forums.foundationdb.org/t/foundationdb-for-embedded-use/221/5\">FoundationDB for embedded use</a></div>\n<blockquote>\n<p>But after a while, I observed something strange: when dealing with a remote database (like fdb), all your reads are async, and all the \u201cwrites\u201d (Set/Clear/Atomic) are non-blocking until you commit. With an embedded K/V Store that uses memory mapped files, this is exactly the reverse: reads are non-blocking (if the data file is already cached in memory) and writes are blocking (because I used single-writer so they needed to acquire a lock).</p>\n</blockquote>\n</aside>\n<p>So to be conservative, you\u2019d need to be async on reads, writes and commit.</p>\n<p>Ideally, you\u2019d be able to write code like</p>\n<pre><code class=\"lang-plaintext\">(define do-something (tr)\n  (let ((a (okvs-get tr \"a\"))\n        (b (okvs-get tr \"b\"))\n        (c (okvs-get tr \"c\")))\n    (+ (bytes-&gt;int a) (bytes-&gt;int b) (bytes-&gt;int c))) \n</code></pre>\n<p>and the get of <code>a</code>, <code>b</code>, and <code>c</code> could be done in parallel.</p>\n<p>This might eventually come down to how would a non-blocking version of this fit with whatever the event loop/framework constructions in scheme look like, and I have no idea what those are.</p>\n<p>I had played around with using proxy objects in python once, which are potentially an option in dynamic languages, but I suspect that scheme wouldn\u2019t be amenable to trying to teach <code>(+)</code> that if it gets something that <code>is-okvs-future?</code> that it needs to wait on it to turn itself into an <code>int</code>.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-06-04T23:35:55.385Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 20,
        "readers_count": 19,
        "score": 34.0,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/foundationdb-for-embedded-use/221/5",
            "internal": true,
            "reflection": false,
            "title": "FoundationDB for embedded use",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4302,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2019-06-08T10:27:51.666Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"5\" data-topic=\"1416\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>So to be conservative, you\u2019d need to be async on reads, writes and commit.</p>\n</blockquote>\n</aside>\n<p>Thanks for the feedback.</p>\n<blockquote>\n<p>This might eventually come down to how would a non-blocking version of this fit with whatever the event loop/framework constructions in scheme look like, and I have no idea what those are.</p>\n</blockquote>\n<p>I tried to explain <a href=\"https://stackoverflow.com/questions/56317339/how-to-implement-asynchronous-code-that-looks-synchronous-mimicking-async-awai/56317340#56317340\" rel=\"noopener nofollow ugc\">how to do non-blocking socket on stackoverflow</a>.</p>\n<p>So, in theory, it should be possible to support non-blocking using <code>call/1cc</code> or <code>call/cc</code> or similar (when it is fast enough).</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-06-08T10:27:51.666Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 17,
        "readers_count": 16,
        "score": 3.4,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://stackoverflow.com/questions/56317339/how-to-implement-asynchronous-code-that-looks-synchronous-mimicking-async-awai/56317340#56317340",
            "internal": false,
            "reflection": false,
            "title": "networking - How to implement asynchronous code that looks synchronous mimicking async / await? - Stack Overflow",
            "clicks": 3
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5417,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2019-10-29T18:09:56.355Z",
        "cooked": "<p>The specification is entering the finalization stage, again!</p>\n<p>In particular, I found a way to handle schema-on-write using <a href=\"https://srfi.schemers.org/srfi-173/srfi-173.html\" rel=\"nofollow noopener\">hooks</a>. This allows to validate write and delete before executing the commit.</p>\n<p>This is put into pratice in the nstore, you will find the unit tests at: <a href=\"https://github.com/ashinn/chibi-scheme/pull/587/commits/ac2d4f33a4bc708de0e2ccf5681a23e8bc49dd56\" rel=\"nofollow noopener\">https://github.com/ashinn/chibi-scheme/pull/587/commits/ac2d4f33a4bc708de0e2ccf5681a23e8bc49dd56</a></p>\n<p>I made a draft pull request adding the necessary machinery in Python bindings to put this idea into motion: <a href=\"https://github.com/apple/foundationdb/pull/2298\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/pull/2298</a></p>\n<p>Basically, I propose to add two hooks in fdb bindings to make it possible to create schema-on-write layers: <code>hook_on_transaction_begin</code> and <code>hook_on_transaction_end</code>. Layers (or abstractions) must add functions to <code>hook_on_transaction_begin</code> to setup the transaction state. Layers must keep transaction state synced if necessary during layer operations. Before the transaction is committed, <code>hook_on_transaction_commit</code> is run giving an opportunity to every layer to check that everything is ok, and otherwise raise an exception.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-10-29T18:09:56.355Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 16,
        "readers_count": 15,
        "score": 13.2,
        "yours": false,
        "topic_id": 1416,
        "topic_slug": "scheme-request-for-implementation",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/2298",
            "internal": false,
            "reflection": false,
            "title": "[WIP] bindings/python/fdb/impl.py: add hooks by amirouche \u00b7 Pull Request #2298 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 4
          },
          {
            "url": "https://github.com/ashinn/chibi-scheme/pull/587/commits/ac2d4f33a4bc708de0e2ccf5681a23e8bc49dd56",
            "internal": false,
            "reflection": false,
            "title": "[wip] add srfi-168 with dependencies by amirouche \u00b7 Pull Request #587 \u00b7 ashinn/chibi-scheme \u00b7 GitHub",
            "clicks": 3
          },
          {
            "url": "https://srfi.schemers.org/srfi-173/srfi-173.html",
            "internal": false,
            "reflection": false,
            "title": "SRFI 173: Hooks",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/scheme-request-for-implementation/1416/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      4264,
      4265,
      4266,
      4276,
      4279,
      4302,
      5417
    ]
  },
  "timeline_lookup": [
    [
      1,
      2333
    ],
    [
      4,
      2331
    ],
    [
      6,
      2328
    ],
    [
      7,
      2184
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings"
  ],
  "tags_descriptions": {},
  "fancy_title": "Scheme Request For Implementation",
  "id": 1416,
  "title": "Scheme Request For Implementation",
  "posts_count": 7,
  "created_at": "2019-06-02T19:01:30.993Z",
  "views": 1396,
  "reply_count": 3,
  "like_count": 1,
  "last_posted_at": "2019-10-29T18:09:56.355Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "scheme-request-for-implementation",
  "category_id": 7,
  "word_count": 1865,
  "deleted_at": null,
  "user_id": 41,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1416",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Implementing atomic DDL for SQL schema",
      "id": 678,
      "title": "Implementing atomic DDL for SQL schema",
      "slug": "implementing-atomic-ddl-for-sql-schema",
      "posts_count": 9,
      "reply_count": 2,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-09-03T19:04:26.293Z",
      "last_posted_at": "2018-09-08T15:28:47.996Z",
      "bumped": true,
      "bumped_at": "2018-09-08T15:28:47.996Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2146,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 251,
            "username": "George",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "A precise test oracle for FoundationDB simulation workloads",
      "id": 289,
      "title": "A precise test oracle for FoundationDB simulation workloads",
      "slug": "a-precise-test-oracle-for-foundationdb-simulation-workloads",
      "posts_count": 11,
      "reply_count": 7,
      "highest_post_number": 11,
      "image_url": null,
      "created_at": "2018-04-27T14:04:16.394Z",
      "last_posted_at": "2018-04-30T00:17:47.601Z",
      "bumped": true,
      "bumped_at": "2018-04-30T00:20:48.970Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1249,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB at afpyro Paris (2019)",
      "id": 1869,
      "title": "FoundationDB at afpyro Paris (2019)",
      "slug": "foundationdb-at-afpyro-paris-2019",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2020-01-07T10:05:05.775Z",
      "last_posted_at": "2020-01-07T10:05:05.830Z",
      "bumped": true,
      "bumped_at": "2020-01-07T10:05:05.830Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 677,
      "category_id": 10,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 41,
            "username": "amirouche",
            "name": "Amirouche",
            "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 41,
        "username": "amirouche",
        "name": "Amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 219,
        "username": "MMcM",
        "name": "Mike McMahon",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 41,
      "username": "amirouche",
      "name": "Amirouche",
      "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png"
    },
    "last_poster": {
      "id": 41,
      "username": "amirouche",
      "name": "Amirouche",
      "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png"
    },
    "links": [
      {
        "url": "https://srfi.schemers.org/srfi-167/srfi-167.html",
        "title": "SRFI 167: Ordered Key Value Store",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 8,
        "user_id": 41,
        "domain": "srfi.schemers.org",
        "root_domain": "schemers.org"
      },
      {
        "url": "https://git.sr.ht/~amz3/guile-foundationdb",
        "title": "~amz3/guile-foundationdb - sourcehut git",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 41,
        "domain": "git.sr.ht",
        "root_domain": "sr.ht"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/2298",
        "title": "[WIP] bindings/python/fdb/impl.py: add hooks by amirouche \u00b7 Pull Request #2298 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 41,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/ashinn/chibi-scheme/pull/587/commits/ac2d4f33a4bc708de0e2ccf5681a23e8bc49dd56",
        "title": "[wip] add srfi-168 with dependencies by amirouche \u00b7 Pull Request #587 \u00b7 ashinn/chibi-scheme \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 41,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://stackoverflow.com/questions/56317339/how-to-implement-asynchronous-code-that-looks-synchronous-mimicking-async-awai/56317340#56317340",
        "title": "networking - How to implement asynchronous code that looks synchronous mimicking async / await? - Stack Overflow",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 41,
        "domain": "stackoverflow.com",
        "root_domain": "stackoverflow.com"
      },
      {
        "url": "https://srfi.schemers.org/srfi-168/srfi-168.html",
        "title": "SRFI 168: Generic Tuple Store Database",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 41,
        "domain": "srfi.schemers.org",
        "root_domain": "schemers.org"
      },
      {
        "url": "https://srfi.schemers.org/srfi-173/srfi-173.html",
        "title": "SRFI 173: Hooks",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 41,
        "domain": "srfi.schemers.org",
        "root_domain": "schemers.org"
      }
    ]
  },
  "bookmarks": []
}