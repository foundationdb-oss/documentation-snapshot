{
  "post_stream": {
    "posts": [
      {
        "id": 3093,
        "name": "Wolf Dan",
        "username": "WolfDan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "created_at": "2019-01-24T15:30:28.649Z",
        "cooked": "<p>Hello! I hope you\u2019re having a great day ^^</p>\n<p><em>First let me explain the use I\u2019m giving to the atomic operations in my project (exactly the \u2018add\u2019 operation).</em></p>\n<p>I\u2019m working on a graph layer, I\u2019ve a global counter that gives every node a unique integer id, because of that transaction conflict while getting a new id during a node creating is prominent (which makes bulk inserts longer than expected) so I\u2019d like to know if there\u2019s any way to minimize or completely avoid this issue</p>\n<p><a href=\"https://github.com/OkamiIO/Nomure/blob/master/IMPLEMENTATION.md\" rel=\"nofollow noopener\">The implementation details are described here</a> in case you want to know about more about it (is Elixir code, so I\u2019ve written this implementation notes to make it easier to understand)</p>\n<p>A solution that I\u2019m already working on is to make a \u201cnode based\u201d counter instead of a global one so every \u201cnode_name\u201d has its own counter, that minimize the key conflicts, but I want to know a better solution for it</p>\n<p>I\u2019ve read here in the forums that the versionstamp could work as a unique identifier, but it is quite big (always 12 bytes) compared to an \u2018integer\u2019 implementation, which in my \u201cchunk\u201d implementation could be a bad practice since every unique id is part of every single property key, the index key and the relationship node key, so I wonder if is a good idea to change the atomic operation to versionstamp</p>\n<p>I\u2019m open to change all the implementation in order to make it efficient ^^, so please let me know if you have a better solution!</p>\n<p>Thank you!</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-24T15:30:28.649Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 446,
        "reads": 72,
        "readers_count": 71,
        "score": 2249.4,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Wolf Dan",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/OkamiIO/Nomure/blob/master/IMPLEMENTATION.md",
            "internal": false,
            "reflection": false,
            "title": "Nomure/IMPLEMENTATION.md at master \u00b7 OkamiIO/Nomure \u00b7 GitHub",
            "clicks": 16
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 323,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 3095,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2019-01-24T16:29:01.638Z",
        "cooked": "<p>Check out the high-contention allocator used by the directory layer. Your counter will not be sequential, but it will be an integer that is reasonably small.</p>\n<p>Here is an Elixir implementation: <a href=\"https://www.activesphere.com/blog/2018/08/05/high-contention-allocator\" rel=\"nofollow noopener\">https://www.activesphere.com/blog/2018/08/05/high-contention-allocator</a></p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-24T17:56:30.002Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 8,
        "reads": 70,
        "readers_count": 69,
        "score": 74.0,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://www.activesphere.com/blog/2018/08/05/high-contention-allocator",
            "internal": false,
            "reflection": false,
            "title": "High contention allocator \u2022 ActiveSphere \u2013 Bangalore based software consulting",
            "clicks": 39
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3099,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-01-24T19:05:52.123Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"1\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>I\u2019ve read here in the forums that the versionstamp could work as a unique identifier, but it is quite big (always 12 bytes)</p>\n</blockquote>\n</aside>\n<p>Technically, a versionstamp is 80 bits (10 bytes) followed by an optional 16-bit per-transaction counter. Some bindings only expose the 96-bits combined stamps, but you could potentially reduce the size a bit, though it would still be larger than a conventional integer (3-5 bytes if using the tuple layer)</p>\n<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"1\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>I\u2019ve a global counter that gives every node a unique integer id, because of that transaction conflict while getting a new id during a node creating is prominent</p>\n</blockquote>\n</aside>\n<p>If you are already reading the counter key in the same transaction that increments it, then it is not really an atomic increment: it will be automatically downgraded to a regular write by the client when you commit (since it already knows the value, it will compute the incremented value locally and update the counter to that value).</p>\n<p>This means that \u201catomically\u201d incrementing ID counters does not give you any performance boost against the naive implementation, and of course you get the same conflict rate.</p>\n<p>If you don\u2019t want to pay the cost of having 10-12 bytes UIDs, then you have to use high contention allocators, like the one <a class=\"mention\" href=\"/u/ryanworl\">@ryanworl</a> linked to, or maybe find a way to pre-allocate ranges of UIDs at the app level (each server allocates a range of let\u2019s say 1000 ids and distributes ids locally), which can be tricky to get right.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-24T19:05:52.123Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 64,
        "readers_count": 63,
        "score": 37.8,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3101,
        "name": "Wolf Dan",
        "username": "WolfDan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "created_at": "2019-01-24T20:07:32.830Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"ryanworl\" data-post=\"2\" data-topic=\"1051\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ryanworl/48/440_2.png\" class=\"avatar\"> ryanworl:</div>\n<blockquote>\n<p>Check out the high-contention allocator used by the directory layer. Your counter will not be sequential, but it will be an integer that is reasonably small.</p>\n<p>Here is an Elixir implementation: <a href=\"https://www.activesphere.com/blog/2018/08/05/high-contention-allocator\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">High contention allocator \u2022 ActiveSphere - Software consulting</a></p>\n</blockquote>\n</aside>\n<p>Oh! Thank you so much, I remember have seen it, but I never realized that I can use it for my use case, I just tried it and it works without problems, is exactly what I was looking for! (it made drop half of the time on my bulk insert operation! It\u2019s amazing!)</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"3\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Technically, a versionstamp is 80 bits (10 bytes) followed by an optional 16-bit per-transaction counter. Some bindings only expose the 96-bits combined stamps, but you could potentially reduce the size a bit, though it would still be larger than a conventional integer (3-5 bytes if using the tuple layer)</p>\n</blockquote>\n</aside>\n<p>Thanks for the clarification!</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"3\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>If you are already reading the counter key in the same transaction that increments it, then it is not really an atomic increment: it will be automatically downgraded to a regular write by the client when you commit (since it already knows the value, it will compute the incremented value locally and update the counter to that value).</p>\n</blockquote>\n</aside>\n<p>So in order to keep it atomic I just need to make the operation but do not expect or get the result inside the same transaction, right? I can do reads or writes on other keys withing the same transaction?</p>\n<p>Doing that way will minimize the key conflict? I want to implement a counter to track the amount of edges that a node has on a determinate property name, since I don\u2019t need to get back the counter.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-24T20:07:32.830Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 2,
        "incoming_link_count": 3,
        "reads": 58,
        "readers_count": 57,
        "score": 31.6,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Wolf Dan",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 323,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3104,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-01-24T21:00:59.941Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"4\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>So in order to keep it atomic I just need to make the operation but do not expect or get the result inside the same transaction, right?</p>\n</blockquote>\n</aside>\n<p>Yes. If you were updating a total counter of items in a table, that would work fine, but if you need the updated value from the same transaction (for uids or primary keys) then this will not be fast because of read conflicts.</p>\n<p>Under the hood, if you don\u2019t read the key and only atomically increment it, the client sends \u201cincrements that key\u201d to the cluster who will perform the operation later in the pipline. If you read the key and increment it, then you would still conflict if the value changes anyway, so the client can convert the operation into a regular read/write. Note that if in the same transaction you atomically increment the key twice, you\u2019ll see that it only send one increment for +2 (or +N, basically it merges the operations into one).</p>\n<aside class=\"quote no-group\" data-username=\"WolfDan\" data-post=\"4\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/wolfdan/48/806_2.png\" class=\"avatar\"> WolfDan:</div>\n<blockquote>\n<p>Doing that way will minimize the key conflict? I want to implement a counter to track the amount of edges that a node has on a determinate property name, since I don\u2019t need to get back the counter.</p>\n</blockquote>\n</aside>\n<p>Yes, that\u2019s one the scenario that atomic operations were designed for: counters that are read by <em>other</em> transactions (where before atomic operations existed, back in I think v2.x you had to also use high contention counters).</p>\n<p>Versionstamps are designed to help solve (among others) the problem of uid counters when you need something that increments (with gaps), but at the cost of larger keys. This helps a lot solving the perf issues with queues (like message queues, ordering of events, \u2026).</p>\n<p>In your repo, it looks like the uid will always be the first parf of the key, so you may be saved by the future storage engine being worked on (talk about this: <a href=\"https://www.youtube.com/watch?v=nlus1Z7TVTI&amp;list=PLbzoR-pLrL6q7uYN-94-p_-Q3hyAmpI7o&amp;index=10\" rel=\"noopener nofollow ugc\">https://www.youtube.com/watch?v=nlus1Z7TVTI&amp;list=PLbzoR-pLrL6q7uYN-94-p_-Q3hyAmpI7o&amp;index=10</a>), that will introduce key prefix compression: the versionstamps are currently implemented as the cluster\u2019s commit version (large number that increments by ~1,000,000 per second), so the first 4-6 bytes will not change frequently (every day? week?). With prefix compression, this means that the actual cost (on disk) of versionstamps will be down back to the 4-6 bytes (so same as integers). I\u2019m not sure if the prefix compression scheme will be used for network transmission, but at least you will pay less for storage.</p>\n<p>This won\u2019t help much if uids are not the first part of the key or in the value (so basically indexes, or internal pointers to other entities).</p>\n<p>Another point: if you have a location that is updated by each mutating transaction (a counter), then you will create a \u201chot spot\u201d for that particular storage process. You could try to break the counter into multiple keys far apart in the key space so that they end up on multiple storage nodes, but that could be somewhat difficult to achieve. This impacts global counters as well as voting tallies like an index <code>(..., 'best_girl_votes', &lt;character_uid&gt;) = [32 bit counter]</code>: the most popular characters will be mutated more frequently than some others, and may create hotspots. I think there is also a talk in the playlist that talks about hotspots and how to avoid them.</p>\n<p>Sooo\u2026 maybe versionstamps + hot stops mitigation could still be a solution, at least long term? You\u2019d need to do some calculations and cost breakdown for this. If you go that route, take a look at <a href=\"https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/3\" class=\"inline-onebox\">VersionStamp uniqueness and monotonicity - #3 by alloc</a> for some caveats.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-24T21:09:23.644Z",
        "reply_count": 2,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 8,
        "reads": 51,
        "readers_count": 50,
        "score": 75.2,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/3",
            "internal": true,
            "reflection": false,
            "title": "VersionStamp uniqueness and monotonicity",
            "clicks": 7
          },
          {
            "url": "https://www.youtube.com/watch?v=nlus1Z7TVTI&list=PLbzoR-pLrL6q7uYN-94-p_-Q3hyAmpI7o&index=10",
            "internal": false,
            "reflection": false,
            "title": "YouTube",
            "clicks": 3
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3105,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2019-01-24T21:18:20.654Z",
        "cooked": "<p>There is an issue now for the important caveat mentioned in that thread: <a href=\"https://github.com/apple/foundationdb/issues/1073\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/issues/1073</a></p>\n<p>Also, the record layer paper mentions how Apple worked around the non-uniqueness across clusters. Search for the word \u201cincarnation\u201d in the paper for details. It isn\u2019t directly related to that caveat (although may have been?), but rather for moving data between clusters.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-24T21:18:20.654Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 44,
        "readers_count": 43,
        "score": 33.8,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/1073",
            "internal": false,
            "reflection": false,
            "title": "Database version not restored when backup is restored to a fresh cluster \u00b7 Issue #1073 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 14
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3127,
        "name": "Wolf Dan",
        "username": "WolfDan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "created_at": "2019-01-25T15:48:13.262Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Yes. If you were updating a total counter of items in a table, that would work fine, but if you need the updated value from the same transaction (for uids or primary keys) then this will not be fast because of read conflicts.</p>\n<p>Under the hood, if you don\u2019t read the key and only atomically increment it, the client sends \u201cincrements that key\u201d to the cluster who will perform the operation later in the pipline. If you read the key and increment it, then you would still conflict if the value changes anyway, so the client can convert the operation into a regular read/write. Note that if in the same transaction you atomically increment the key twice, you\u2019ll see that it only send one increment for +2 (or +N, basically it merges the operations into one).</p>\n</blockquote>\n</aside>\n<p>Thanks for the explanation! Makes way more sense that way <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group quote-modified\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>In your repo, it looks like the uid will always be the first parf of the key, so you may be saved by the future storage engine being worked on (talk about this: <a href=\"https://www.youtube.com/watch?v=nlus1Z7TVTI&amp;amp;list=PLbzoR-pLrL6q7uYN-94-p_-Q3hyAmpI7o&amp;amp;index=10\" rel=\"noopener nofollow ugc\">https://www.youtube.com/watch?v=nlus1Z7TVTI&amp;amp;list=PLbzoR-pLrL6q7uYN-94-p_-Q3hyAmpI7o&amp;amp;index=10</a>), that will introduce key prefix compression: the versionstamps are currently implemented as the cluster\u2019s commit version (large number that increments by ~1,000,000 per second), so the first 4-6 bytes will not change frequently (every day? week?). With prefix compression, this means that the actual cost (on disk) of versionstamps will be down back to the 4-6 bytes (so same as integers). I\u2019m not sure if the prefix compression scheme will be used for network transmission, but at least you will pay less for storage.</p>\n</blockquote>\n</aside>\n<p>I\u2019ll stick to the high-contention allocator for the moment, I\u2019ve noticed that in the way my layer works consume a lot of storage, adding more bytes will make it even worse\u2026</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Another point: if you have a location that is updated by each mutating transaction (a counter), then you will create a \u201chot spot\u201d for that particular storage process. You could try to break the counter into multiple keys far apart in the key space so that they end up on multiple storage nodes, but that could be somewhat difficult to achieve. This impacts global counters as well as voting tallies like an index <code>(..., 'best_girl_votes', &lt;character_uid&gt;) = [32 bit counter]</code> : the most popular characters will be mutated more frequently than some others, and may create hotspots. I think there is also a talk in the playlist that talks about hotspots and how to avoid them.</p>\n</blockquote>\n</aside>\n<p>This is quite interesting, tho is easier if the votes just increment, but if someone rejects his vote things become much more complex</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>(\u2026, \u2018best_girl_votes\u2019, &lt;character_uid&gt;) = [32 bit counter]</p>\n</blockquote>\n</aside>\n<p>hahahaha nice reference <img src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=12\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"ryanworl\" data-post=\"6\" data-topic=\"1051\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ryanworl/48/440_2.png\" class=\"avatar\"> ryanworl:</div>\n<blockquote>\n<p>Also, the record layer paper mentions how Apple worked around the non-uniqueness across clusters. Search for the word \u201cincarnation\u201d in the paper for details. It isn\u2019t directly related to that caveat (although may have been?), but rather for moving data between clusters.</p>\n</blockquote>\n</aside>\n<p>Which paper are you refering to? ^^</p>\n<p>Anyway, again thank you so much for all the help!</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-25T15:48:13.262Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 2,
        "incoming_link_count": 0,
        "reads": 47,
        "readers_count": 46,
        "score": 9.4,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Wolf Dan",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 323,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3128,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2019-01-25T16:01:20.698Z",
        "cooked": "<aside class=\"onebox pdf\">\n  <header class=\"source\">\n      <a href=\"https://www.foundationdb.org/files/record-layer-paper.pdf\" target=\"_blank\" rel=\"nofollow noopener\">foundationdb.org</a>\n  </header>\n  <article class=\"onebox-body\">\n    <a href=\"https://www.foundationdb.org/files/record-layer-paper.pdf\" target=\"_blank\" rel=\"nofollow noopener\"><span class=\"pdf-onebox-logo\"></span></a>\n<h3><a href=\"https://www.foundationdb.org/files/record-layer-paper.pdf\" target=\"_blank\" rel=\"nofollow noopener\">record-layer-paper.pdf</a></h3>\n\n<p class=\"filesize\">810.74 KB</p>\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-01-25T16:01:20.698Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 41,
        "readers_count": 40,
        "score": 38.2,
        "yours": false,
        "topic_id": 1051,
        "topic_slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://www.foundationdb.org/files/record-layer-paper.pdf",
            "internal": false,
            "reflection": false,
            "clicks": 20
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-minimize-transaction-conflicts-on-atomic-operations/1051/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      3093,
      3095,
      3099,
      3101,
      3104,
      3105,
      3127,
      3128
    ]
  },
  "timeline_lookup": [
    [
      1,
      2462
    ],
    [
      7,
      2461
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "How to minimize transaction conflicts on atomic operations?",
  "id": 1051,
  "title": "How to minimize transaction conflicts on atomic operations?",
  "posts_count": 8,
  "created_at": "2019-01-24T15:30:28.527Z",
  "views": 2181,
  "reply_count": 4,
  "like_count": 5,
  "last_posted_at": "2019-01-25T16:01:20.698Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "how-to-minimize-transaction-conflicts-on-atomic-operations",
  "category_id": 9,
  "word_count": 2170,
  "deleted_at": null,
  "user_id": 323,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1051",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 8,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Go lang AddReadConflictKey AddWriteConflictKey",
      "id": 1842,
      "title": "Go lang AddReadConflictKey AddWriteConflictKey",
      "slug": "go-lang-addreadconflictkey-addwriteconflictkey",
      "posts_count": 4,
      "reply_count": 0,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2019-12-16T07:17:17.187Z",
      "last_posted_at": "2019-12-16T21:07:59.763Z",
      "bumped": true,
      "bumped_at": "2019-12-16T21:07:59.763Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 851,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 538,
            "username": "ravilution",
            "name": "Ravilution",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ravilution/{size}/728_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Possible to create a unique/increasing 8-byte sequence with versionstamps?",
      "id": 1640,
      "title": "Possible to create a unique/increasing 8-byte sequence with versionstamps?",
      "slug": "possible-to-create-a-unique-increasing-8-byte-sequence-with-versionstamps",
      "posts_count": 8,
      "reply_count": 4,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2019-09-20T11:57:48.578Z",
      "last_posted_at": "2019-09-27T20:52:15.412Z",
      "bumped": true,
      "bumped_at": "2019-09-27T20:52:15.412Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 901,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 113,
            "username": "pH14",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 417,
            "username": "lihtnes",
            "name": "Senthil Ramamoorthy",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/848f3c/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Atomic_Add(key, -1) can &ldquo;leak&rdquo; keys with value 0 if you are not careful",
      "id": 148,
      "title": "Atomic_Add(key, -1) can \"leak\" keys with value 0 if you are not careful",
      "slug": "atomic-add-key-1-can-leak-keys-with-value-0-if-you-are-not-careful",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-04-20T19:00:47.495Z",
      "last_posted_at": "2018-04-21T10:05:05.991Z",
      "bumped": true,
      "bumped_at": "2018-04-21T10:05:05.991Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 817,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 111,
            "username": "andoma",
            "name": "Andreas Smas",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andoma/{size}/78_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 323,
        "username": "WolfDan",
        "name": "Wolf Dan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 323,
      "username": "WolfDan",
      "name": "Wolf Dan",
      "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png"
    },
    "last_poster": {
      "id": 81,
      "username": "ryanworl",
      "name": "Ryan Worl",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
    },
    "links": [
      {
        "url": "https://www.activesphere.com/blog/2018/08/05/high-contention-allocator",
        "title": "High contention allocator \u2022 ActiveSphere \u2013 Bangalore based software consulting",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 39,
        "user_id": 81,
        "domain": "www.activesphere.com",
        "root_domain": "activesphere.com"
      },
      {
        "url": "https://www.foundationdb.org/files/record-layer-paper.pdf",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 20,
        "user_id": 81,
        "domain": "www.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/OkamiIO/Nomure/blob/master/IMPLEMENTATION.md",
        "title": "Nomure/IMPLEMENTATION.md at master \u00b7 OkamiIO/Nomure \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 16,
        "user_id": 323,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/issues/1073",
        "title": "Database version not restored when backup is restored to a fresh cluster \u00b7 Issue #1073 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 14,
        "user_id": 81,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/versionstamp-uniqueness-and-monotonicity/602/3",
        "title": "VersionStamp uniqueness and monotonicity",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 53,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://www.youtube.com/watch?v=nlus1Z7TVTI&list=PLbzoR-pLrL6q7uYN-94-p_-Q3hyAmpI7o&index=10",
        "title": "YouTube",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 53,
        "domain": "www.youtube.com",
        "root_domain": "youtube.com"
      }
    ]
  },
  "bookmarks": []
}