{
  "post_stream": {
    "posts": [
      {
        "id": 7121,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-05-29T16:40:04.331Z",
        "cooked": "<p>This is a discussion moved from GitHub: <a href=\"https://github.com/apple/foundationdb/issues/886\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Way to rename key \u00b7 Issue #886 \u00b7 apple/foundationdb \u00b7 GitHub</a></p>\n<p>In summary, the question is: how to rename a large set of keys with small performance impact.</p>\n<p>The most recent question is:</p>\n<blockquote>\n<p>The case we are using FDB is like this:<br>\nWe have a transaction (not the transaction in FDB), which may write large amount of k/v into FDB. Instead of writing them once, we write them in batch and commit at last. Before last commit, assume this transaction has a txn_id, the key may be named as xxx_txn_id. When committing, we get a commit time T, then we hope to change the key name from xxx_txn_id to xxx_T.<br>\nDo you have any suggestion on this case?</p>\n</blockquote>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-29T16:41:43.718Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 234,
        "reads": 42,
        "readers_count": 41,
        "score": 1178.4,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/886",
            "internal": false,
            "reflection": false,
            "title": "Way to rename key \u00b7 Issue #886 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 13
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 7122,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-05-29T16:49:29.777Z",
        "cooked": "<p>I don\u2019t know there exist a way to do the transformation efficiently.</p>\n<p>If you don\u2019t have to put the time T as the suffix of the key, you can let the client to get <code>xxx</code> and <code>T</code> in the same transaction and concatenate them together. It can be solved as follows: Use a customized key for the non-FDB \u201ctransaction\u201d. The key\u2019s value is either the <code>txn_id</code> or time <code>T</code>. When the non-FDB transaction finishes, you change change the key\u2019s value. (You need to use one bit in the value to distinguish the <code>txn_id</code> or time <code>T</code>.</p>\n<p>I guess the case you described is to solve a higher-level problem. There may exist better solutions to that problem than the problem you describe.  Would you mind sharing it?</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-29T16:50:00.493Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 42,
        "readers_count": 41,
        "score": 23.4,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7124,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2020-05-29T18:03:15.288Z",
        "cooked": "<p>I\u2019m not certain exactly what you\u2019re trying to do, is the following a correct interpretation?</p>\n<p>You want to write some data to FoundationDB with a suffix on each of your keys. These writes are done across multiple FDB transactions, and initially, you do all of your writes with the suffix <code>_txn_id</code>. During or after the last committed transaction, you decide on a new suffix <code>_T</code> that you want to apply to all of the previous writes from this batch of transactions.</p>\n<p>If that is correct, then I think you have the following options:</p>\n<ol>\n<li>Wait until <code>_T</code> is known to do any writes to FDB, if your use-case allows.</li>\n<li>Use indirection to map your ID to the key suffix (or a prefix). For example, you could use the directory layer to create a directory <code>/txn_id</code> to write your keys into and then rename the directory to <code>/T</code> when you know its value. This works because the keys are stored in some generated prefix, while the directory names map to the prefix. Renaming the directory only updates the map while leaving the data intact. You needn\u2019t use the directory layer for this, though, if you have some other indirection scheme you want to use.</li>\n</ol>\n<p>I\u2019m not sure if there are any other good general alternatives, though depending on the details of what you are trying to do, there may be other more specific options that could solve your problem.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-29T18:03:15.288Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 41,
        "readers_count": 40,
        "score": 28.2,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7130,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-30T00:51:20.509Z",
        "cooked": "<p>Thanks <a class=\"mention\" href=\"/u/mengxu\">@mengxu</a> and <a class=\"mention\" href=\"/u/ajbeamon\">@ajbeamon</a>.</p>\n<p>We are implementing a mvcc with FDB. The case is similar to <a class=\"mention\" href=\"/u/ajbeamon\">@ajbeamon</a> 's interpretation.<br>\nWe store the  the data into FDB and the key format is \u201cblockname_timestamp\u201d. When reading, as FDB sort by key, we first use blockname to do the filter and get the k/v starting with blockname from FDB,  then we use the timestamp to get the specific version we want (like the latest version).</p>\n<p>The option 1 mentioned above is fine, we buffer the k/v and commit them with the commit time at last.<br>\nBut when the buffer is full, we may still need to do the split write, then we need to use some temp timestamp like the txn_id. As <a class=\"mention\" href=\"/u/mengxu\">@mengxu</a> suggested, I think one way to avoid the rename is we can put the commit time into the value. But one concern is , for the same \u201cblockname\u201d, we need to further search for the specific version we want. I am thinking if the commit time is embed as the suffix the key (blockname_timestamp), then the key/value get from FDB is already the orders we expect (order by blockname first, for the same blockname, order by commit time), thus the search for the specific version is faster.  Please correct me if my understanding is wrong.</p>\n<p>For the option 2, if we still want to first prune by blockname, is it possible?</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T00:59:25.774Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 35,
        "readers_count": 34,
        "score": 17.0,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 3,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7131,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-30T01:49:12.705Z",
        "cooked": "<p>Based on the additional details you\u2019ve provided I don\u2019t think option 2 as <a class=\"mention\" href=\"/u/ajbeamon\">@ajbeamon</a> described it would work for you because you would not be able to search for <code>blockname</code> globally with one read.  You would have to search each <code>/T</code> directory for <code>blockname</code> separately, as the keys and values for each externally defined transaction would be located in its own directory (initially with a temporary directory name and then being renamed to the final name).</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T01:49:12.705Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 33,
        "readers_count": 32,
        "score": 26.6,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 771,
          "username": "hustnn",
          "name": "Hustnn",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7132,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2020-05-30T02:10:44.479Z",
        "cooked": "<p>An indirection could still be possible, it just probably wouldn\u2019t use the directory layer since it is prefix based. For example, you might be able to create an index that maps (blockname_)timestamp to a transaction ID. First, you\u2019d read the index to get the transaction IDs you want to read, then you\u2019d read from the keyspace where you stored the data by transaction ID. If you want to scan across multiple versions at once, this would work best if you can have a transaction ID that is ordered, but if not it probably doesn\u2019t matter.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T02:10:44.479Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 31,
        "readers_count": 30,
        "score": 11.2,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 7,
          "username": "SteavedHams",
          "name": "Steve Atherton",
          "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7133,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-30T03:09:49.736Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/ajbeamon\">@ajbeamon</a></p>\n<p>The transaction ID is ordered, the commit time is also ordered. The transaction id is known when it starts but the commit is only known till commit. We make the min value of transaction is larger than the max value of commit time so we can control the invisibility of uncommitted blocks.</p>\n<p>The reading is give a time T, then find related blockname with the latest commit time which is less than T. We actually don\u2019t use transaction id, just treat them as temp id for differentiate keys with different blockname.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T03:40:38.142Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 30,
        "readers_count": 29,
        "score": 16.0,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 3,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 12,
          "username": "ajbeamon",
          "name": "A.J. Beamon",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7134,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-30T04:46:41.986Z",
        "cooked": "<p>For any given <code>block_name</code>, how many unique transaction ids do you expect will exist at any given time?  Are they eventually cleaned up?</p>\n<p>If there is some cleanup so the MVCC scheme is only mean to cover a rolling window of time, then I suggest this key-value schema, described here in python-ish tuple form:</p>\n<pre><code class=\"lang-auto\">(\"blocks\", &lt;block_name&gt;, &lt;transaction_id&gt;) =&gt; &lt;value&gt;\n(\"commits\", &lt;transaction_id&gt;) =&gt; &lt;commit_time&gt;\n</code></pre>\n<p>To find the latest version of a block as of a time, you first range scan the \u201cblocks\u201d space to find all transaction IDs for the block name, and then look up each of those in parallel in the <code>commits</code> space to see which of those were committed and <em>when</em> then were committed, and then you will know which value you should.</p>\n<p>Transactions that are not yet committed will not have a \u201ccommits\u201d space entry, so those transaction ids will be ignored, so it is fine to use many different FDB transactions to write this data in chunks.</p>\n<p>A big downside of course is that to look up a block name you must read every version of the block name record for every transaction in the MVCC window.   If this makes this solution insufficient, let me know, I may have some other ideas.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T04:46:41.986Z",
        "reply_count": 1,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 29,
        "readers_count": 28,
        "score": 10.8,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 771,
          "username": "hustnn",
          "name": "Hustnn",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7135,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-30T06:11:08.154Z",
        "cooked": "<p>Thanks <a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a>.</p>\n<p>Yes, for different versions of given <code>block_name</code>, they will eventually been cleaned up, the number of versions at a given time depends on the what they are been accessed by other active transactions. If no active transactions, only the latest version will be kept, the old ones will be removed by garbage collector.</p>\n<p>For your given solution, just one question, why not directly put the commit_time into the value? Left it null or INFINITY before commit and set it after commit.</p>\n<p>For the downside, yes, I agree with you all versions of any glock name will be fetched when reading.<br>\nFor reading, we usually do a range query. For example, If we have 100 blocks in FDB, they are from <code>block001</code> to <code>block100</code>, the query is like <code>find blocks with id &gt; 50, and commit before time T_n</code>. Ideally, if all things can be pushdown, of course, only the latest version (less than <code>T_n</code>) of blocks <code>50-100</code> are fetched from FDB.  If it is like this, that will be great.  To my understanding, even we can commit all blocks to FDB once with the commit time, if the key format is <code>blockid_commitTime</code>, we still need to fetch all versions for the related blocks, as the FDB should use prefix to do the query, right? All keys larger than string <code>block50</code> will be read out of FDB.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T06:19:07.354Z",
        "reply_count": 1,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 29,
        "readers_count": 28,
        "score": 10.8,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 3,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 7,
          "username": "SteavedHams",
          "name": "Steve Atherton",
          "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7136,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-30T06:58:07.760Z",
        "cooked": "<p>FDB does not have predicate pushdown, so you will need to either issue a parallel range scan for each block number, or, if you do not know what block numbers actually exist in a large possible range, you could maintain another key space that is essentially a unique index on block names that exist so you can scan that space first with one range scan to discover the unique block names to use for the parallel range scans.</p>\n<blockquote>\n<p>For your given solution, just one question, why not directly put the commit_time into the value? Left it null or INFINITY before commit and set it after commit.</p>\n</blockquote>\n<p>I was assuming that you would want to write block name records from a transaction before the commit time of the transaction is known, as I thought was the case in your original question.  This indirection would allow you to do that.</p>\n<p>However, if you don\u2019t mind the cost of going back to write each KV pair a second time, then placing the commit timestamp in the value is not what I would recommend.</p>\n<p>I suggest the following, which also would help mitigate the issue of scanning all versions of a block with the MVCC window.  The schema is:</p>\n<pre><code class=\"lang-auto\">(\"blocks\", &lt;block_name&gt;, \"transactions\", &lt;transaction_id&gt; =&gt; &lt;value&gt;\n(\"blocks\", &lt;block_name&gt;, \"timestamps\", &lt;commit_timestamp&gt; =&gt; &lt;value&gt;\n(\"commits\", &lt;transaction_id&gt; =&gt; &lt;commit_timestamp&gt;\n(\"transactions\", &lt;transaction_id&gt;, &lt;block_name&gt;) =&gt; null\n</code></pre>\n<p>So initially, you have block updates and you have a <code>transaction_id</code> but no <code>commit_timestamp</code>.<br>\nFor each block update, you set</p>\n<pre><code class=\"lang-auto\">(\"blocks\", &lt;block_name&gt;, \"transactions\", &lt;transaction_id&gt;) = &lt;value&gt;\n(\"transactions\", &lt;transaction_id&gt;, &lt;block_name&gt;) = null\n</code></pre>\n<p>Each FDB transaction you commit can cover 1 or block updates.  Once all of the block updates are committed successfully, then set</p>\n<pre><code class=\"lang-auto\">(\"commits\", &lt;transaction_id&gt;) =&gt; &lt;commit_timestamp&gt;\n</code></pre>\n<p>And the write logic ends here.  Then, one or more instances of a background cleanup job can then scan the \u201ccommits\u201d keyspace to find committed transactions, and for each one of those scan the \u201ctransactions\u201d keyspace to find the blocks updated in that specific transaction.  For each of those block updates, do this:</p>\n<ul>\n<li>read <code>(\"blocks\", &lt;block_name&gt;, \"transactions\", &lt;transaction_id&gt;)</code></li>\n<li>clear <code>(\"blocks\", &lt;block_name&gt;, \"transactions\", &lt;transaction_id&gt;)</code></li>\n<li>set <code>(\"blocks\", &lt;block_name&gt;, \"timestamps\", &lt;commit_timestamp&gt; =&gt; &lt;value&gt;</code> using the value read above and the commit timestamp obtained for the transaction earlier</li>\n<li>clear <code>(\"transactions\", &lt;transaction_id&gt;, &lt;block_name&gt;)</code></li>\n</ul>\n<p>These changes must be done transactionally for a specific block update, but you can use many FDB transactions, each covering 1 or more updates.</p>\n<p>Once all of the block updates have been \u201cconverted\u201d from the \u201ctransactions\u201d space to the \u201ctimestamps\u201d space under the &lt;block_name&gt;'s key space, then clear the <code>(\"commits\", &lt;transaction_id&gt;)</code> key.</p>\n<p>With all that done, to look up the value of a block at a given timestamp, do the following:</p>\n<ul>\n<li>Using a reverse order <code>getRange()</code> with a limit of 1, directly read exactly the block version you want from <code>(\"blocks\", &lt;block_name&gt;, \"timestamps\")</code></li>\n<li>Using a range read, read ALL of the versions of the block from <code>(\"blocks\", &lt;block_name&gt;, \"transactions\",</code> and look up the commit timestamps as I explained earlier.</li>\n<li>Return the appropriate newest version at or under your target </li>\n</ul>\n<p>The idea here is while you\u2019re still doing 2 writes per block update, the second write (and a few other mutations) is improving the efficiency of reads by moving block update records into a timestamp-ordered keyspace containing only committed updates.</p>\n<p>By using a background cleanup job whose work queue is stored in the database, you don\u2019t have to worry about a single process dying in the middle of retracing its block updates to put the commit timestamp somewhere in the database for each block update.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T06:58:07.760Z",
        "reply_count": 3,
        "reply_to_post_number": 9,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 29,
        "readers_count": 28,
        "score": 90.8,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 771,
          "username": "hustnn",
          "name": "Hustnn",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7137,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-30T11:36:16.075Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a> Very detailed reply, thanks a lot.</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"10\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>doing 2 writes per block update</p>\n</blockquote>\n</aside>\n<p>Do the 2 writes here mean the the first write on \u201ctransactions\u201d space and the second write on \u201ctimestamps\u201d space?</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"10\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>By using a background cleanup job whose work queue is stored in the database, you don\u2019t have to worry about a single process dying in the middle of retracing its block updates to put the commit timestamp somewhere in the database for each block update.</p>\n</blockquote>\n</aside>\n<p>Is the background job here inside FDB? Even it is background, the application should be aware of the finish of background job, right? Otherwise, how does the application know the block has been already moved to \u201ctimestamps\u201d space?</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"10\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<ul>\n<li>Using a reverse order <code>getRange()</code> with a limit of 1, directly read exactly the block version you want from <code>(\"blocks\", &lt;block_name&gt;, \"timestamps\")</code></li>\n<li>Using a range read, read ALL of the versions of the block from <code>(\"blocks\", &lt;block_name&gt;, \"transactions\",</code> and look up the commit timestamps as I explained earlier.</li>\n<li>Return the appropriate newest version at or under your target</li>\n</ul>\n</blockquote>\n</aside>\n<p>One more question here,  the reverse order read and the range read, are these 2 reads trying to combine all versions located in both \u201ctimestamps\u201d and \u201ctransactions\u201d spaces?<br>\nAs all have been done here (including background job), all versions for any block should be already moved to \u201ctimestamps\u201d space, why still need to the range read from \u201ctransactions\u201d space?</p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T11:56:40.513Z",
        "reply_count": 1,
        "reply_to_post_number": 10,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 25,
        "readers_count": 24,
        "score": 20.0,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 4,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7138,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-30T14:49:46.527Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"hustnn\" data-post=\"11\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/h/43a26b/48.png\" class=\"avatar\"> hustnn:</div>\n<blockquote>\n<p>Do the 2 writes here mean the the first write on \u201ctransactions\u201d space and the second write on \u201ctimestamps\u201d space?</p>\n</blockquote>\n</aside>\n<p>Yes, I assume (perhaps incorrectly) that the values in the block update \u201ctransactions\u201d and \u201ctimestamps\u201d spaces will be on the larger side, but technically this data model does have 3 writes and 1 clear total for each block update event.  (And in some sense number of edits affects throughput moreso than value bytes that are just along for the ride.)</p>\n<aside class=\"quote no-group\" data-username=\"hustnn\" data-post=\"11\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/h/43a26b/48.png\" class=\"avatar\"> hustnn:</div>\n<blockquote>\n<p>Is the background job here inside FDB? Even it is background, the application should be aware of the finish of background job, right? Otherwise, how does the application know the block has been already moved to \u201ctimestamps\u201d space?</p>\n</blockquote>\n</aside>\n<p>Not in FDB, no, this would just be another loop of code you have as part of your app that you would want to keep running all the time, with at least once instance (there are ways to run multiple instances and minimize their conflicts).  Remember that the application will always see a consistent view of the entire keyspace within each transaction, so when the app does the lookup logic for a single <code>block_name</code> it will \u201csee\u201d all updates on that block within the MVCC window in the two keyspaces, \u201ctransactions\u201d and \u201ctimestamps\u201d, but it will only have to read one key from \u201ctimestamps\u201d while it has to read all of the keys from \u201ctransactions\u201d.   As cleanup occurs, reads get faster.</p>\n<aside class=\"quote no-group\" data-username=\"hustnn\" data-post=\"11\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/h/43a26b/48.png\" class=\"avatar\"> hustnn:</div>\n<blockquote>\n<p>One more question here, the reverse order read and the range read, are these 2 reads trying to combine all versions located in both \u201ctimestamps\u201d and \u201ctransactions\u201d spaces?<br>\nAs all have been done here (including background job), all versions for any block should be already moved to \u201ctimestamps\u201d space, why still need to the range read from \u201ctransactions\u201d space?</p>\n</blockquote>\n</aside>\n<p>Yes that\u2019s exactly what it\u2019s doing, and my assumption here is that any given moment you have a bunch of blocks being updated, a much larger number of blocks that have not been updated in a while, and you have reads going on that want to read blocks at a recent timestamp.  This schema will allow reads to see very recent changes with some \u201cread amplication\u201d (reading some things you don\u2019t really need) but for blocks that have not changed recently the cleanup will have coalesced all of their updates into the timestamp space where the correct versioned answer can be read with a <code>getRange()</code> and the scan of the transactions space for the block would yield nothing so there would be no secondary lookups for commit timestamps and no combining of the two types of answers.</p>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-30T14:52:41.817Z",
        "reply_count": 1,
        "reply_to_post_number": 11,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 25,
        "readers_count": 24,
        "score": 45.0,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7140,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-31T00:31:52.784Z",
        "cooked": "<p>Thanks a lot <a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a>. Understand now, I will try it.</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"12\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>but technically this data model does have 3 writes and 1 clear total for each block update event.</p>\n</blockquote>\n</aside>\n<p>For the mapping from <code>transaction id</code> to <code>commit time</code>, I think we can maintain it in application, then we can save 1 write.</p>",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-31T00:31:52.784Z",
        "reply_count": 1,
        "reply_to_post_number": 12,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 22,
        "readers_count": 21,
        "score": 19.4,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7141,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-31T02:07:22.266Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"hustnn\" data-post=\"13\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/h/43a26b/48.png\" class=\"avatar\"> hustnn:</div>\n<blockquote>\n<p>For the mapping from <code>transaction id</code> to <code>commit time</code> , I think we can maintain it in application, then we can save 1 write.</p>\n</blockquote>\n</aside>\n<p>This could work, but it\u2019s worth noting that the \u201ccommits\u201d space is also serving as essentially the work queue for transactions that have not yet been post-processed, so the cleanup process becomes trickier without these records.</p>",
        "post_number": 14,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-31T02:07:22.266Z",
        "reply_count": 0,
        "reply_to_post_number": 13,
        "quote_count": 1,
        "incoming_link_count": 3,
        "reads": 21,
        "readers_count": 20,
        "score": 19.2,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/14",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7142,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-31T02:42:44.672Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"10\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>Using a reverse order <code>getRange()</code> with a limit of 1, directly read exactly the block version you want from <code>(\"blocks\", &lt;block_name&gt;, \"timestamps\")</code></p>\n</blockquote>\n</aside>\n<p><a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a> One question here, because the reading usually have a bunch of blocks to read (E.g., find blocks with block id &gt; 50 for blocks block001 to block 100),  is it still possible to use <code>getRange()</code> with limit of <code>1</code> to get exactly the specific version of a bunch of blocks we want from  <code>(\"blocks\", &lt;block_name&gt;, \"timestamps\")</code> ?</p>",
        "post_number": 15,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-31T02:42:44.672Z",
        "reply_count": 1,
        "reply_to_post_number": 10,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 9.0,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/15",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7146,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-31T03:07:27.561Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"hustnn\" data-post=\"15\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/h/43a26b/48.png\" class=\"avatar\"> hustnn:</div>\n<blockquote>\n<p>is it still possible to use <code>getRange()</code> with limit of <code>1</code> to get exactly the specific version of a bunch of blocks we want from <code>(\"blocks\", &lt;block_name&gt;, \"timestamps\")</code> ?</p>\n</blockquote>\n</aside>\n<p>No, each read is going to give you the right version of 1 block.  You just issue a bunch of parallel reads.  If your block numbers are dense, so know that all or nearly all blocks between 50 and 100 are present, then it would be acceptable to just issue reads for all of them.   If the block numbers are sparse, then you will need a sort of unique index of block names as I mentioned previously.</p>",
        "post_number": 16,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-31T03:07:27.561Z",
        "reply_count": 1,
        "reply_to_post_number": 15,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 9.0,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/16",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7147,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-05-31T03:36:22.396Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"10\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>you could maintain another key space that is essentially a unique index on block names that exist so you can scan that space first with one range scan to discover the unique block names to use for the parallel range scans.</p>\n</blockquote>\n</aside>\n<p>Oh, I see it.</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"16\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>If your block numbers are dense, so know that all or nearly all blocks between 50 and 100 are present, then it would be acceptable to just issue reads for all of them. If the block numbers are sparse, then you will need a sort of unique index of block names as I mentioned previously.</p>\n</blockquote>\n</aside>\n<p>From my understanding, for the key format <code>(\"blocks\", &lt;block_name&gt;, \"transactions\", &lt;transaction_id&gt; =&gt; &lt;value&gt;</code>, the key should use the block_name as prefix, am I right? If like this, no matter the block numbers are dense or sparse, we can always use the block range like <code>lower bound: block_50, up bound: block_101</code> to only get the blocks we want. However, it contains all versions for these blocks (block 50 to 100).</p>\n<p>If we have a unique index of block names to get the exact block we want and do the parallel scan, we can use get range limit 1 to get the corresponding version we want for each block.</p>",
        "post_number": 17,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-31T03:37:25.790Z",
        "reply_count": 1,
        "reply_to_post_number": 16,
        "quote_count": 2,
        "incoming_link_count": 1,
        "reads": 23,
        "readers_count": 22,
        "score": 14.6,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/17",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7148,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-05-31T04:18:47.034Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"hustnn\" data-post=\"17\" data-topic=\"2142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/h/43a26b/48.png\" class=\"avatar\"> hustnn:</div>\n<blockquote>\n<p>From my understanding, for the key format <code>(\"blocks\", &lt;block_name&gt;, \"transactions\", &lt;transaction_id&gt; =&gt; &lt;value&gt;</code> , the key should use the block_name as prefix, am I right? If like this, no matter the block numbers are dense or sparse, we can always use the block range like <code>lower bound: block_50, up bound: block_101</code> to only get the blocks we want. However, it contains all versions for these blocks (block 50 to 100).</p>\n</blockquote>\n</aside>\n<p>Not quite, but that is a clever idea and it will work with a simple schema change.</p>\n<p>All keys in FDB are ordered, so the schema as I have described it would cause a range scan from <code>(\"blocks\", \"block_50\")</code> to <code>(\"blocks\", \"block_100\")</code> to return all of both the <code>\"transactions\"</code> and <code>\"timestamps\"</code> subspaces for all blocks in that range.</p>\n<p>However, you could change the tuple ordering to this instead:</p>\n<pre><code class=\"lang-auto\">(\"block_transactions\", &lt;block_name&gt;, &lt;transaction_id&gt; =&gt; &lt;value&gt;\n(\"block_timestamps\", &lt;block_name&gt;, &lt;commit_timestamp&gt; =&gt; &lt;value&gt;\n</code></pre>\n<p>So now the answer is yes, you can do a single range scan of from</p>\n<p><code>(\"block_transactions\", \"block_050\")</code> to <code>(\"block_transactions\", \"block_100\")</code></p>\n<p>to get all of the <em>pre-coalesced</em> block updates for any of the targeted blocks for all transactions all at once which is a very nice optimization.</p>\n<p>Here\u2019s an additional optimization:  Instead of keeping a separate unique block name index that you must scan, you could place an entry in <code>\"block_transactions\"</code> for each block name using a dummy transaction id such as 0, and simply never delete this record (unless the block is removed from the database).  These placeholder records would act as the unique block name index, so you would also discover all of your block names with that same single range read described above.  <em>However</em> there is a downside here in latency:  Since the index scan will be intermixed with potentially a much larger number of records, it will take more time before your application can launch all of the parallel <code>\"block_timestamps\"</code> reverse <code>getRange()</code> operations.</p>",
        "post_number": 18,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-05-31T04:19:28.980Z",
        "reply_count": 1,
        "reply_to_post_number": 17,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 22,
        "readers_count": 21,
        "score": 44.4,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/18",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7152,
        "name": "Hustnn",
        "username": "hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "created_at": "2020-06-01T00:47:36.612Z",
        "cooked": "<p>Thanks <a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a>. Your idea helps me a lot.</p>",
        "post_number": 19,
        "post_type": 1,
        "posts_count": 19,
        "updated_at": "2020-06-01T00:47:36.612Z",
        "reply_count": 0,
        "reply_to_post_number": 18,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 22,
        "readers_count": 21,
        "score": 4.4,
        "yours": false,
        "topic_id": 2142,
        "topic_slug": "way-to-rename-key",
        "display_username": "Hustnn",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 7,
          "username": "SteavedHams",
          "name": "Steve Atherton",
          "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 771,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/way-to-rename-key/2142/19",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      7121,
      7122,
      7124,
      7130,
      7131,
      7132,
      7133,
      7134,
      7135,
      7136,
      7137,
      7138,
      7140,
      7141,
      7142,
      7146,
      7147,
      7148,
      7152
    ]
  },
  "timeline_lookup": [
    [
      1,
      1971
    ],
    [
      11,
      1970
    ],
    [
      19,
      1969
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Way to rename key",
  "id": 2142,
  "title": "Way to rename key",
  "posts_count": 19,
  "created_at": "2020-05-29T16:40:04.242Z",
  "views": 1053,
  "reply_count": 15,
  "like_count": 6,
  "last_posted_at": "2020-06-01T00:47:36.612Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "way-to-rename-key",
  "category_id": 7,
  "word_count": 3605,
  "deleted_at": null,
  "user_id": 337,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2142",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 19,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Log abstraction on FoundationDB",
      "id": 117,
      "title": "Log abstraction on FoundationDB",
      "slug": "log-abstraction-on-foundationdb",
      "posts_count": 10,
      "reply_count": 3,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2018-04-20T10:47:11.941Z",
      "last_posted_at": "2018-05-03T17:35:34.126Z",
      "bumped": true,
      "bumped_at": "2018-05-03T17:35:34.126Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 3110,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 78,
            "username": "pineapple",
            "name": "Brian Haslet",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "id": 1833,
      "title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "slug": "cannot-commit-transaction-that-reads-the-metadataversion-key-after-changing-it",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-12-11T22:52:33.816Z",
      "last_posted_at": "2019-12-13T13:23:15.818Z",
      "bumped": true,
      "bumped_at": "2019-12-13T14:11:35.389Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1297,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB cluster performance issue - Periods of high disk I/O and sustained high latency",
      "id": 2184,
      "title": "FoundationDB cluster performance issue - Periods of high disk I/O and sustained high latency",
      "slug": "foundationdb-cluster-performance-issue-periods-of-high-disk-i-o-and-sustained-high-latency",
      "posts_count": 22,
      "reply_count": 17,
      "highest_post_number": 22,
      "image_url": null,
      "created_at": "2020-06-15T15:45:43.650Z",
      "last_posted_at": "2020-07-06T06:50:56.594Z",
      "bumped": true,
      "bumped_at": "2020-07-06T06:50:56.594Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2571,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 779,
            "username": "imtdk",
            "name": null,
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/i/22d042/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 747,
            "username": "ashishgupta",
            "name": "Ashish Gupta",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 771,
        "username": "hustnn",
        "name": "Hustnn",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
        "post_count": 8,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      },
      {
        "id": 7,
        "username": "SteavedHams",
        "name": "Steve Atherton",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "post_count": 7,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 337,
        "username": "mengxu",
        "name": "Meng Xu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 337,
      "username": "mengxu",
      "name": "Meng Xu",
      "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png"
    },
    "last_poster": {
      "id": 771,
      "username": "hustnn",
      "name": "Hustnn",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/issues/886",
        "title": "Way to rename key \u00b7 Issue #886 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 13,
        "user_id": 337,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}