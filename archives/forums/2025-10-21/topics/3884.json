{
  "post_stream": {
    "posts": [
      {
        "id": 12670,
        "name": "Apache",
        "username": "Apache",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png",
        "created_at": "2023-04-02T19:50:42.067Z",
        "cooked": "<p>Say, I have these two tables:</p>\n<pre><code>Course{uuid, name, description}\nStudent{uuid, name, address}\n</code></pre>\n<p>I am new to FDB, so as per my understanding, the design of these two tables in FDB will be as follows</p>\n<p>For Course table:</p>\n<pre><code>tuple(uuid, \"name\")\ntuple(uuid, \"description\")\n</code></pre>\n<p>For Student table:</p>\n<pre><code>tuple(uuid, \"name\")\ntuple(uuid, \"address\")\n</code></pre>\n<p>Please correct me if I am wrong in my understanding.</p>\n<p>If my understanding is correct, then my question is, what is the way to avoid repeating the value of the uuid in each key of the record? As the uuid is 16 bytes, prepending it to each field of the record increases the size. For few records this may not be a problem, but if there are thousands of record entries, then this adds up very quickly to the overall size of the DB storage. What is a way to reduce the size of the record entry and hence the DB storage space in this case?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-02T19:56:32.085Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 144,
        "reads": 37,
        "readers_count": 36,
        "score": 722.4,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Apache",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 1212,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 12674,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2023-04-03T19:46:33.492Z",
        "cooked": "<p>FDB doesn\u2019t support tables, it just a key-value store (the tuple layer is shipped with the client, but there\u2019s no obligation to use it).</p>\n<p>So if you want to store relational data in FDB you have to come up with a scheme how you want to translate this to keys and values \u2013 and there\u2019s many ways of doing this. A simple one would be to use an existing layer (like the record layer). Or you can come up with something yourself.</p>\n<p>if you only want to use the tuple layer, you would probably use the <code>uuid</code> as your key and a tuple <code>(name, description)</code> as the value. However, this means you can only query for the <code>uuid</code>. So you\u2019d also need to set up an index. So you might also have a set of <code>kv</code>-pairs for <code>name</code> \u2192 <code>uuid</code>. If the name isn\u2019t unique, you\u2019d do something like <code>(name, uuid,)</code> \u2192 <code>\"\"</code> and then you can use a range query to find all records of a given name.</p>\n<p>You also might want to use the directory layer to efficiently store these things in different subranges so you don\u2019t accidentally interpret a <code>uuid</code> as a <code>name</code> and vice-versa.</p>\n<p>Now for size reduction: you could use an <code>int64</code> and use FDB to increment it atomically. Or you could use a  versionstamp. However, it is probably not going to me a huge difference. Keep in mind that if you do the same in a relational database it will usually also repeat some key for each index.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-03T19:46:33.492Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 36,
        "readers_count": 35,
        "score": 7.2,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 12675,
        "name": "Apache",
        "username": "Apache",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png",
        "created_at": "2023-04-03T21:32:17.904Z",
        "cooked": "<blockquote>\n<p>FDB doesn\u2019t support tables, it just a key-value store (the tuple layer is shipped with the client, but there\u2019s no obligation to use it).</p>\n</blockquote>\n<p>Yes, I am aware of that. I used the tables illustration to depict my mental model of the data.</p>\n<blockquote>\n<p>So if you want to store relational data in FDB you have to come up with a scheme how you want to translate this to keys and values \u2013 and there\u2019s many ways of doing this.</p>\n</blockquote>\n<p>The Tuple structure I mentioned in my original post is my understanding, after reading the documentation and Tuple implementation on GitHub, of how to translate the mental model of a relational table into key-value pairs. So I will elaborate on my original example below with the representation of a table entry into key-value pairs. Taking the example of a Student table:</p>\n<pre><code>Student{id:uuid, name:string, address:string}\n</code></pre>\n<p>An entry in FDB for this table could be as follows(for illustration purpose I am using descriptive names for the API rather than the actual names below):</p>\n<pre><code>S = directory(\"student\")\nS.add_key_value(tuple{uuid, \"name\"}, name_value)\nS.add_key_value(tuple{uuid, \"address\"}, address_value)\n</code></pre>\n<p>As per my understanding, this will create two keys <code>directory_id+uuid+\"name\"</code> and <code>directory_id+uuid+\"address\"</code> with the values <code>name_value</code> and <code> address_value</code> respectively. And I think, now to create an index to find what courses the student is taking, additional key-value pairs could be added per course taken:</p>\n<pre><code>S.add_key_value(tuple{uuid, \"course\", course_uuid}, \"\")\n</code></pre>\n<p>This will create the key <code>directory_id+uuid+\"course\"+course_uuid</code> with empty value. Then to find all the courses taken by a student with id <code>uuid</code>, all the keys with prefix <code>directory_id+uuid+\"course\"</code> should be fetched.</p>\n<p>Similarly, the table Course could be translated into key-value pair with the index entries for students that have taken that particular course.</p>\n<p>This is my understanding of how a mental model of a relational table can be translated to key-value pairs in FDB. Using this understanding, my question was whether there is a way to compress the size of the keys(and hence the overall storage space).</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-03T21:37:11.122Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 32,
        "readers_count": 31,
        "score": 11.4,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Apache",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 15,
          "username": "markus.pilman",
          "name": "Markus Pilman",
          "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 1212,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 12678,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2023-04-03T23:40:54.666Z",
        "cooked": "<p>I think you\u2019re making this a bit more complicated than it needs to be. You can use the tuple value also for values. So your first example could simply be:</p>\n<pre><code class=\"lang-auto\">S = directory(\"student\")\nS.add_key_value(uuid, tuple(name_value, address_value))\n</code></pre>\n<p>Now this means that the value won\u2019t have a schema \u2013 so when you read a record you need to deserialize the values in the same order as you serialized them and you need to know the first one is a name and the second is an address.</p>\n<p>If you need or want a schema you could use something like protobuf or flatbuffers to serialize the value (or json \u2013 though json won\u2019t be very compact).</p>\n<p>Generally you don\u2019t want to put more information into your key than you need. With my above scheme, if you wanted some kind of m:n relationship between students and courses, you would do something like this:</p>\n<pre><code class=\"lang-auto\">C = directory(\"courses\")\nC.add_key_value(uuid, tuple(course_title_value, course_description_value))\n# only necessary if you need to answer questions like \"who is taking this course\"\nCS = directory(\"courses_students\")\nCS.add_key_value(course_uuid, student_uuid)\n# only necessary if you need to answer questions like \"what courses is this student taking\"\nSC = directory(\"students_courses\")\nSC.add_key_value(student_uuid, course_uuid)\n</code></pre>\n<p>Basically the rules would be:</p>\n<ol>\n<li>For a 1:1 relationship you include the value in the tuple (student name \u2194 student address)</li>\n<li>For a N:1 relationship you include the uuid of the foreign object into the object (for example if you had like major and minor for each student you could put uuids into the student tuple and have a separate directory you would reference)</li>\n<li>For M:N relationships you need at least one additional \u201ctable\u201d to store the relationship</li>\n</ol>\n<p>In a relational database (like some SQL database) the DBMS would do many of these things for you. In FDB you have to explicitly create all indexes etc yourself (unless you use a layer that does some of that work for you).</p>\n<p>For any kind of serious application I would highly recommend to either use an existing layer or write something yourself. Just using the tuple layer will probably not scale well. You will need to think about schema evolution etc and with the tuple layer alone you will be quite limited.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-03T23:42:55.476Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 27,
        "readers_count": 26,
        "score": 20.4,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 1212,
          "username": "Apache",
          "name": "Apache",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 12680,
        "name": "Apache",
        "username": "Apache",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png",
        "created_at": "2023-04-04T08:15:20.465Z",
        "cooked": "<p>Thank you for the detailed explanation!</p>\n<p>So now the challenge will be, how to query for the records(which you alluded to in your first reply); and also how to discern what change caused the <code>watch</code> to fire.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-04T08:16:54.759Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 28,
        "readers_count": 27,
        "score": 10.6,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Apache",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 15,
          "username": "markus.pilman",
          "name": "Markus Pilman",
          "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 1212,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 12687,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2023-04-04T18:34:33.168Z",
        "cooked": "<p>Yes, well you have to do everything yourself. So yes in order to query your data you need to build indexes (which is why a uuid might or might not be the best key value \u2013 if the thing you usually use for querying is unique it can just be the index). And you have the choice whether you want to have indirect indices or whether you want to include some information in the keys etc.</p>\n<aside class=\"quote no-group\" data-username=\"Apache\" data-post=\"6\" data-topic=\"3884\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/48.png\" class=\"avatar\"> Apache:</div>\n<blockquote>\n<p>and also how to discern what change caused the <code>watch</code> to fire.</p>\n</blockquote>\n</aside>\n<p>data lineage is the same as almost everything else: if you want this feature you need to build it yourself <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-04T18:34:33.168Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 27,
        "readers_count": 26,
        "score": 15.4,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 12689,
        "name": "Apache",
        "username": "Apache",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png",
        "created_at": "2023-04-05T09:09:54.785Z",
        "cooked": "<blockquote>\n<p>data lineage is the same as almost everything else: if you want this feature you need to build it yourself <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n</blockquote>\n<p>Back to drawing board for me then <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2023-04-05T09:09:54.785Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 26,
        "readers_count": 25,
        "score": 5.2,
        "yours": false,
        "topic_id": 3884,
        "topic_slug": "how-to-reduce-data-size",
        "display_username": "Apache",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 15,
          "username": "markus.pilman",
          "name": "Markus Pilman",
          "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 1212,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-to-reduce-data-size/3884/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      12670,
      12674,
      12675,
      12678,
      12680,
      12687,
      12689
    ]
  },
  "timeline_lookup": [
    [
      1,
      933
    ],
    [
      2,
      932
    ],
    [
      6,
      931
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "How to reduce data size?",
  "id": 3884,
  "title": "How to reduce data size?",
  "posts_count": 7,
  "created_at": "2023-04-02T19:50:41.999Z",
  "views": 510,
  "reply_count": 5,
  "like_count": 0,
  "last_posted_at": "2023-04-05T09:09:54.785Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "how-to-reduce-data-size",
  "category_id": 7,
  "word_count": 1444,
  "deleted_at": null,
  "user_id": 1212,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_3884",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 8,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "How to efficiently query data from FDB?",
      "id": 3895,
      "title": "How to efficiently query data from FDB?",
      "slug": "how-to-efficiently-query-data-from-fdb",
      "posts_count": 4,
      "reply_count": 2,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2023-04-10T11:25:58.221Z",
      "last_posted_at": "2023-04-19T14:23:07.437Z",
      "bumped": true,
      "bumped_at": "2023-04-19T14:23:07.437Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 741,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 1212,
            "username": "Apache",
            "name": "Apache",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Storing one billion floats with dense keys",
      "id": 1328,
      "title": "Storing one billion floats with dense keys",
      "slug": "storing-one-billion-floats-with-dense-keys",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-04-23T18:31:29.919Z",
      "last_posted_at": "2019-04-23T18:58:38.558Z",
      "bumped": true,
      "bumped_at": "2019-04-23T18:58:38.558Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 470,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 570,
            "username": "johollow",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/7ab992/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Application design using Subspace and Tuple",
      "id": 452,
      "title": "Application design using Subspace and Tuple",
      "slug": "application-design-using-subspace-and-tuple",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-05-22T21:46:43.537Z",
      "last_posted_at": "2018-07-14T21:02:50.010Z",
      "bumped": true,
      "bumped_at": "2018-07-14T21:02:50.010Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 3678,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 211,
            "username": "brk0v",
            "name": "Viacheslav Biriukov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 317,
            "username": "Lundin",
            "name": "Pontus Lundin",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/dfb087/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Secondary indexing approaches",
      "id": 792,
      "title": "Secondary indexing approaches",
      "slug": "secondary-indexing-approaches",
      "posts_count": 7,
      "reply_count": 2,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2018-10-19T19:24:02.093Z",
      "last_posted_at": "2018-10-20T15:08:09.001Z",
      "bumped": true,
      "bumped_at": "2018-10-20T15:08:09.001Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2905,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 391,
            "username": "atombender",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Considerations for key and value sizes",
      "id": 880,
      "title": "Considerations for key and value sizes",
      "slug": "considerations-for-key-and-value-sizes",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-11-19T13:26:16.767Z",
      "last_posted_at": "2018-11-28T21:50:00.482Z",
      "bumped": true,
      "bumped_at": "2018-11-28T21:50:00.482Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2072,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 1212,
        "username": "Apache",
        "name": "Apache",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      },
      {
        "id": 15,
        "username": "markus.pilman",
        "name": "Markus Pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 1212,
      "username": "Apache",
      "name": "Apache",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png"
    },
    "last_poster": {
      "id": 1212,
      "username": "Apache",
      "name": "Apache",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/2acd7d/{size}.png"
    }
  },
  "bookmarks": []
}