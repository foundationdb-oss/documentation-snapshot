{
  "post_stream": {
    "posts": [
      {
        "id": 812,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2018-05-03T23:09:33.409Z",
        "cooked": "<p>This is my first post in this forum so I want to quickly introduce myself: I am Software Engineer at Snowflake Computing and one of the engineers that works on FDB. We have and use an older version of FDB (version 3) internally and we added improvements and bugfixes to this code base within the last two years. Our git repository contains roughly 1.5k commits.</p>\n<p>We are planning to open source our changes as well and (hopefully) get them into the official FDB repository. This work will soon become high priority for us. We created our own fork (<a href=\"https://github.com/snowflakedb/foundationdb\" rel=\"nofollow noopener\">https://github.com/snowflakedb/foundationdb</a>) of the repository and we\u2019ll start pushing changes there effective immediately. For small changes we\u2019ll simply make pull requests, but I think it makes sense to first have a discussion about the larger changes.</p>\n<p>One of the earliest changes we made was to the build system. We use CMake to build FBD. CMake seems to be the saner choice and I think the current build system that FDB uses is an abomination. So I started to port our cmake files to the new repository. This is still work in progress.  CMake downloads a current version of boost and I plan to add the other dependencies in a similar fashion. These are the things that still need to be done:</p>\n<ul>\n<li>Packaging (rpm, deb, Windows Installer, OS X installer). This is relatively easy to do in cmake. But our version currently only does RPM (this is the only thing we need) so I did not yet write this part.</li>\n<li>Running tests. We have already all the code to run simulation tests with ctest and we use that heavily to test fdb in jenkins. However, it will take some more work to open source this, as some of the scripts only make sense in our environment (for example, whenever we run tests, the resulting log files are automatically uploaded to an internal Snowflake account so we can use SQL and a custom made dashboard to inspect the results).</li>\n<li>Windows: We only compile and run on Linux and OS X. Therefore we never bothered to work on Windows Support. In theory, cmake is portable. There are however a few things that will not work on Windows (like the actorcompiler that currently depends on mono and all compiler flags)</li>\n<li>Currently the bindings are not compiled - you basically just get fdbserver, fdbmonitor and fdbcli. However, this will soon follow.</li>\n</ul>\n<p>So this would be my first question: is this something people are interested in? We would love to get the cmake build system upstream eventually as this would reduce our maintenance cost and in general I believe that this would be beneficial for new people who would like to contribute to FDB.</p>\n<p>Additionally we invested a lot of time in getting better tooling support in general. cmake can generate a compile_commands.json file that can be used by third-party tools like IDEs and language servers. However, this is not too useful for FDB as it will contain the files that were generated by the actorcompiler.</p>\n<p>Instead our cmake system kicks off a simple python script that transforms this compile_commands.json file into one that contains the source files and removes the <code>-DNO_INTELLISENSE</code> definition. Additionally we rewrote actorcompiler.h so that it is more precise. As a result, our internal FDB source consists only of files that can be compiles without any errors. So Visual Studio Code with cquery,  Vim with ycm, and Emacs with rtags (and obviously any combination of those) are working. So we have code completion, refactoring, search symbol etc.</p>\n<p>In order to get this into the code we need to do quite some refactoring:</p>\n<ul>\n<li>We have to turn on and off the preprocessor actorcompiler in all files. This is necessary as the macros will otherwise screw up the includes (for example <code>state</code>, or <code>loop</code> can be variable names in includes so we can\u2019t simply delete all the state and loop tokens)</li>\n<li>There is a ton of <code>Void _ ...</code> occurrences in the code. We changed all of these to <code>Void _uvar...</code>. This is sadly necessary, as the compiler does not realize that the variable _ will run out of scope. So we have a macro _uvar that will generate a unique variable name.</li>\n</ul>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-03T23:09:33.409Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 173,
        "reads": 75,
        "readers_count": 74,
        "score": 910.0,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/snowflakedb/foundationdb",
            "internal": false,
            "reflection": false,
            "title": "GitHub - snowflakedb/foundationdb: FoundationDB - the open source, distributed, transactional key-value store",
            "clicks": 34
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 814,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-05-04T07:57:44.739Z",
        "cooked": "<p>So to summarize our in-person conversation\u2026</p>\n<p>I\u2019m about as eager to maintain our current build system as I am to maintain a CMake system, but replacing the build system with something vaguely sane and usable is a thing we\u2019d need to do at some point anyway, and CMake had been raised before as the most reasonable candidate.  I\u2019m fine with having our current vcxproj file-derived build system and a CMake-based one going in parallel until the CMake one is at feature parity.  <a class=\"mention\" href=\"/u/mbhaskar\">@mbhaskar</a> was a strong proponent of CMake before, and for adoption we\u2019d probably need buy-in from other people whose work would be impacted: <a class=\"mention\" href=\"/u/alvin\">@alvin</a> and <a class=\"mention\" href=\"/u/alloc\">@alloc</a>.  I\u2019ll have an offline conversation with them about it though.</p>\n<p>I\u2019m largely motivated by the idea of getting <code>rtags</code>.</p>\n<p><code>Void _uvar =</code> is a hack that I\u2019d be fine living with as well.  My hope would be that we can eventually just replace Flow with C++17 resumable functions, at which point all these hacks go away anyway.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-04T07:57:44.739Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 68,
        "readers_count": 67,
        "score": 38.6,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 842,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-05-05T00:38:07.059Z",
        "cooked": "<p>I have no horse in the build system race.</p>\n<p>But this</p>\n<blockquote>\n<p>Void _ \u2026 occurrences in the code. We changed all of these to Void _uvar</p>\n</blockquote>\n<p>is replacing something ugly with something uglier.  If we are going to change something, why not make the actor compiler allow</p>\n<pre><code>wait( &lt;expression of type Future&lt;Void&gt;&gt; );\n</code></pre>\n<p>as a statement?  That should be very easy to do, and I think having the actor compiler know about the Void type is not a big problem.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-05T00:38:07.059Z",
        "reply_count": 2,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 63,
        "readers_count": 62,
        "score": 42.6,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 856,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2018-05-05T15:45:56.156Z",
        "cooked": "<p>I agree that in general, being able to ignore the return value of an actor would be nice. However, given these statements:</p>\n<pre><code>wait(myFuture);\nwaitNext(myStream.getFuture());\n</code></pre>\n<p>how do you infer the types of myFutre and myStream (and this is the simple case where we pass a variable and not a type)? Maybe I am missing something but the only wait I can think of would be to implement type deduction and that seems to be quite difficult.</p>\n<p>I think the cleanest solution would be to have compiler support for flow. This could be through resumable functions or we could patch clang (although that is quite a project and it is one we probably won\u2019t have time doing).</p>\n<p>I guess what I am trying to say: I don\u2019t really care how we solve this and I am more than willing with whatever solution people like.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-05T15:45:56.156Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 60,
        "readers_count": 59,
        "score": 12.0,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 857,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-05T16:04:22.140Z",
        "cooked": "<p>Is there any reason not to allow return values to be discarded for all types, rather then just Void?</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-05T16:04:22.140Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 58,
        "readers_count": 57,
        "score": 21.6,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 858,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2018-05-05T16:33:55.671Z",
        "cooked": "<p>I don\u2019t think there is. But behind the scenes the actor compiler has to generate a callback function that receives the result of the future. It might be possible to template this method so that it accepts a generic type but I am not sure. Short of that: the actorcompiler needs to know the return type. This is why the following code currently does not compile:</p>\n<pre><code>auto v = wait(f);</code></pre>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-05T16:33:55.671Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 57,
        "readers_count": 56,
        "score": 26.4,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 12,
          "username": "ajbeamon",
          "name": "A.J. Beamon",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 861,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-05-05T21:43:38.824Z",
        "cooked": "<p>Of course a full type inferencing async/await would be best, but is a somewhat tall order now and was more so in 2009.</p>\n<p>What I suggested - allowing <code>wait(f);</code> where f has to be <code>Future&lt;Void&gt;</code> - should be very easy to implement. Just hard code the type Void for the ActorCallback and make the continuation function have an unnamed argument (Void&amp;) rather than (Void&amp;_).  What AJ suggested would be a little nicer, but I think a lot trickier to implement efficiently. You need a <code>Callback&lt;T&gt;</code> to wait on a <code>Future&lt;T&gt;</code> even if you don\u2019t care about the value. You could make <code>Callback&lt;T&gt;</code> inherit from UntypedCallback and change the interface to fire(void*), I guess, but yuck.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-05T21:46:01.520Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 56,
        "readers_count": 55,
        "score": 21.2,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 864,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2018-05-05T23:22:43.670Z",
        "cooked": "<p>I think we could get away with type inference (although more work). I didn\u2019t think this 100% through but I think this would be possible (and I apologize for the long post in advance, but this contains generated code):</p>\n<p>Let\u2019s say we have the following code:</p>\n<pre><code>ACTOR Future&lt;int&gt; foo() {\n    Future&lt;int&gt; f = asyncCalculation();\n    int count = wait(f);\n    return count + 1;\n}\n</code></pre>\n<p>This would currently generate to this:</p>\n<pre><code>namespace {\n// This generated class is to be used only via foo()\ntemplate &lt;class FooActor&gt;\nclass FooActorState {\npublic:\n    FooActorState()\n    {}\n \n    int a_body1(int loopDepth=0)\n    {\n        try {\n            Future&lt;int&gt; f = asyncCalculation();\n            if (static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state &lt; 0) return a_body1Catch1(actor_cancelled(), loopDepth);\n            Future&lt;int&gt; __when_expr_0 = f;\n            if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };\n            static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state = 1;\n            __when_expr_0.addCallbackAndClear(static_cast&lt;ActorCallback&lt; FooActor, 0, int &gt;*&gt;(static_cast&lt;FooActor*&gt;(this)));\n            loopDepth = 0;\n        }\n        catch (Error&amp; error) {\n            loopDepth = a_body1Catch1(error, loopDepth);\n        } catch (...) {\n            loopDepth = a_body1Catch1(unknown_error(), loopDepth);\n        }\n \n        return loopDepth;\n    }\n    int a_body1Catch1(Error error,int loopDepth=0)\n    {\n        this-&gt;~FooActorState();\n        static_cast&lt;FooActor*&gt;(this)-&gt;sendErrorAndDelPromiseRef(error);\n        loopDepth = 0;\n \n        return loopDepth;\n    }\n    int a_body1cont1(int const&amp; count,int loopDepth)\n    {\n        if (!static_cast&lt;FooActor*&gt;(this)-&gt;SAV&lt;int&gt;::futures) { count + 1; this-&gt;~FooActorState(); static_cast&lt;FooActor*&gt;(this)-&gt;destroy(); return 0; }\n        new (&amp;static_cast&lt;FooActor*&gt;(this)-&gt;SAV&lt; int &gt;::value()) int(count + 1);\n        this-&gt;~FooActorState();\n        static_cast&lt;FooActor*&gt;(this)-&gt;finishSendAndDelPromiseRef();\n        return 0;\n \n        return loopDepth;\n    }\n    int a_body1when1(int const&amp; count,int loopDepth)\n    {\n        loopDepth = a_body1cont1(count, loopDepth);\n \n        return loopDepth;\n    }\n    void a_exitChoose1()\n    {\n        if (static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state &gt; 0) static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state = 0;\n        static_cast&lt;FooActor*&gt;(this)-&gt;ActorCallback&lt; FooActor, 0, int &gt;::remove();\n \n    }\n    void a_callback_fire(ActorCallback&lt; FooActor, 0, int &gt;*,int value)\n    {\n        a_exitChoose1();\n        try {\n            a_body1when1(value, 0);\n        }\n        catch (Error&amp; error) {\n            a_body1Catch1(error, 0);\n        } catch (...) {\n            a_body1Catch1(unknown_error(), 0);\n        }\n \n    }\n    void a_callback_error(ActorCallback&lt; FooActor, 0, int &gt;*,Error err)\n    {\n        a_exitChoose1();\n        try {\n            a_body1Catch1(err, 0);\n        }\n        catch (Error&amp; error) {\n            a_body1Catch1(error, 0);\n        } catch (...) {\n            a_body1Catch1(unknown_error(), 0);\n        }\n \n    }\n};\n// This generated class is to be used only via foo()\nclass FooActor : public Actor&lt;int&gt;, public ActorCallback&lt; FooActor, 0, int &gt;, public FastAllocated&lt;FooActor&gt;, public FooActorState&lt;FooActor&gt; {\npublic:\n    using FastAllocated&lt;FooActor&gt;::operator new;\n    using FastAllocated&lt;FooActor&gt;::operator delete;\n    virtual void destroy() { this-&gt;Actor&lt;int&gt;::~Actor(); operator delete(this); }\nfriend struct ActorCallback&lt; FooActor, 0, int &gt;;\n    FooActor()\n         : Actor&lt;int&gt;(),\n           FooActorState&lt;FooActor&gt;()\n    {\n        this-&gt;a_body1();\n    }\n    void cancel()\n    {\n        auto wait_state = this-&gt;actor_wait_state;\n        this-&gt;actor_wait_state = -1;\n        switch (wait_state) {\n        case 1: this-&gt;a_callback_error((ActorCallback&lt; FooActor, 0, int &gt;*)0, actor_cancelled()); break;\n        }\n \n    }\n};\n}\nFuture&lt;int&gt; foo(  ) {\n    return Future&lt;int&gt;(new FooActor());\n}\n</code></pre>\n<p>Now instead of this, I would love to write this:</p>\n<pre><code>ACTOR Future&lt;int&gt; foo() {\n    auto f = asyncCalculation();\n    auto count = wait(f);\n    return count + 1;\n}\n</code></pre>\n<p>But this is problematic because the code above now heavily depends on type inference.</p>\n<p>However, I think it would be feasable to generate this code:</p>\n<pre><code>namespace {\n// This generated class is to be used only via foo()\ntemplate &lt;class FooActor&gt;\nclass FooActorState {\npublic:\n    FooActorState()\n    {}\n \n    int a_body1(int loopDepth=0)\n    {\n        try {\n            auto asyncCalculation();\n            if (static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state &lt; 0) return a_body1Catch1(actor_cancelled(), loopDepth);\n            auto __when_expr_0 = f;\n            if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };\n            static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state = 1;\n            __when_expr_0.addCallbackAndClear(static_cast&lt;ActorCallback&lt; FooActor, 0, decltype(__when_expr_0.get()) &gt;*&gt;(static_cast&lt;FooActor*&gt;(this)));\n            loopDepth = 0;\n        }\n        catch (Error&amp; error) {\n            loopDepth = a_body1Catch1(error, loopDepth);\n        } catch (...) {\n            loopDepth = a_body1Catch1(unknown_error(), loopDepth);\n        }\n \n        return loopDepth;\n    }\n    int a_body1Catch1(Error error,int loopDepth=0)\n    {\n        this-&gt;~FooActorState();\n        static_cast&lt;FooActor*&gt;(this)-&gt;sendErrorAndDelPromiseRef(error);\n        loopDepth = 0;\n \n        return loopDepth;\n    }\n    template&lt;class T&gt;\n    int a_body1cont1(T const&amp; count,int loopDepth)\n    {\n        if (!static_cast&lt;FooActor*&gt;(this)-&gt;SAV&lt;int&gt;::futures) { count + 1; this-&gt;~FooActorState(); static_cast&lt;FooActor*&gt;(this)-&gt;destroy(); return 0; }\n        new (&amp;static_cast&lt;FooActor*&gt;(this)-&gt;SAV&lt; int &gt;::value()) int(count + 1);\n        this-&gt;~FooActorState();\n        static_cast&lt;FooActor*&gt;(this)-&gt;finishSendAndDelPromiseRef();\n        return 0;\n \n        return loopDepth;\n    }\n    template&lt;class T&gt;\n    int a_body1when1(T const&amp; count,int loopDepth)\n    {\n        loopDepth = a_body1cont1(count, loopDepth);\n \n        return loopDepth;\n    }\n    void a_exitChoose1()\n    {\n        if (static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state &gt; 0) static_cast&lt;FooActor*&gt;(this)-&gt;actor_wait_state = 0;\n        static_cast&lt;FooActor*&gt;(this)-&gt;ActorCallback&lt; FooActor, 0, int &gt;::remove();\n \n    }\n    template&lt;class T&gt;\n    void a_callback_fire(ActorCallback&lt; FooActor, 0&gt;*,T value)\n    {\n        a_exitChoose1();\n        try {\n            a_body1when1(value, 0);\n        }\n        catch (Error&amp; error) {\n            a_body1Catch1(error, 0);\n        } catch (...) {\n            a_body1Catch1(unknown_error(), 0);\n        }\n \n    }\n    template&lt;class T&gt;\n    void a_callback_error(ActorCallback&lt; FooActor, 0, T &gt;*,Error err)\n    {\n        a_exitChoose1();\n        try {\n            a_body1Catch1(err, 0);\n        }\n        catch (Error&amp; error) {\n            a_body1Catch1(error, 0);\n        } catch (...) {\n            a_body1Catch1(unknown_error(), 0);\n        }\n \n    }\n};\n// This generated class is to be used only via foo()\nclass FooActor : public Actor&lt;int&gt;, public GenericActorCallback&lt; FooActor, 0&gt;, public FastAllocated&lt;FooActor&gt;, public FooActorState&lt;FooActor&gt; {\npublic:\n    using FastAllocated&lt;FooActor&gt;::operator new;\n    using FastAllocated&lt;FooActor&gt;::operator delete;\n    virtual void destroy() { this-&gt;Actor&lt;int&gt;::~Actor(); operator delete(this); }\nfriend struct ActorCallback&lt; FooActor, 0, int &gt;;\n    FooActor()\n         : Actor&lt;int&gt;(),\n           FooActorState&lt;FooActor&gt;()\n    {\n        this-&gt;a_body1();\n    }\n    void cancel()\n    {\n        auto wait_state = this-&gt;actor_wait_state;\n        this-&gt;actor_wait_state = -1;\n        switch (wait_state) {\n        case 1: this-&gt;a_callback_error((ActorCallback&lt; FooActor, 0, int &gt;*)0, actor_cancelled()); break;\n        }\n \n    }\n};\n}\nFuture&lt;int&gt; foo(  ) {\n    return Future&lt;int&gt;(new FooActor());\n}\n</code></pre>\n<p>GenericActorCallback would be something of the form:</p>\n<pre><code>template &lt;class ActorType, int CallbackNumber&gt;\nstruct ActorCallback : Callback\n{\n    template&lt;class T&gt;\n    void fire(T const&amp; value) override\n    {\n        static_cast&lt;ActorType*&gt;(this)-&gt;a_callback_fire(this, value);\n    }\n    void error(Error e) override\n    {\n        static_cast&lt;ActorType*&gt;(this)-&gt;a_callback_error(this, e);\n    }\n};\n</code></pre>\n<p>Note that Callback does not have a template argument anymore. But I honestly don\u2019t believe that the template argument is needed anyways - the only change necessary is to template the fire method:</p>\n<pre><code>struct Callback\n{\n    Callback *prev, *next;\n\n    template&lt;class T&gt;\n    virtual void fire(T const&amp;) {}\n    virtual void error(Error) {}\n    virtual void unwait() {}\n\n    void insert(Callback* into)\n    {\n        // Add this (uninitialized) callback just after `into`\n        this-&gt;prev = into;\n        this-&gt;next = into-&gt;next;\n        into-&gt;next-&gt;prev = this;\n        into-&gt;next = this;\n    }\n\n    void insertBack(Callback* into)\n    {\n        // Add this (uninitialized) callback just before `into`\n        this-&gt;next = into;\n        this-&gt;prev = into-&gt;prev;\n        into-&gt;prev-&gt;next = this;\n        into-&gt;prev = this;\n    }\n\n    void insertChain(Callback* into)\n    {\n        // Combine this callback's (initialized) chain and `into`'s such that\n        // this callback is just after `into`\n        auto p = this-&gt;prev;\n        auto n = into-&gt;next;\n        this-&gt;prev = into;\n        into-&gt;next = this;\n        p-&gt;next = n;\n        n-&gt;prev = p;\n    }\n\n    void remove()\n    {\n        // Remove this callback from the list it is in, and call unwait() on the\n        // head of that list if this was the last callback\n        next-&gt;prev = prev;\n        prev-&gt;next = next;\n        if (prev == next)\n            next-&gt;unwait();\n    }\n\n    int countCallbacks()\n    {\n        int count = 0;\n        for (Callback* c = next; c != this; c = c-&gt;next)\n            count++;\n        return count;\n    }\n};\n</code></pre>\n<p>Now having a virtual templated function looks wrong here - but it isn\u2019t. Virtual is all about runtime, template is static. The compiler can instantiate the fire method of all children, so it will compile.</p>\n<p>I think the biggest drawback of this approach is that compiler errors will probably be quite hard to understand. Apart from that, I don\u2019t see any obvious reasons why it should not work, but of course I might be missing something.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-05T23:24:31.249Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 55,
        "readers_count": 54,
        "score": 16.0,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 869,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-05-06T13:55:37.552Z",
        "cooked": "<p>I don\u2019t think this will work. I\u2019m afraid I don\u2019t have time to explain why in detail, but partly because of the virtual template method in Callback, and partly because the vtbl for the concrete ActorCallback is initialized with the actor, and there is no way that I know of to make that dependent on a type inferred inside a member function of the class. The former can be somewhat straightforwardly worked around by type erasure (as I suggested for AJ\u2019s easier suggestion), but I think the latter requires a change (and probably a cost) in what happens at runtime. You could try for example deferring construction of the callback until the wait statement, just reserving space for it in the base class, but it\u2019s going to be ugly and very type unsafe.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-05-06T13:55:37.552Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 50,
        "readers_count": 49,
        "score": 15.0,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1871,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-08-11T00:35:30.260Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"dave\" data-post=\"3\" data-topic=\"334\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/dave/48/89_2.png\" class=\"avatar\"> dave:</div>\n<blockquote>\n<p>why not make the actor compiler allow</p>\n<pre><code class=\"lang-auto\">wait( &lt;expression of type Future&lt;Void&gt;&gt; );\n</code></pre>\n<p>as a statement? That should be very easy to do, and I think having the actor compiler know about the Void type is not a big problem.</p>\n</blockquote>\n</aside>\n<p>I\u2019ve posted a <a href=\"https://github.com/apple/foundationdb/pull/699\">PR #699</a> that implements this, and the other changes required to the codebase to allow clang to parse un-actor-compiled .actor.cpp files, and generate a <code>compile_commands.json</code> to feed into other tools.  I have the YouCompleteMe vim plugin now able to understand TLogServer.actor.cpp as being diagnostic-free.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-08-11T00:38:37.463Z",
        "reply_count": 0,
        "reply_to_post_number": 9,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 41,
        "readers_count": 40,
        "score": 33.2,
        "yours": false,
        "topic_id": 334,
        "topic_slug": "cmake-and-better-ide-support",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/699",
            "internal": false,
            "reflection": false,
            "title": "Allow IDEs to better understand and analyze the FDB codebase by alexmiller-apple \u00b7 Pull Request #699 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 25
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/cmake-and-better-ide-support/334/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      812,
      814,
      842,
      856,
      857,
      858,
      861,
      864,
      869,
      1871
    ]
  },
  "timeline_lookup": [
    [
      1,
      2728
    ],
    [
      3,
      2727
    ],
    [
      4,
      2726
    ],
    [
      9,
      2725
    ],
    [
      10,
      2629
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "CMake and better IDE support",
  "id": 334,
  "title": "CMake and better IDE support",
  "posts_count": 10,
  "created_at": "2018-05-03T23:09:33.328Z",
  "views": 1711,
  "reply_count": 5,
  "like_count": 6,
  "last_posted_at": "2018-08-11T00:35:30.260Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "cmake-and-better-ide-support",
  "category_id": 8,
  "word_count": 2664,
  "deleted_at": null,
  "user_id": 15,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_334",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 10,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Building on Windows",
      "id": 404,
      "title": "Building on Windows",
      "slug": "building-on-windows",
      "posts_count": 10,
      "reply_count": 4,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2018-05-12T13:32:26.654Z",
      "last_posted_at": "2019-10-13T20:08:10.927Z",
      "bumped": true,
      "bumped_at": "2019-10-13T20:08:10.927Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 3367,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 235,
            "username": "wolfspider",
            "name": "Jesse Bennett",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wolfspider/{size}/206_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 545,
            "username": "rishabh",
            "name": "Rishabh",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB Build System",
      "id": 790,
      "title": "FoundationDB Build System",
      "slug": "foundationdb-build-system",
      "posts_count": 6,
      "reply_count": 3,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2018-10-19T17:50:59.329Z",
      "last_posted_at": "2018-10-28T22:43:28.265Z",
      "bumped": true,
      "bumped_at": "2018-10-28T22:43:28.265Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 1090,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 397,
            "username": "rescrv",
            "name": "Robert Escriva",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/a87d85/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 55,
            "username": "bowlofstew",
            "name": "Stewart Henderson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/b/aca169/{size}.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Proposal: Dropping MSVC",
      "id": 1939,
      "title": "Proposal: Dropping MSVC",
      "slug": "proposal-dropping-msvc",
      "posts_count": 13,
      "reply_count": 8,
      "highest_post_number": 13,
      "image_url": null,
      "created_at": "2020-02-12T01:24:59.706Z",
      "last_posted_at": "2020-02-13T20:00:39.983Z",
      "bumped": true,
      "bumped_at": "2020-02-13T20:00:39.983Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 12,
      "views": 1644,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 323,
            "username": "WolfDan",
            "name": "Wolf Dan",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 500,
            "username": "wohali",
            "name": "Joan Touzet",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wohali/{size}/773_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB on NixOS: packaging, notes and questions",
      "id": 251,
      "title": "FoundationDB on NixOS: packaging, notes and questions",
      "slug": "foundationdb-on-nixos-packaging-notes-and-questions",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-04-24T20:01:29.570Z",
      "last_posted_at": "2018-04-25T22:03:31.681Z",
      "bumped": true,
      "bumped_at": "2018-04-25T22:03:31.681Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 2219,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 158,
            "username": "aseipp",
            "name": "Austin Seipp",
            "avatar_template": "/user_avatar/forums.foundationdb.org/aseipp/{size}/124_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Is there a plan to release the Flow language and SDK?",
      "id": 231,
      "title": "Is there a plan to release the Flow language and SDK?",
      "slug": "is-there-a-plan-to-release-the-flow-language-and-sdk",
      "posts_count": 10,
      "reply_count": 4,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2018-04-23T23:14:57.275Z",
      "last_posted_at": "2018-06-18T20:12:59.637Z",
      "bumped": true,
      "bumped_at": "2018-06-18T20:12:59.637Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2604,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 55,
            "username": "bowlofstew",
            "name": "Stewart Henderson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/b/aca169/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 301,
            "username": "ychtiger",
            "name": "Ychtiger",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/df705f/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 15,
        "username": "markus.pilman",
        "name": "Markus Pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 15,
      "username": "markus.pilman",
      "name": "Markus Pilman",
      "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
    },
    "last_poster": {
      "id": 13,
      "username": "alexmiller",
      "name": "Alex Miller",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
    },
    "links": [
      {
        "url": "https://github.com/snowflakedb/foundationdb",
        "title": "GitHub - snowflakedb/foundationdb: FoundationDB - the open source, distributed, transactional key-value store",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 34,
        "user_id": 15,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/699",
        "title": "Allow IDEs to better understand and analyze the FDB codebase by alexmiller-apple \u00b7 Pull Request #699 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 25,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}