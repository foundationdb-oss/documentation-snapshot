{
  "post_stream": {
    "posts": [
      {
        "id": 1284,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-24T13:42:28.916Z",
        "cooked": "<p>I\u2019m currently designing a new layer that needs to coordinate work items, and distribute them among a set of worker servers, and I plan to use Watches for the notification between producers and workers.</p>\n<p>Unfortunately, the design requires a lot of works (thousands) and even more unique \u201cqueues\u201d (hundred of thousands). Each unique queue can have work items queued, and each item must be processed by a specific worker.</p>\n<p><em>Note: I\u2019ve already looked at the code in the client and storage node actors to see how Watches are handled, but I\u2019m not sure yet about the performance characteristics</em></p>\n<h3>Example Scenario</h3>\n<p>Let\u2019s say I want to create the next YouTube.</p>\n<p>I would have thousands of file servers that have large video or image files upload by many users. Each user as a queue of files to convert/transcode on demand and work must be coordinated among all the file servers (a process like <code>ffmpeg</code> will read from the file on local disk).</p>\n<ul>\n<li>Each user can only have one file transcoded at the same time in the cluster (the next file in the queue)</li>\n<li>Files are physically located on a specific server\u2019s hard disk, so only that server can transcode the file</li>\n<li>Servers have lots of core, so can transcode multiple files at the same time</li>\n<li>Files for a single user can be stored on multiple servers.</li>\n</ul>\n<p>I have a set of subspaces that store the description of each work item, and also a set of queues with \u201cwork orders\u201d stored (using VersionStamps as ids to keep ordering).</p>\n<p>My plan is to have each server having its own key that is watched. When a producer schedules a new workitem in a queue, and if this queue is empty, then it can touch the corresponding server\u2019s key to wake it up.</p>\n<p><img src=\"https://global.discourse-cdn.com/foundationdb/original/1X/0819f4ad7c04fe7d847b2f33824849dc70ee6a0c.png\" alt=\"image\" width=\"629\" height=\"316\"></p>\n<p>In this example:</p>\n<ul>\n<li>User A has three files: <code>UserA_1.mp4</code>, <code>UserA_2.mp4</code>, <code>UserA_3.mp4</code> that are stored on several servers (1 and 2)</li>\n<li>Server 1 can start working on <code>UserA_1.mp4</code> and <code>UserK_3.mp4</code> concurrently. It cannot work on <code>UserB_7.mp4</code> yet because User K has other files before in the queue.</li>\n<li>Server 2 can start working on <code>UserB_1.mp4</code>, but must wait for Server 1 to finish before working on <code>UserA_2.mp4</code> and then <code>UserA_3.mp4</code>.</li>\n</ul>\n<p>When a server finishes working on a file, it can remove the corresponding entry from the queue, and check for the next entry.</p>\n<ul>\n<li>If there is none, it can stop.</li>\n<li>If there is another work item in the queue,\n<ul>\n<li>either the next file is located on the same server, so it can continue locally</li>\n<li>or the next file is located on another server, and the current worker must wake up the other worker so that it can pick up the work.</li>\n</ul>\n</li>\n</ul>\n<p>I also need to support cancellation of work items (user deletes a file, a file is flagged and must be removed, the account is suspended/deleted, etc\u2026)</p>\n<ul>\n<li>for works that are in second position or more in the queue, simply remove them.</li>\n<li>for works that are in first position in the queue, need to send a command to the server to stop working on this</li>\n</ul>\n<h4>Notification of servers</h4>\n<p>Each server will watch a key, that is used to notify it must work on something immediately.</p>\n<p>Probably the keys will be <code>(..., \"servers\", SERVER_ID) = ####</code> and I will use an atomic add operation (so the value is opaque)</p>\n<p><strong>Question <span class=\"hashtag\">#1</span></strong>: I will have thousands of such keys, which will be stored in the same subspace so probably store on the same storage node (or maybe two if the subspace spans two shards). Will this create too much load on that particular fdb storage node that will have tons of watches ?</p>\n<p><strong>Question <span class=\"hashtag\">#2</span></strong>: In what circumstances can a watch become \u201cdead\u201d? If a server has a callback on a Watch, but for any reason it dies (during a cluster event) or the client does not receive the message when the watch triggers, is it possible for the thing to deadlock? Do I need an additional polling system that checks things every X minutes, and rely on watch only to shorten the latency?</p>\n<p>To tell a server that it must work on a file, I cannot simply set its key with a workitem id, because watches are async, and by the time the server wakes up and check the key, I could have overwritten it with another workitem id.</p>\n<p>I need a queue of notification for each server that contains commands \u201cwork on this file\u201d, \u201cstop working on this file\u201d. With a Versionstamped key, this looks trivial to do.</p>\n<pre><code>(..., \"server_workqueue\", SERVER_ID) = #### // &lt;-- watched key\n(..., \"server_workqueue\", SERVER_ID, &lt;Versionstamp&gt;) = 'Please work on file UserX_Y.mp4`\n(..., \"server_workqueue\", SERVER_ID, &lt;Versionstamp&gt;) = 'Stop working on file UserX_Y.mp4 !!!`\n</code></pre>\n<p>My fear is that if the server crashes or freeze for whatever reason, I could end up sending many messages to the queue, and with nobody to consume them, I could leak a lot of keys in there (until the server restarts or is declared dead and the queue is purge).</p>\n<p>Also, how to I handle the case when a server is frozen, I push a command \u201cstart working on file 1\u201d, more commands for files 2 to N, and then queue a work item \u201cabort working on file 1\u201d. When the server unfreeze, it will see the first command, start working on file 1, even though later in the queue, there is a stop order.</p>\n<p>How can I construct a command queue that allows cancelling commands, without requiring the consumer to read the entire queue before processing commands?</p>\n<h4>Failure Detection</h4>\n<p>I also need to be able to handle failure of a worker. In my case, I don\u2019t need to handle retrying a work item, since the file was on the same server that crashed and won\u2019t be available anyway. I just need to skip over to the next item in the queue that is on a different server.</p>\n<p>I\u2019m not sure how I can achieve this without having another set of servers that monitor the health of the workers. I would like to be able to do this in a distributed fashion, with a set of servers that periodically \u201ccheck\u201d the state of the other servers, and can detect deadlock/failures and intervene.</p>\n<p>My idea is that each server would periodically update a \u201ckeep alive\u201d key, as well as store somewhere the list of work items that it is working on, like <code>(..., TIMESTAMP, SERVER_ID) = \"\"</code>. Every polling_interval / 2, the server would clear this key, and create a new one. Now, \u201ccheckers\u201d would <code>get_range(begin: (..., 0), end (..., NOW))</code>, and all results would be server that have died.</p>\n<pre><code>(..., \"server_watchdog\", &lt;SECONDS_SINCE_EPOCH&gt;, SERVER_ID) = ''\n(..., \"server_tasks\", &lt;SERVER_ID&gt;, &lt;FILE_ID&gt;) = 'started at TS, currently at X%'\n</code></pre>\n<p>I <em>think</em> that even if multiple servers do the same check, they would not stomp on each other (at worse, they would conflict).</p>\n<p><strong>Question <span class=\"hashtag\">#3:</span></strong> is this the best approach, or are there any simpler solutions?</p>\n<h3>Performance of Watches</h3>\n<p>Watches are created on the client, and there is a max numbers of them per database handle. Right now, I only need one key per server, so I don\u2019t think I\u2019ll have issues there.</p>\n<p>But watches are also handled by the storage actors, which as an <code>AsyncMap&lt;Key&gt;</code> which contains all the keys that are watched somewhere. Looking at the code, each Set or ClearRange mutation must check this map for a watch (and trigger it if found).</p>\n<p>Since all my watched server keys will be in the same subspace, it is highly probably that they will be in the same shard (or maybe across two shards), so handled by the same storage node.</p>\n<p><strong>Question <span class=\"hashtag\">#4</span></strong>: Will this impact negatively that storage node if it has a lot of keys in the AsyncMap? The current implementation uses <code>std::map</code>, but I don\u2019t know what is algorithm complexity looks like. Does this scale to thousands / tens of thousands of watch? It is queries for every key mutate in the shards handled by the storage node, so even if it is O(1) it would become O(N) for inserting N keys in the db\u2026</p>\n<p>Looking at the code, I\u2019m not sure what happens when using double/triple redundancy. If a watch is set on a key that is replicated on 3 storage nodes, are the 3 nodes all checking the same watch? Or only one of them check all the watches? Or the watches are load balanced across the 3 storage nodes?</p>\n<p>What happens when a storage node dies/restarts? Or if the shard is moved somewhere else?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2019-05-23T18:39:44.516Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 600,
        "reads": 114,
        "readers_count": 113,
        "score": 3112.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 4,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/sketching-out-a-partition-assignment-strategy/1492",
            "internal": true,
            "reflection": true,
            "title": "Sketching out a partition assignment strategy",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 4
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1321,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-05-26T00:42:43.538Z",
        "cooked": "<p>I went and read the watch code, and thankfully there isn\u2019t too much of it.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"1\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p><strong>Question <span class=\"hashtag-raw\">#1</span></strong> : I will have thousands of such keys, which will be stored in the same subspace so probably store on the same storage node (or maybe two if the subspace spans two shards). Will this create too much load on that particular fdb storage node that will have tons of watches ?</p>\n</blockquote>\n</aside>\n<p>Watches get load balanced in the same way that reads do.  If a storage server has too many pending watches, then it will cancel the watch and indicate to the client that it should poll for changes instead of having an outstanding request against the server.  This is controlled by the <code>MAX_STORAGE_SERVER_WATCH_BYTES</code> knob.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"1\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p><strong>Question <span class=\"hashtag-raw\">#2</span></strong> : In what circumstances can a watch become \u201cdead\u201d? If a server has a callback on a Watch, but for any reason it dies (during a cluster event) or the client does not receive the message when the watch triggers, is it possible for the thing to deadlock? Do I need an additional polling system that checks things every X minutes, and rely on watch only to shorten the latency?</p>\n</blockquote>\n</aside>\n<p>If an fdbserver dies, you\u2019ll end up getting an error back from the future that is your watch, and you\u2019ll need to queue up another watch, which will then be against a (hopefully) live different fdbserver.  If packets are dropped from the server to the client, the connection will break, which will show up as a failure in a similar way then.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"1\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p><strong>Question <span class=\"hashtag-raw\">#3:</span></strong> is this the best approach, or are there any simpler solutions?</p>\n</blockquote>\n</aside>\n<p>Either a timestamp per item claimed by a worker or a timestamp per worker with the items it has claimed seem like the two ways you could possibly store \u201cliveness\u201d in FoundationDB.  If you see too much contention on servers doing the same check, you could use the same tricks that the <a href=\"https://github.com/apple/foundationdb/blob/master/layers/containers/highcontention/queue.py\">high contention fdb queue</a> uses.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"1\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p><strong>Question <span class=\"hashtag-raw\">#4</span></strong> : Will this impact negatively that storage node if it has a lot of keys in the AsyncMap?</p>\n</blockquote>\n</aside>\n<p>I mean, you\u2019re correct that checking for watches is done inline with loading mutations into the versioned tree we can server reads from.  I would hope that the shedding of watches done by <code>MAX_STORAGE_SERVER_WATCH_BYTES</code> is sufficient to prevent you from completely grinding a storage server into the ground via watches to some degree, but it wouldn\u2019t surprise me if there exist some pathological cases here. <img src=\"https://emoji.discourse-cdn.com/twitter/confused.png?v=12\" title=\":confused:\" class=\"emoji\" alt=\":confused:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>I think my other answers have covered most of the remaining questions, but in short:<br>\nYes, watches are load balanced across copies of the data, and it only goes to one of them.<br>\nMost failure cases you\u2019re concerned about will show up as an error in the watch future, which you\u2019ll then need to initiate another watch.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-26T00:42:43.538Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 22,
        "reads": 92,
        "readers_count": 91,
        "score": 143.4,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/master/layers/containers/highcontention/queue.py",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/queue.py at master \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 41
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1324,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-26T11:23:08.908Z",
        "cooked": "<p>Thanks!</p>\n<p>So the way I see it:</p>\n<ul>\n<li>\n<p>if an error occurs somewhere, the client <em>should</em> see an error, but it can happen after some timeout expires (socket timeout, watchdog timer that cancels a list of pending futures,  etc\u2026). This could be an issue if the number of messages that can be published within this timeout is large enough to fill up the receiver\u2019s inbox\u2026 Thankfully in my case I don\u2019t anticipate a lot of events per second per queue, but this is something to keep in mind</p>\n</li>\n<li>\n<p>there are a lot of different error codes that can happen related to watch, and it could get a bit tricky writing the correct code for a watch loop that handle all the cases (false positive triggers, retrying, etc\u2026)</p>\n</li>\n</ul>\n<p>I am in a position where the thread that wakes up when a watch fires can quickly determine that it was a false positive and nothing was changed, so this is a bit simpler to implement. But again this means that you need at least some experience with the behavior of watches to write correct code\u2026</p>\n<p>Hopefully someone has already been through all the corner cases and could enlighten us <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-26T15:45:40.536Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 91,
        "readers_count": 90,
        "score": 33.2,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1330,
        "name": "Rinat Abdullin",
        "username": "abdullin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/abdullin/{size}/83_2.png",
        "created_at": "2018-05-27T10:35:44.278Z",
        "cooked": "<p>It also appears that the upcoming FoundationDB release will contain improvements applicable to watches:</p>\n<blockquote>\n<p><strong>Performance</strong>: Load balancing temporarily avoids communicating with storage servers that have fallen behind.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p><strong>Fixes</strong>: Watches registered on a lagging storage server would take a long time to trigger.</p>\n</blockquote>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-27T10:35:44.278Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 89,
        "readers_count": 88,
        "score": 27.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Rinat Abdullin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 118,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1344,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-29T17:15:44.689Z",
        "cooked": "<p>I have a working prototype, and the performances looks correct for now, on a small dataset.</p>\n<h4>Mini benchmark</h4>\n<p>The test creates a backlog of 5,000 workitems, scheduled on 500 uniques queues (10 per), and scheduled accross 10 workers.</p>\n<p>A few remarks:</p>\n<ul>\n<li>the 10 workers are running inside the same process, so they share the same client network thread</li>\n<li>the cluster runs locally, with 4 process (<code>configure ssd single</code>)</li>\n<li>each work item is immediately completed, the goal is to measure the overhead of the scheduling.</li>\n</ul>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/9e8d8b65297665be10e80f35a153c08d2507a271.png\" title=\"image.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/original/1X/9e8d8b65297665be10e80f35a153c08d2507a271.png\" alt=\"image\" width=\"690\" height=\"429\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/9e8d8b65297665be10e80f35a153c08d2507a271_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">image.png</span><span class=\"informations\">939\u00d7584 10.9 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></p>\n<p>This is the worst-case scenario, where work items for each queue are randomly distribued among the 10 workers, so the next work item for each will almost always be on a different server (so a command must be sent).</p>\n<p>The red line represents the initial version that opens the Directory Layer on every transaction, and each worker process commands sequentially.</p>\n<p>For the blue line, the worker process commands for different queues concurrently, but serialize items per queue.</p>\n<p>The green line uses cached Directory Subspace instances, in order to reduce the number of reads at the start of each transactions. Execution time is almost twice as fast as the red curve.</p>\n<p>All three cases are linear, but we can clearly see the impact of not caching the directory subspace prefixes.</p>\n<p>Unfortunately, the code does not handle timeout and detection of dead servers, so I expect the runtime to go up again\u2026</p>\n<h4>Sample transaction logs:</h4>\n<p>Once a watch is trigger, callback will pop the next command from the server queue:</p>\n<pre><code class=\"lang-auto\">\u250c  oper. \u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500 start \u2500\u2500\u2500\u2500 end \u2500\u2500 duration \u2500\u2500\u252c\u2500 sent  recv \u2510\n\u2502 0   R \u00b0\u2502 ###############$                    \u2502 T+  0.019 ~   8.061 (  8,042 \u00b5s) \u2502    61   164 \u2502 GetRange fGT{(24, 2985, \"server_commands\", \"SRV001\")} &lt;= k &lt; fGE{(24, 2985, \"server_commands\", \"SRV001\").&lt;FF&gt;}, limit(1), Exact =&gt; 1 result(s), has_more\n\u2502 1   c  \u2502 _______________`                    \u2502 T+  8.066 ~   8.074 (      7 \u00b5s) \u2502    43       \u2502 Clear (24, 2985, \"server_commands\", \"SRV001\", @64883287936080-1#1)\n\u2502 2   Co\u00b0\u2502 _______________.################### \u2502 T+  8.077 ~  17.801 (  9,724 \u00b5s) \u2502             \u2502 Commit\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt; Read 164 bytes and Committed 115 bytes in 17.831 ms and 1 attempt(s)\n</code></pre>\n<p>The work item will be schedule on some thread, which will read the work item and original data in //</p>\n<pre><code class=\"lang-auto\">Transaction #609 (read/write, 3 operations, '#' = 0.5 ms, started 17:05:06.2094163Z, ended 17:05:06.2274629Z)\n\u250c  oper. \u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500 start \u2500\u2500\u2500\u2500 end \u2500\u2500 duration \u2500\u2500\u252c\u2500 sent  recv \u2510\n\u2502 0   G *\u2502 ##################################$ \u2502 T+  0.005 ~  17.515 ( 17,510 \u00b5s) \u2502    38   205 \u2502 Get (24, 2985, \"schedules_meta\", {55555555-5555-5555-4344-e061000001b9}) =&gt; {\"id\":\"55555555-5555-5555-4344-e061000001b9\",\"usr\":\"DOMACME\\\\dupond\",\"tid\":\"aaaa...044\",\"dt\":\"2018-05-29T17:05:04.9483179Z\",\"ix\":0,\"st\":0,\"act\":\"SRV006\",\"r\":false}\n\u2502:0   G *\u2502 ##################################$ \u2502 T+  0.012 ~  17.506 ( 17,494 \u00b5s) \u2502    36   560 \u2502 Get (24, 2985, \"tickets_meta\", {aaaaaaaa-aaaa-aaaa-e5ff-cc3100000003}) =&gt; {\"id\":\"aaaaaaaa-aaaa-aaaa-e5ff-cc3100000003\",\"usr\":\"DOMACME\\\\dupond\",\"q\":\"VIRTUA...e\"},\"ft\":0,\"a\":\"SRV006\",\"loc\":\"wd://srv006/Queues/VIRTUALQ/144/TheKey_7E9B6DBB\"}\n\u2502 2   Co \u2502 __________________________________. \u2502 T+ 17.540 ~  17.594 (     53 \u00b5s) \u2502             \u2502 Commit\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt; Read 765 bytes in 17.598 ms and 1 attempt(s)\n</code></pre>\n<p>Then, when the work item is complete, a single transaction will:</p>\n<ul>\n<li>check that the work item is still scheduled</li>\n<li>remove the item and its entry in the queue</li>\n<li>check the next item in the queue</li>\n<li>if there is one, post a message to the corresponding server</li>\n</ul>\n<pre><code class=\"lang-auto\">Transaction #568 (read/write, 10 operations, '#' = 1.0 ms, started 17:05:06.1642960Z, ended 17:05:06.2194419Z)\n\u250c  oper. \u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500 start \u2500\u2500\u2500\u2500 end \u2500\u2500 duration \u2500\u2500\u252c\u2500 sent  recv \u2510\n\u2502 0   G *\u2502 ###########################:                            \u2502 T+ 10.797 ~  32.669 ( 21,872 \u00b5s) \u2502    46    12 \u2502 Get (24, 2985, \"schedules_status\", {55555555-5555-5555-4344-e061000000ab}, \"slot\") =&gt; &lt;00&gt;&lt;00&gt;;&lt;02&gt;&lt;D1&gt;TLO&lt;00&gt;&lt;05&gt;&lt;00&gt;&lt;01&gt;\n\u2502 1   c  \u2502 ___________________________`                            \u2502 T+ 32.672 ~  32.674 (      1 \u00b5s) \u2502    43       \u2502 Clear (24, 2985, \"devices_queues\", \"PRN0017\", @64883287936079-5#1)\n\u2502 2   c  \u2502 ___________________________`                            \u2502 T+ 32.674 ~  32.675 (      1 \u00b5s) \u2502    38       \u2502 Clear (24, 2985, \"schedules_meta\", {55555555-5555-5555-4344-e061000000ab})\n\u2502 3   cr \u2502 ___________________________`                            \u2502 T+ 32.677 ~  32.678 (      1 \u00b5s) \u2502    82       \u2502 ClearRange (24, 2985, \"schedules_status\", {55555555-5555-5555-4344-e061000000ab}).&lt;00&gt; &lt;= k &lt; (24, 2985, \"schedules_status\", {55555555-5555-5555-4344-e061000000ab}).&lt;FF&gt;\n\u2502 4   c  \u2502 ___________________________`                            \u2502 T+ 32.679 ~  32.680 (      1 \u00b5s) \u2502    60       \u2502 Clear (24, 2985, \"schedules_by_ticket\", {aaaaaaaa-aaaa-aaaa-e5ff-cc3100000002}, {55555555-5555-5555-4344-e061000000ab})\n\u2502 5   R \u00b0\u2502 ___________________________$$                           \u2502 T+ 32.686 ~  34.001 (  1,315 \u00b5s) \u2502    62    59 \u2502 GetRange fGE{(24, 2985, \"devices_queues\", \"PRN0017\").&lt;00&gt;} &lt;= k &lt; fGE{(24, 2985, \"devices_queues\", \"PRN0017\").&lt;FF&gt;}, limit(1) =&gt; 1 result(s), has_more\n\u2502 6   G \u00b0\u2502 _____________________________x#####;                    \u2502 T+ 34.464 ~  39.201 (  4,737 \u00b5s) \u2502    38   205 \u2502 Get (24, 2985, \"schedules_meta\", {55555555-5555-5555-4344-e061000000ac}) =&gt; {\"id\":\"55555555-5555-5555-4344-e061000000ac\",\"usr\":\"DOMACME\\\\dupond\",\"tid\":\"aaaa...017\",\"dt\":\"2018-05-29T17:05:04.8936595Z\",\"ix\":1,\"st\":0,\"act\":\"SRV006\",\"r\":false}\n\u2502 7   a  \u2502 ___________________________________`                    \u2502 T+ 39.641 ~  39.671 (     29 \u00b5s) \u2502    34       \u2502 Atomic_Add (24, 2985, \"server_commands\", \"SRV006\"), &lt;01 00 00 00&gt;\n\u2502 8   a  \u2502 ___________________________________`                    \u2502 T+ 39.780 ~  39.798 (     18 \u00b5s) \u2502   166       \u2502 Atomic_VersionStampedKey (24, 2985, \"server_commands\", \"SRV006\", @?#1), &lt;7B 22 63 6D 64 22 3A 22 70 72 69 6E 74 22 2C 22 73 69 64 22 3A 22 35 35 35 35 35 35 35 35 2D 35 35 35 35 2D 35 35 35 35 2D 34 33 34 34 2D 65 30 36 31 30 30 30 30 30 30 61 63 22 2C 22 74 69 64 22 3A 22 61 61 61 61 61 61 61 61 2D 61 61 61 61 2D 61 61 61 61 2D 65 35 66 66 2D 63 63 33 31 30 30 30 30 30 30 32 66 22 2C 22 64 65 76 22 3A 22 50 52 4E 30 30 31 37 22 7D&gt;\n\u2502 9   Co*\u2502 ____________________________________################### \u2502 T+ 39.803 ~  55.105 ( 15,303 \u00b5s) \u2502             \u2502 Commit\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt; Read 276 bytes and Committed 679 bytes in 55.115 ms and 1 attempt(s)\n</code></pre>\n<p>There are some optimization possible (I need to read more data than needed in some cases), and also the keys are currently very long (subspaces use a descriptive string to help debugging).</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-29T17:21:08.399Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 5,
        "reads": 84,
        "readers_count": 83,
        "score": 41.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/9e8d8b65297665be10e80f35a153c08d2507a271.png",
            "internal": false,
            "reflection": false,
            "title": "9e8d8b65297665be10e80f35a153c08d2507a271.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1346,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-29T20:22:21.404Z",
        "cooked": "<p>Looks like I forgot to release the handbrake all along!</p>\n<p>Reading batches of commands from the queue (instead of only the next one) yields more than 3x improvement (and more than 7x compared to the initial version) with 5000 items scheduled in 3.6 seconds.</p>\n<p><strong><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/ea3d345881e5e97daf207fa2766426607143c552.png\" title=\"image.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/original/1X/ea3d345881e5e97daf207fa2766426607143c552.png\" alt=\"image\" width=\"671\" height=\"499\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/ea3d345881e5e97daf207fa2766426607143c552_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">image.png</span><span class=\"informations\">833\u00d7620 18.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></strong><br>\n<em>Time required to drain 5000 work items</em></p>\n<p>I\u2019m currently limiting myself to read the next 10 commands from a server\u2019s queue:</p>\n<pre><code class=\"lang-auto\">Transaction #541 (read/write, 12 operations, '#' = 0.5 ms, started 20:19:09.0370983Z, ended 20:19:09.0581559Z)\n\u250c  oper. \u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500 start \u2500\u2500\u2500\u2500 end \u2500\u2500 duration \u2500\u2500\u252c\u2500 sent  recv \u2510\n\u2502 0   R \u00b0\u2502 ################$                         \u2502 T+  0.007 ~   8.535 (  8,527 \u00b5s) \u2502    61  1640 \u2502 GetRange fGT{(24, 3028, \"server_commands\", \"SRV002\")} &lt;= k &lt; fGE{(24, 3028, \"server_commands\", \"SRV002\").&lt;FF&gt;}, limit(10), Exact =&gt; 10 result(s), has_more\n\u2502 1   c  \u2502 ______________________`                   \u2502 T+ 11.578 ~  11.594 (     16 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894930977916-0#1)\n\u2502 2   c  \u2502 ______________________`                   \u2502 T+ 11.594 ~  11.603 (      8 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931041440-0#1)\n\u2502 3   c  \u2502 ______________________:;                  \u2502 T+ 11.603 ~  11.838 (    235 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931130481-1#1)\n\u2502 4   c  \u2502 _______________________`                  \u2502 T+ 11.839 ~  11.840 (      2 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931187803-4#1)\n\u2502 5   c  \u2502 _______________________`                  \u2502 T+ 11.840 ~  11.841 (      1 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931188681-0#1)\n\u2502 6   c  \u2502 _______________________`                  \u2502 T+ 11.841 ~  11.842 (      1 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931206271-1#1)\n\u2502 7   c  \u2502 _______________________`                  \u2502 T+ 11.842 ~  11.842 (      1 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931215875-2#1)\n\u2502 8   c  \u2502 _______________________`                  \u2502 T+ 11.842 ~  11.843 (      0 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931259458-2#1)\n\u2502 9   c  \u2502 _______________________`                  \u2502 T+ 11.843 ~  11.843 (      0 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931273832-0#1)\n\u2502 10  c  \u2502 _______________________`                  \u2502 T+ 11.843 ~  11.844 (      0 \u00b5s) \u2502    43       \u2502 Clear (24, 3028, \"server_commands\", \"SRV002\", @64894931306928-4#1)\n\u2502 11  Co\u00b0\u2502 _______________________X################# \u2502 T+ 11.847 ~  20.833 (  8,987 \u00b5s) \u2502             \u2502 Commit\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt; Read 1,640 bytes and Committed 1,150 bytes in 20.837 ms and 1 attempt(s)\n</code></pre>\n<p>This is a bit scary because when the transaction commits, I\u2019m holding 10 messages in a stack on some thread, that could get killed for any reason, and dropping all of them at once without any trace in the db <img src=\"https://emoji.discourse-cdn.com/twitter/confused.png?v=9\" title=\":confused:\" class=\"emoji\" alt=\":confused:\"> \u2026 but the perf improvement is worth it!</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T14:52:30.448Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 75,
        "readers_count": 74,
        "score": 15.0,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/ea3d345881e5e97daf207fa2766426607143c552.png",
            "internal": false,
            "reflection": false,
            "title": "ea3d345881e5e97daf207fa2766426607143c552.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1348,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T08:04:13.438Z",
        "cooked": "<p><strong>EDIT</strong> : this was caused by something else!</p>\n<blockquote>\n<p>When increasing the number of workers (each with their own message queue), I started noticing a lot of conflicts on the transaction that pop messages from the queues.</p>\n<p>This is unexpected because there is only one producer and one consumer per queue, so no reason for conflict.</p>\n<p>After some time, I realized that the conflict is cause by insertion into neighboring queues by other transaction, that create a sort of \u201cfalse conflict\u201d.<br>\nA message queue looks like</p>\n<ul>\n<li><code>(..., 'Q', SRVID, ) = &lt;counter&gt;</code></li>\n<li><code>(..., 'Q', SRVID, &lt;VS+0&gt;) = {message}</code></li>\n<li><code>(..., 'Q', SRVID, &lt;VS+1&gt;) = {message}</code></li>\n<li>\u2026</li>\n</ul>\n<p>The consumer watches the counter key, and then does a GetRange(\u2026) on the message, followed by a clear for message consumed.<br>\nThe producer appends a message using a VersionStamped key, and atomically increments the counter key.</p>\n<p>The conflicts are created because the GetRange(\u2026) \u201cleaks\u201d into the counter key of the next queue:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33.png\" data-download-href=\"/uploads/short-url/qCqPaX4pKxoepB2MeJ2FhpoqJtF.png?dl=1\" title=\"image\" rel=\"noopener nofollow ugc\"><img src=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33_2_690x247.png\" alt=\"image\" data-base62-sha1=\"qCqPaX4pKxoepB2MeJ2FhpoqJtF\" width=\"690\" height=\"247\" srcset=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33_2_690x247.png, https://global.discourse-cdn.com/foundationdb/original/1X/ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33.png 1.5x, https://global.discourse-cdn.com/foundationdb/original/1X/ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33.png 2x\" data-dominant-color=\"F4F2F2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">727\u00d7261 28.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>The transaction that pops from queue A, has a read conflict range that includes the counter key of queue B. If another transaction push a message to queue B, it will increment the counter for B. The conflict resolution algorithm does not care if the result of GetRange would not be changed if the <em>value</em> of the excluded last key is changed, and will conflict the transaction anyway.</p>\n<p>Changing the GetRange to be a snapshot read fixes the issue for me (does not create conflicts), but only because I have a single consumer per queue. If I had multiple consumers per queue, I\u2019m not sure how I could pop from the queue without conflicts.</p>\n<p>Getting rid of conflicts, I was able to go from ~1,500 to ~1,666 work items processed per second (~10% improvement)</p>\n</blockquote>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T15:39:31.810Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 72,
        "readers_count": 71,
        "score": 19.4,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33.png",
            "internal": false,
            "reflection": false,
            "title": "ba90b2e9fa3cf9e6d0c261fb1132765dca6d7a33.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1350,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T09:25:09.669Z",
        "cooked": "<p>A look at the time taken to process an item, given its initial position in the queue.</p>\n<p>Test:</p>\n<ul>\n<li>Randomly assign all work items in all the queues</li>\n<li>Plot the time taken to process an item, given its initial position in its queue</li>\n<li>Compare the times by varying the number of concurrent queues (5, 10, 20)</li>\n</ul>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/6143a26b5d85fb08069376cd1b5d58eed9640375.png\" title=\"image.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/original/1X/6143a26b5d85fb08069376cd1b5d58eed9640375.png\" alt=\"image\" width=\"690\" height=\"443\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/6143a26b5d85fb08069376cd1b5d58eed9640375_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">image.png</span><span class=\"informations\">966\u00d7621 13.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></p>\n<p>Average delay between items:</p>\n<ul>\n<li>\n<strong>5</strong> queues: <strong>29 ms</strong>\n</li>\n<li>\n<strong>10</strong> queues: <strong>35 ms</strong>\n</li>\n<li>\n<strong>20</strong> queues: <strong>60 ms</strong>\n</li>\n</ul>\n<p>It seems that above 10-15 concurrent queues, the latency per item starts to grow exponentially. I\u2019m guessing I\u2019m reaching the limits of my test (simulating all the workers in a single process).</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T09:25:09.669Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 70,
        "readers_count": 69,
        "score": 24.0,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/6143a26b5d85fb08069376cd1b5d58eed9640375.png",
            "internal": false,
            "reflection": false,
            "title": "6143a26b5d85fb08069376cd1b5d58eed9640375.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1351,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T13:54:07.888Z",
        "cooked": "<p>Another test, that attempts to simulate 1,000 producers that schedule jobs at random interval (with random pause from 250ms to 5 sec), spread over 1,000 random queues over 10 servers, running for 30 seconds. Each producer has a small probabilty (~1%) to switch queue or server during the test.</p>\n<p><em>The test runs locally, so does not include network latency!</em></p>\n<p>The latency measured is \u201cend to end\u201d, meaning: each work item has a \u201cCreated\u201d and \u201cProcessed\u201d timestamp.</p>\n<p>The delay includes all of this:</p>\n<ul>\n<li>creating a work item with \u201cCreated\u201d timestamp (BEGIN)</li>\n<li>serializing the work item</li>\n<li>insertion into the database</li>\n<li>Posting a message to the remote server\u2019s queue</li>\n<li>If the queue is empty, updating the watched key of that server.</li>\n<li>Watch on the remote server triggering</li>\n<li>worker thread reads a batch of commands from its command queue</li>\n<li>Worker reads the original work item payload</li>\n<li>Worker stamps the work item with a \u201cProcessed\u201d timestamp (END).</li>\n<li>Notifying the next server in the queue by touching its watched key.</li>\n</ul>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51.png\" title=\"image.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51_2_689x298.png\" alt=\"image\" width=\"689\" height=\"298\" srcset=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51_2_689x298.png, https://global.discourse-cdn.com/foundationdb/optimized/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51_2_1033x447.png 1.5x, https://global.discourse-cdn.com/foundationdb/original/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51.png 2x\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">image.png</span><span class=\"informations\">1344\u00d7582 40.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div><br>\n<em>Legend: X is the time elapsed since start of the test, Y is the latency of a work item completed at that time.</em></p>\n<p>There is an initial spike at the start (which may be caused by cold caches, JITing, etc\u2026), but then it seems to hover around 100ms latency, with typical latency between 50ms and 150ms. After the initial spike, there are some outliers at ~300ms.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T14:17:50.579Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 67,
        "readers_count": 66,
        "score": 23.4,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/e839742a7616f9076a7e652ff1cc1d6343e58c51.png",
            "internal": false,
            "reflection": false,
            "title": "e839742a7616f9076a7e652ff1cc1d6343e58c51.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1352,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-30T14:39:20.682Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"7\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>The transaction that pops from queue A, has a read conflict range that includes the counter key of queue B.</p>\n</blockquote>\n</aside>\n<p>If <code>(Q, B)</code> is really the key resolved to by your key selector for the end of the range, then it shouldn\u2019t be part of the conflict range (conflict ranges are exclusive of the end key). If your selector happens to resolve to a key after <code>(Q, B)</code>, though, then maybe it\u2019s possible an update to <code>(Q, B)</code> could conflict.</p>\n<p>I would actually expect, though, that the conflict range for your query to end at <code>(Q, A).\\xFF</code> regardless of what the end selector resolves to. This is because the answer to the query doesn\u2019t depend on anything after (or including) that key. If your conflict range is larger than that, that may indicate a bug.</p>\n<p>If you are having conflicts of that nature, then a workaround could be to use snapshot reads and then manually set the conflict range to end at an  appropriate key. It might also be a good test to see if the conflict ranges are actually larger than necessary or if there is a different conflict involved here.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T14:39:20.682Z",
        "reply_count": 2,
        "reply_to_post_number": 7,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 65,
        "readers_count": 64,
        "score": 23.0,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1353,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T14:48:56.067Z",
        "cooked": "<p>I used a snapshot read and conflicts went away.</p>\n<p>One thing to note, I do the range read with limit = 10, and streaming mode Exact. Could this have an impact? First iteration had \u201climit = 1\u201d and conflicts started appearing when I used limit = 10. My hypothesis is that with limit=1, the end was the next command in the same queue, while with limit = 10 I could overflow past to the next queue\u2026</p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T14:48:56.067Z",
        "reply_count": 1,
        "reply_to_post_number": 10,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 62,
        "readers_count": 61,
        "score": 22.4,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 12,
          "username": "ajbeamon",
          "name": "A.J. Beamon",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1354,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T14:51:14.130Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"10\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>It might also be a good test to see if the conflict ranges are actually larger than necessary or if there is a different conflict involved here.</p>\n</blockquote>\n</aside>\n<p>Also, that\u2019s another example where being able to extract the actual list of mutations, read and write range sent by the client to the cluster could help us here <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"><br>\nMy transaction logs only see what key selectors I used at the binding level, but I have no idea how the range was split and transformed into a conflict range by the native actor.</p>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T14:51:14.130Z",
        "reply_count": 0,
        "reply_to_post_number": 10,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 62,
        "readers_count": 61,
        "score": 17.4,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1355,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-30T15:14:07.369Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"11\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>I used a snapshot read and conflicts went away.</p>\n</blockquote>\n</aside>\n<p>Right, but that isn\u2019t enough to conclude whether the conflict was from something outside of the range being read (which I claimed isn\u2019t necessary and could possibly indicate a bug) or from something inside the range. If you manually set the conflict ranges to the range you are reading, we can see if the conflicts are present or not and make that conclusion.</p>",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T15:14:07.369Z",
        "reply_count": 1,
        "reply_to_post_number": 11,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 61,
        "readers_count": 60,
        "score": 22.2,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1356,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T15:26:52.986Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"13\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>If you manually set the conflict ranges to the range you are reading, we can see if the conflicts are present or not and make that conclusion.</p>\n</blockquote>\n</aside>\n<p>Ok so I added a read conflict range on <code>(Q, ID).\\x00</code> \u2026 <code>(Q, ID).\\xFF</code> and conflicts are back. One observation: it is always only a single retry.</p>\n<p>Without knowing exactly what caused the conflict, I don\u2019t have any easy way to know what\u2019s causing this, since there are thousands of transactions flying around.</p>",
        "post_number": 14,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T15:30:13.032Z",
        "reply_count": 1,
        "reply_to_post_number": 13,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 59,
        "readers_count": 58,
        "score": 21.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/14",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1357,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-30T15:34:08.439Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"KrzysFR\" data-post=\"14\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Without knowing exactly what caused the conflict, I don\u2019t have any way what\u2019s causing this and there are thousands transactions flying around.</p>\n</blockquote>\n</aside>\n<p>Yeah, as you know we don\u2019t have much tooling support for identifying what keys are conflicting, though this is certainly something we\u2019re interested in.</p>\n<p>Your last test tells us that there are conflicts happening from someone writing to this same queue, and your observation about setting the limits probably indicates that it\u2019s not happening at the beginning of the queue. Is it possible that someone is appending something to the queue simultaneously as your read, and if your range read reads the whole queue in it gets a conflict? Possibly you could try setting the end of your conflict range to <code>lastKeyRead+\\x00</code> to see if there continue to be conflicts (it\u2019s possible this could be the correct conflict range for you in general, depending on your situation).</p>",
        "post_number": 15,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T15:34:25.498Z",
        "reply_count": 1,
        "reply_to_post_number": 14,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 62,
        "readers_count": 61,
        "score": 17.4,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/15",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1358,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-30T15:37:38.960Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"15\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>Is it possible that someone is appending something to the queue simultaneously as your read, and if your range read reads the whole queue in it gets a conflict?</p>\n</blockquote>\n</aside>\n<p><img src=\"https://emoji.discourse-cdn.com/twitter/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji only-emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>Since I have two types of queues, I mixed them. This is the <em>server</em> command queues, and since the version where I made things concurrent, a server can now work on multiple work queues in parallel, so can receive multiple commands to work on items from multiple queues <em>at the same time</em> and <em>from multiple remote servers</em>.</p>\n<p>So what happens is probably someone appends another command to this server !</p>\n<p>oops <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>You are right, it would be really helpful to have a way to pinpoint the cause of conflicts. The dream feature would be to have an error message like \u201cyour transaction was <em>probably</em> conflicted by that transaction other there, on that key (or range of key)\u201d. This would save us a lot of time ! Even with a fully detailed log of transactions, I was not able to quickly pinpoint my error.</p>",
        "post_number": 16,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-05-30T15:44:51.259Z",
        "reply_count": 0,
        "reply_to_post_number": 15,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 63,
        "readers_count": 62,
        "score": 62.6,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 3
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/16",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1375,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-06-04T16:25:19.438Z",
        "cooked": "<p>I\u2019m trying to get the list of error codes that a Watch can throw but mean \u201cyou need to retry\u201d vs \u201cthis is a real error\u201d.</p>\n<p>See below for the pseudo-code.</p>\n<p>Questions:</p>\n<ol>\n<li>\n<p>What are the error codes that are safe to retry for a Watch?</p>\n</li>\n<li>\n<p>Also, I think that I should probably wait a random amount of time before retrying (with exponential backoff?) to prevent hammering the database\u2026</p>\n</li>\n<li>\n<p>Can I use <code>fdb_transaction_on_error()</code> for this case also? It seems that it is tailored for general errors that happen inside a transaction or during commit. But here this is happening outside of the transaction, so maybe we need a different list of codes?</p>\n</li>\n<li>\n<p>is there any easy way to make the watches fault to test that my code is handling all cases properly?</p>\n</li>\n</ol>\n<p><strong>EDIT</strong>: looking at the code (<code>watchValue(..)</code> in NativeAPI.actor.cpp), it looks like the implementation already handles some error codes and does wait between errors:</p>\n<ul>\n<li>both <code>error_code_wrong_shard_server</code>/<code>error_code_all_alternatives_failed</code> wait 10 ms before retrying</li>\n<li>\n<code>error_code_timed_out</code> is retried after 10ms also</li>\n<li>\n<code>error_code_watch_cancelled</code> is retried after 1 second</li>\n</ul>\n<p>Any other code waits 10ms (same delay as timed_out) and is thrown back to the caller.</p>\n<p>Looking at this, I\u2019m not sure if I need to bother catching codes because they seem to already be handled.</p>\n<p>I don\u2019t know what I should do if I see <code>too_many_watches</code> though, I don\u2019t really want to have another code path that defaults to polling <img src=\"https://emoji.discourse-cdn.com/twitter/confused.png?v=5\" title=\":confused:\" class=\"emoji\" alt=\":confused:\"></p>\n<hr>\n<p>My algorithm looks like this:</p>\n<ul>\n<li>loop until we get messages (or are cancelled by caller)\n<ul>\n<li>start a transaction to popup next messages, or if none, setup a watch</li>\n<li>if got messages, return</li>\n<li>await the watch for next messages</li>\n<li>try again</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"lang-csharp\">async Task&lt;Message[]&gt; GetNextMessages(string queue, CancellationToken ct)\n{\n  while(!ct.IsCancellationRequested)\n  {\n\n    // get next messages, or setup a watch if none\n    (var items, var watch) = await db.ReadWriteAsync(async tr =&gt;\n    {\n      var items = await PopNextMessagesFromQueue(tr, queue, ....);\n\n      if (items == null)\n      { // nothing, setup the watch\n        return (null, tr.Watch(....));\n      }\n      // we have some items!\n      return (items, null); \n    }, ct);\n\n    if (items != null) return items;\n\n    // wait for next commands\n    try\n    { \n      await watch;\n    }\n    catch(FDBException x)\n    { // the watch failed!\n\n      if (x.Code not in [/* LIST OF RETRYABLE WATCH ERRORS */])\n      { // this is a non recoverable error, abort!\n         throw;\n      }\n      // this is a transient error, try again\n      //TODO: should we wait a bit here?\n    }\n  }\n}\n</code></pre>",
        "post_number": 17,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-06-04T21:51:04.084Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 64,
        "readers_count": 63,
        "score": 32.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/17",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1381,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-04T22:52:59.050Z",
        "cooked": "<p>There are two sets of errors that need to be considered when dealing with watches \u2013 those that come before the watch\u2019s transaction is committed and those that come after.</p>\n<p>Most retryable errors that occur before the transaction is committed will also affect the commit, and so if you are running a retry loop the transaction will be retried anyway. Looking at the code, I\u2019m not sure this is the case for the <code>future_version</code> error, though.</p>\n<p>The other error that you have to watch out for pre-commit is the <code>too_many_watches</code> error. I\u2019m not actually sure there\u2019s a good way to check whether this (or really any other error) is being hit prior to committing, so you\u2019ll have to fall back to the case of checking for errors after commit.</p>\n<p>For errors that occur after the transaction is committed, I mostly just treat them as if the watch fired. In other words, I read the value at my watched key, check if it differs from my previously recorded value, and set a new watch. You may want to do something special in the <code>too_many_watches</code> case, although really the purpose of that error is to encourage you to stay away from that limit. If necessary, the number of allowable watches per client can be changed via database option, though that may have an effect on performance and resource usage. The limit also cannot be set higher than 1 million. Outside of <code>too_many_watches</code>, I don\u2019t think you should expect any errors here that would indicate that you shouldn\u2019t setup a new watch. It is always possible that some sort of bug could result in weird errors coming through, though (e.g. internal_error or broken_promise, etc).</p>\n<p>I don\u2019t think the expectation is that you need to implement a backoff mechanism to use watches. It\u2019s perhaps a little weird that the <code>future_version</code> error not lead to a delay before retrying the transaction, but the default delay there is somewhat small (10ms), and you will end up spending some chunk of that time committing the transaction and getting a new read version to try again.</p>",
        "post_number": 18,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-06-04T22:52:59.050Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 65,
        "readers_count": 64,
        "score": 28.0,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/18",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1401,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-06-06T11:58:50.872Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"18\" data-topic=\"471\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>For errors that occur after the transaction is committed, I mostly just treat them as if the watch fired. In other words, I read the value at my watched key, check if it differs from my previously recorded value, and set a new watch.</p>\n</blockquote>\n</aside>\n<p>Yeah you are probably right, the algorithm is designed that way anyway. I think I\u2019ll add a small 100ms - 500ms delay between retries anyway, so that it could fallback to polling if the error is too many watch or similar without a different path.</p>",
        "post_number": 19,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-06-06T11:58:50.872Z",
        "reply_count": 1,
        "reply_to_post_number": 18,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 59,
        "readers_count": 58,
        "score": 16.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/19",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1403,
        "name": "Geo",
        "username": "gwillis12",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png",
        "created_at": "2018-06-06T16:01:48.681Z",
        "cooked": "<p>Keep up the good work Chris.  You and I are apparently after the same thing \u2013 EDA and FoundationDB.</p>\n<p>Get those Actors lean and scalable, and point me towards any Open Sources Repos you got.</p>",
        "post_number": 20,
        "post_type": 1,
        "posts_count": 28,
        "updated_at": "2018-06-06T16:01:48.681Z",
        "reply_count": 0,
        "reply_to_post_number": 19,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 64,
        "readers_count": 63,
        "score": 27.8,
        "yours": false,
        "topic_id": 471,
        "topic_slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
        "display_username": "Geo",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 298,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/performance-characteristics-of-using-watches-for-distributed-task-scheduling/471/20",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1284,
      1321,
      1324,
      1330,
      1344,
      1346,
      1348,
      1350,
      1351,
      1352,
      1353,
      1354,
      1355,
      1356,
      1357,
      1358,
      1375,
      1381,
      1401,
      1403,
      1416,
      1439,
      1462,
      1473,
      1474,
      1477,
      1481,
      1901
    ]
  },
  "timeline_lookup": [
    [
      1,
      2707
    ],
    [
      2,
      2706
    ],
    [
      3,
      2705
    ],
    [
      5,
      2702
    ],
    [
      9,
      2701
    ],
    [
      17,
      2696
    ],
    [
      19,
      2694
    ],
    [
      22,
      2691
    ],
    [
      23,
      2686
    ],
    [
      24,
      2684
    ],
    [
      26,
      2683
    ],
    [
      27,
      2682
    ],
    [
      28,
      2624
    ]
  ],
  "tags": [
    "performance"
  ],
  "tags_descriptions": {},
  "fancy_title": "Performance characteristics of using Watches for Distributed Task Scheduling",
  "id": 471,
  "title": "Performance characteristics of using Watches for Distributed Task Scheduling",
  "posts_count": 28,
  "created_at": "2018-05-24T13:42:28.764Z",
  "views": 5180,
  "reply_count": 13,
  "like_count": 15,
  "last_posted_at": "2018-08-16T03:57:50.737Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
  "category_id": 9,
  "word_count": 11874,
  "deleted_at": null,
  "user_id": 53,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": "https://global.discourse-cdn.com/foundationdb/original/1X/0819f4ad7c04fe7d847b2f33824849dc70ee6a0c.png",
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_471",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 28,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 6,
  "show_read_indicator": false,
  "thumbnails": [
    {
      "max_width": null,
      "max_height": null,
      "width": 629,
      "height": 316,
      "url": "https://global.discourse-cdn.com/foundationdb/original/1X/0819f4ad7c04fe7d847b2f33824849dc70ee6a0c.png"
    }
  ],
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": null,
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 20,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 68,
        "username": "daverosenthal",
        "name": "Dave Rosenthal",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daverosenthal/{size}/51_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 118,
        "username": "abdullin",
        "name": "Rinat Abdullin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/abdullin/{size}/83_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 298,
        "username": "gwillis12",
        "name": "Geo",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      }
    ],
    "created_by": {
      "id": 53,
      "username": "KrzysFR",
      "name": "Christophe Chevalier",
      "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
    },
    "last_poster": {
      "id": 68,
      "username": "daverosenthal",
      "name": "Dave Rosenthal",
      "avatar_template": "/user_avatar/forums.foundationdb.org/daverosenthal/{size}/51_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/blob/master/layers/containers/highcontention/queue.py",
        "title": "foundationdb/queue.py at master \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 41,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/sketching-out-a-partition-assignment-strategy/1492",
        "title": "Sketching out a partition assignment strategy",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 113,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}