{
  "post_stream": {
    "posts": [
      {
        "id": 6732,
        "name": "Trevor Clinkenbeard",
        "username": "trevor.clinkenbeard",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png",
        "created_at": "2020-04-17T16:47:45.548Z",
        "cooked": "<p>In the following code, <code>populateData</code> does an unnecessary copy of the vector:</p>\n<pre><code class=\"lang-auto\">struct A {\n  vector&lt;int&gt; data;\n\n  ACTOR static Future&lt;Void&gt; populateData(A* self, int size) {\n    vector&lt;int&gt; _data = wait(produce(size));\n    self-&gt;data = std::move(_data);\n  }\n\n  static Future&lt;vector&lt;int&gt;&gt; produce(int size) {\n    return vector&lt;int&gt;(size, 0);\n  }\n};\n</code></pre>\n<p>Calling <code>wait(function_producing_future(args))</code> is a common pattern in FDB code, so reducing the number of copies in this scenario could potentially lead to large performance improvements, as <a href=\"https://github.com/apple/foundationdb/pull/2915\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/pull/2915</a> did. There are also other scenarios where it is possible to move the result of a future, but the actor compiler generates code that creates unnecessary copies.</p>\n<p>The current plan is to create a new class:</p>\n<pre><code class=\"lang-auto\">template&lt;class T&gt;\nstruct MovableSAV : public SAV&lt;T&gt; {\n ...\n};\n</code></pre>\n<p>which overrides the <code>finishSendAndDelPromiseRef</code> function to move the SAV contents instead of copy them. The actor compiler can then detect scenarios where it\u2019s safe to use a <code>MovableSAV</code> instead of <code>SAV</code>. Other changes in the actor compiler can generate code that supports perfect forwarding.</p>\n<p>This issue has already been discussed some with various people at Snowflake and Apple, but I created this forum post as a place for people to post other ideas to help reduce the number of unnecessary copies.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-17T16:47:45.548Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 101,
        "reads": 32,
        "readers_count": 31,
        "score": 528.4,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Trevor Clinkenbeard",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/2915",
            "internal": false,
            "reflection": false,
            "clicks": 4
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 362,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 6734,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2020-04-17T21:36:12.636Z",
        "cooked": "<p>I am not 100% sure but I think this should be possible without introducing this <code>MovableSAV</code> type. I think the following could work:</p>\n<ol>\n<li>Change the contract of <code>SAV</code> so that the future-count is decremented when the callback is called. This would mean that the caller of the callback is not allowed to keep a future or would need to increment the future-count by one more.</li>\n<li>Change the <code>send</code> message to something like this:</li>\n</ol>\n<pre><code class=\"lang-auto\">\ttemplate &lt;class U&gt;\n\tvoid send(U&amp;&amp; value) {\n\t\tASSERT(canBeSet());\n\t\tif (futures == 1 &amp;&amp; Callback&lt;T&gt;::next != this) {\n\t\t\t// we have exactly one future and it is a callback:\n\t\t\tCallback&lt;T&gt;::next-&gt;fire(std::forward&lt;U&gt;(value));\n\t\t\tASSERT(Callback&lt;T&gt;::next == this);\n\t\t\tdelFutureRef();\n\t\t} else {\n\t\t\tnew (&amp;value_storage) T(std::forward&lt;U&gt;(value));\n\t\t\tthis-&gt;error_state = Error::fromCode(SET_ERROR_CODE);\n\t\t\twhile (Callback&lt;T&gt;::next != this) {\n\t\t\t\tCallback&lt;T&gt;::next-&gt;fire(this-&gt;value());\n\t\t\t\tdelFutureRef();\n\t\t\t}\n\t\t}\n\t}\n\n</code></pre>\n<p>This obviously will need a change in the actor-compiler. But if done correctly one could then also do the following:</p>\n<pre><code class=\"lang-auto\">Future&lt;vector&lt;string&gt;&gt; f = someActor();\nvector&lt;string&gt; v = wait(std::move(f));\n</code></pre>\n<p>Or (the more common case):</p>\n<pre><code class=\"lang-auto\">vector&lt;string&gt; v = wait(someActor());\n</code></pre>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-17T21:36:12.636Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 29,
        "readers_count": 28,
        "score": 5.8,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6738,
        "name": "Trevor Clinkenbeard",
        "username": "trevor.clinkenbeard",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png",
        "created_at": "2020-04-17T22:28:09.089Z",
        "cooked": "<p>In the above case where there is only one future and it is a callback, the future-count is already decremented in the callback with <code>SAV&lt;T&gt;::unwait</code>. It also looks like the above send function would not work in cases like:</p>\n<pre><code class=\"lang-auto\">ACTOR Future&lt;vector&lt;int&gt;&gt; listen(Promise p) {\n  vector&lt;int&gt; v = wait(p.getFuture());\n  return v;\n}\n\nACTOR Future&lt;Void&gt; driver() {\n  Promise&lt;vector&lt;int&gt;&gt; promise;\n  Future&lt;vector&lt;int&gt;&gt; future1 = listen(promise.getFuture());\n  promise.send(vector&lt;int&gt;(1000, 0));\n  vector&lt;int&gt; v = wait(promise.getFuture()); // this will hang forever if send simply forwards the sent value, instead of storing it.\n  printf(\"%d\\n\", v.size()); // should print 1000\n  return Void();\n}\n</code></pre>\n<p>As long as promise references exist, we must store the value of the SAV, because future references can be created.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-17T23:31:38.073Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 25,
        "readers_count": 24,
        "score": 10.0,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Trevor Clinkenbeard",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 362,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6749,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-20T08:43:40.833Z",
        "cooked": "<p>In the first sample code, there is also a copy <em>into</em> the SAV to begin with which isn\u2019t necessary.</p>\n<p>In <code>produce()</code>, in order to make a <code>Future&lt;T&gt;</code> from a <code>T</code>, the source object is copied even if it is an rvalue reference because <code>Future</code> only has a constructor for <code>const T &amp;</code> and not <code>T &amp;&amp;</code>.  I verified that this is what is happening by replacing the vector with a struct that prints out move/copy/construct activity.</p>\n<p>Adding a <code>T &amp;&amp;</code> constructor to Future avoids the copy in this situation - where a Future is constructed directly from an rvalue.  I\u2019m not sure how much copying this will save in practice, but unless it is somehow incorrect it can\u2019t hurt to add.</p>\n<p>The constructor is defined as</p>\n<pre><code class=\"lang-auto\">\tFuture(T&amp;&amp; presentValue)\n\t\t: sav(new SAV&lt;T&gt;(1, 0))\n\t{\n\t\tsav-&gt;send(std::forward&lt;T&gt;(presentValue));\n\t}\n</code></pre>\n<p>In playing around with this, I ended up going down a very deep rabbit hole.  I wanted to see what other situations would avoid copying into the SAV from an rvalue, so I wrote an actor with a bunch of return situations in which I would want to avoid copying into the SAV to see if they do.  What I found is lots of extra copies I didn\u2019t expect.  I traced it to that the actor compiler generates <code>a_callback_fire()</code> as taking the result by value instead of const reference.   So I changed the actor compiler, got the results I expected, and was happy right up until I pulled master and saw that this same fix was done 11 days ago.  D\u2019oh!</p>\n<p>That\u2019s okay though, because in the process I learned a lot about the actor compiler generated code.  I also thought of this:  In this pattern,</p>\n<pre><code class=\"lang-auto\">ACTOR static Future&lt;B&gt; produce() {\n\tstate B b;\n\t// call actors, wait for them, add stuff to b, have a great time\n\treturn b;\n}\n</code></pre>\n<p><code>b</code> will be copied into the SAV.  However, using <code>std::move(b)</code> instead will avoid the copy, and should always be done because it should always be valid, I think.  When returning from an actor, the sequence is</p>\n<ul>\n<li>initialize the SAV</li>\n<li>destroy the actor state</li>\n<li>call callbacks</li>\n</ul>\n<p>so at return time any actor state variable could be treated as an rvalue reference because it\u2019s about to be destroyed anyway.  Can anyone think of any reason this is not the case?  If not, it would be neat for the actor compiler to automatically <code>std::move()</code> state variables when they are returned.  At the very least it could recognize the syntax <code>return &lt;exactStateVarName&gt;;</code> because even if the state variable is masked by a same-named local var moving it shoudl still be valid.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-20T08:43:40.833Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 23,
        "readers_count": 22,
        "score": 29.6,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6750,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-20T08:55:54.940Z",
        "cooked": "<aside class=\"onebox githubpullrequest\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/foundationdb/pull/2984\" target=\"_blank\">github.com/apple/foundationdb</a>\n  </header>\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Pull Request\">\n    <svg width=\"60\" height=\"60\" class=\"github-icon\" viewbox=\"0 0 12 16\" aria-hidden=\"true\"><path d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/apple/foundationdb/pull/2984\" target=\"_blank\">Added Future&lt;T&gt;(T &amp;&amp;value) constructor to avoid a copy...</a>\n    </h4>\n\n    <div class=\"branches\">\n      <code>apple:master</code> \u2190 <code>satherton:future-move-t-constructor</code>\n    </div>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2020-04-20\" data-time=\"08:55:07\" data-timezone=\"UTC\">08:55AM - 20 Apr 20 UTC</span>\n      </div>\n\n      <div class=\"user\">\n        <a href=\"https://github.com/satherton\" target=\"_blank\">\n          <img alt=\"satherton\" src=\"https://global.discourse-cdn.com/foundationdb/original/1X/dcab1adc161b25c2cd76455166702f4cdf35a09e.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\">\n          satherton\n        </a>\n      </div>\n\n      <div class=\"lines\" title=\"1 commits changed 1 files with 5 additions and 0 deletions\">\n        <a href=\"https://github.com/apple/foundationdb/pull/2984/files\" target=\"_blank\">\n          <span class=\"added\">+5</span>\n          <span class=\"removed\">-0</span>\n        </a>\n      </div>\n    </div>\n\n  </div>\n</div>\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-20T08:55:54.940Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 24,
        "readers_count": 23,
        "score": 4.8,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/2984",
            "internal": false,
            "reflection": false,
            "title": "Added Future<T>(T &&value) constructor to avoid a copy... by satherton \u00b7 Pull Request #2984 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://github.com/satherton",
            "internal": false,
            "reflection": false,
            "title": "satherton (Steve Atherton) \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://github.com/apple/foundationdb/pull/2984/files",
            "internal": false,
            "reflection": false,
            "title": "Added Future<T>(T &&value) constructor to avoid a copy... by satherton \u00b7 Pull Request #2984 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6752,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-20T11:43:06.538Z",
        "cooked": "<aside class=\"onebox githubpullrequest\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/foundationdb/pull/2986\" target=\"_blank\">github.com/apple/foundationdb</a>\n  </header>\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Pull Request\">\n    <svg width=\"60\" height=\"60\" class=\"github-icon\" viewbox=\"0 0 12 16\" aria-hidden=\"true\"><path d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/apple/foundationdb/pull/2986\" target=\"_blank\">Actor compiler will std::move() return expressions that exactly match a state variable</a>\n    </h4>\n\n    <div class=\"branches\">\n      <code>apple:master</code> \u2190 <code>satherton:actor-statevar-rvo</code>\n    </div>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2020-04-20\" data-time=\"11:37:46\" data-timezone=\"UTC\">11:37AM - 20 Apr 20 UTC</span>\n      </div>\n\n      <div class=\"user\">\n        <a href=\"https://github.com/satherton\" target=\"_blank\">\n          <img alt=\"satherton\" src=\"https://global.discourse-cdn.com/foundationdb/original/1X/dcab1adc161b25c2cd76455166702f4cdf35a09e.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\">\n          satherton\n        </a>\n      </div>\n\n      <div class=\"lines\" title=\"1 commits changed 1 files with 9 additions and 1 deletions\">\n        <a href=\"https://github.com/apple/foundationdb/pull/2986/files\" target=\"_blank\">\n          <span class=\"added\">+9</span>\n          <span class=\"removed\">-1</span>\n        </a>\n      </div>\n    </div>\n\n  </div>\n</div>\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-20T11:43:06.538Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 24,
        "readers_count": 23,
        "score": 4.8,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/2986",
            "internal": false,
            "reflection": false,
            "title": "Actor compiler will std::move() return expressions that exactly match a state variable by satherton \u00b7 Pull Request #2986 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/apple/foundationdb/pull/2986/files",
            "internal": false,
            "reflection": false,
            "title": "Actor compiler will std::move() return expressions that exactly match a state variable by satherton \u00b7 Pull Request #2986 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://github.com/satherton",
            "internal": false,
            "reflection": false,
            "title": "satherton (Steve Atherton) \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6762,
        "name": "Daniel Smith",
        "username": "Daniel-B-Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "created_at": "2020-04-20T15:49:24.920Z",
        "cooked": "<p>You do not need the <code>std::move()</code> as long as named return values are already treated as xvalues for constructor overload resolution as of C++14*. As long as <code>Future&lt;T&gt;::Future(T&amp;&amp;)</code> exists, that will be chosen. In this particular case, <code>std::move()</code> won\u2019t harm anything. I generally recommend against it since adding <code>std::move()</code> will prevent NRVO whenever the return value and return type are the same (non cv-qualified) type. There are zero cases where adding <code>std::move()</code> will help and not zero cases when it will hurt.</p>\n<p>EDIT: After looking at the PR, I realized that the actor compiler is compiling the return statement to a non-return statement, so none of this applies.</p>\n<p>* This was changed in this standard defect report: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1579\" rel=\"nofollow noopener\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1579</a>. Because it was a defect report, GCC backported it to C++11 as of GCC 5, and clang backported it even earlier.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-20T15:51:19.055Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 24,
        "readers_count": 23,
        "score": 4.8,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Daniel Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1579",
            "internal": false,
            "reflection": false,
            "title": "C++ Standard Core Language\r \r Defect Reports and Accepted Issues",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 7,
          "username": "SteavedHams",
          "name": "Steve Atherton",
          "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 679,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6795,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-21T21:53:54.910Z",
        "cooked": "<p>I have a proposal.  The actor compiler would recognize two forms of <code>wait()</code></p>\n<pre><code class=\"lang-auto\">const T &amp;x = wait(f);\n</code></pre>\n<p>and</p>\n<pre><code class=\"lang-auto\">T &amp;x = wait(f);\n</code></pre>\n<p>The first would behave like what we are used to now (and we would have to update all the code to do this).  The callback generated would take a <code>const T &amp;</code> for the result and everything would work as it does now.</p>\n<p>In the second form, the callback generated would take <code>T &amp;</code> so the consumer can modify or <code>std::move()</code> it.  When this callback is called, the SAV is modified somehow to indicate that further attempts to get its value are invalid, and those attempts would cause an error to be thrown, perhaps <code>value_already_consumed</code>.</p>\n<p>This would be similar to writing code today where you know for certain that some <code>wait()</code> is the only one for some future (even if other future/promise reference exist) and so you do</p>\n<pre><code class=\"lang-auto\">T x = wait(f);\nself-&gt;y = std::move(const_cast&lt;T &amp;&gt;(x));\n</code></pre>\n<p>because you \u201cknow what you\u2019re doing\u201d.  This is dangerous of course and abstraction breaking.  In my proposal, this would be safer because for the cost of some small run-time overhead the fact that you read <code>f</code> in a context that might modify it has been recorded so future attempts to read it can be blocked.</p>\n<p>Some thoughts\u2026</p>\n<ul>\n<li>\n<p>This would mean of course that we will rely on run-time errors in simulation to find bad patterns, which isn\u2019t ideal.</p>\n</li>\n<li>\n<p>With this change, IDEs would now correctly know the type of the return of a <code>wait()</code> which is neat.</p>\n</li>\n<li>\n<p>One way of implementing this would require two kinds of callbacks that can be added to the SAV, the <code>const &amp;</code> receiving kind and the <code>&amp;</code> receiving kind.  Only one of the latter kind is allowed to be called, the rest will have their catch blocks called instead with <code>value_already_consumed</code>.</p>\n</li>\n</ul>\n<p>-When a value is sent to the SAV, the <code>const &amp;</code> callbacks would be called first, which would allow non-mutating and mutating callbacks to both receive the value of a SAV, though use this pattern might be too fragile.</p>\n<p>Thoughts?</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-21T21:58:03.476Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 22,
        "readers_count": 21,
        "score": 29.4,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6796,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-04-21T22:39:18.556Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"8\" data-topic=\"2076\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>const T &amp;x = wait(f);</p>\n</blockquote>\n</aside>\n<p>I\u2019m on board with this for the improved IDE experience alone</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"8\" data-topic=\"2076\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>T &amp;x = wait(f);</p>\n</blockquote>\n</aside>\n<p>I think this makes sense, but it sounds like a fair bit of work. Do we have any use cases in mind where we would take advantage of this?</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-21T22:39:18.556Z",
        "reply_count": 1,
        "reply_to_post_number": 8,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 21,
        "readers_count": 20,
        "score": 9.2,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6797,
        "name": "Trevor Clinkenbeard",
        "username": "trevor.clinkenbeard",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png",
        "created_at": "2020-04-21T22:53:46.175Z",
        "cooked": "<p>One example is in <code>storageserver.actor.cpp</code> in <code>replaceInterface</code>:</p>\n<pre><code class=\"lang-auto\">when(GetStorageServerRejoinInfoReply _rep = wait( ... )) {\n   state GetStorageServerRejoinInfoReply rep = _rep;\n   ...\n}\n</code></pre>\n<p><code>GetStorageServerRejoinInfoReply</code> contains a <code>vector</code>, so there is an unnecessary copy here. With the proposed change this could be made:</p>\n<pre><code class=\"lang-auto\">when(GetStorageServerRejoinInfoReply &amp;_rep = wait( ... )) {\n   state GetStorageServerRejoinInfoReply rep = std::move(_rep);\n   ...\n}\n</code></pre>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-21T22:55:30.463Z",
        "reply_count": 0,
        "reply_to_post_number": 9,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 21,
        "readers_count": 20,
        "score": 9.2,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Trevor Clinkenbeard",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 14,
          "username": "andrew.noyes",
          "name": "",
          "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 362,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6798,
        "name": "Trevor Clinkenbeard",
        "username": "trevor.clinkenbeard",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png",
        "created_at": "2020-04-21T23:12:40.080Z",
        "cooked": "<p>I think the two types of callbacks should be:</p>\n<pre><code class=\"lang-auto\">const T &amp;t = wait(f);\n</code></pre>\n<p>and</p>\n<pre><code class=\"lang-auto\">T &amp;&amp;t = wait(f);\n</code></pre>\n<p>The only advantage of passing a non-constant reference is that we can use move, and using an rvalue reference makes in clear to the waiter that this is safe.</p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-21T23:12:40.080Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 29.0,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Trevor Clinkenbeard",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 362,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6799,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-21T23:50:26.209Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"trevor.clinkenbeard\" data-post=\"11\" data-topic=\"2076\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/48.png\" class=\"avatar\"> trevor.clinkenbeard:</div>\n<blockquote>\n<pre><code class=\"lang-auto\">T &amp;&amp;t = wait(f);\n</code></pre>\n<p>The only advantage of passing a non-constant reference is that we can use move, and using an rvalue reference makes in clear to the waiter that this is safe.</p>\n</blockquote>\n</aside>\n<p>Very good point, I agree.</p>\n<p>Also, perhaps <code>Future&lt;T&gt;</code> could have a <code>.consume()</code> method which is like <code>get()</code> but returns <code>T &amp;&amp;</code> and marks the underlying SAV as <code>consumed</code>.  This would enable things like:</p>\n<pre><code class=\"lang-auto\">state std::vector&lt;Future&lt;T&gt;&gt; futures;\n...\nwait(waitForAll(futures));\nself-&gt;thing = futures[0].consume();\n</code></pre>\n<p>Or maybe this is more clear;</p>\n<pre><code class=\"lang-auto\">self-&gt;thing = futures[0].move();\n</code></pre>\n<p>Or perhaps for clarity it should return <code>T &amp;</code>, so</p>\n<pre><code class=\"lang-auto\">self-&gt;thing = std::move(futures[0].consume());\n</code></pre>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-21T23:50:26.209Z",
        "reply_count": 0,
        "reply_to_post_number": 11,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 21,
        "readers_count": 20,
        "score": 4.2,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6800,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-21T23:55:38.135Z",
        "cooked": "<p>The <code>.consume()</code> feature can avoid a copy in <code>getAll()</code>, but of course only when it is safe to do so.  There would perhaps have to be two versions of <code>getAll()</code>, though I think the way we use it is normally fine for it to consume the futures in the vector passed to it.</p>\n<p>There are probably some other tricky cases with generics we need to think about.</p>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/foundationdb/blob/master/flow/genericactors.actor.h#L1013\" target=\"_blank\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/foundationdb/blob/master/flow/genericactors.actor.h#L1013\" target=\"_blank\">apple/foundationdb/blob/master/flow/genericactors.actor.h#L1013</a></h4>\n<pre class=\"onebox\"><code class=\"lang-h\"><ol class=\"start lines\" start=\"1003\" style=\"counter-reset: li-counter 1002 ;\">\n<li>}</li>\n<li>\n</li>\n<li>template &lt;class T&gt;</li>\n<li>Future&lt;Void&gt; waitForAny( std::vector&lt;Future&lt;T&gt;&gt; const&amp; results ) {</li>\n<li>\tif (results.empty()) return Void();</li>\n<li>\treturn quorum( results, 1 );</li>\n<li>}</li>\n<li>\n</li>\n<li>ACTOR Future&lt;bool&gt; shortCircuitAny( std::vector&lt;Future&lt;bool&gt;&gt; f );</li>\n<li>\n</li>\n<li class=\"selected\">ACTOR template &lt;class T&gt;</li>\n<li>Future&lt;std::vector&lt;T&gt;&gt; getAll( std::vector&lt;Future&lt;T&gt;&gt; input ) {</li>\n<li>\tif (input.empty()) return std::vector&lt;T&gt;();</li>\n<li>\twait( quorum( input, input.size() ) );</li>\n<li>\n</li>\n<li>\tstd::vector&lt;T&gt; output;</li>\n<li>\tfor(int i=0; i&lt;input.size(); i++)</li>\n<li>\t\toutput.push_back( input[i].get() );</li>\n<li>\treturn output;</li>\n<li>}</li>\n<li>\n</li>\n</ol></code></pre>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-21T23:56:36.049Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 4.0,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/master/flow/genericactors.actor.h#L1013",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/genericactors.actor.h at master \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6801,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-22T01:32:43.147Z",
        "cooked": "<p>Actually I guess</p>\n<pre><code class=\"lang-auto\">Future&lt;std::vector&lt;T&gt;&gt; getAll(std::vector&lt;Future&lt;T&gt;&gt; &amp;&amp;futures)\n</code></pre>\n<p>could use <code>.consume()</code> and</p>\n<pre><code class=\"lang-auto\">Future&lt;std::vector&lt;T&gt;&gt; getAll(std::vector&lt;Future&lt;T&gt;&gt; futures)\n</code></pre>\n<p>would not.  When the vector passed in is a local (non state) var it should use the first one which will avoid copies into the result vector.  And if the vector is a state variable (for example, because it is added to across wait boundaries) then it will have to be explicitly <code>std::move()</code>d.</p>",
        "post_number": 14,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-22T01:33:52.723Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 9.0,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/14",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6811,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2020-04-22T16:50:14.355Z",
        "cooked": "<p>I like the idea of having this, though I have one question:</p>\n<p>How should this <code>SAV&lt;T&gt;::consume</code> behave if there is more than one Future? I can think of multiple possibilities and none of them strikes me intuitively as more <em>correct</em>:</p>\n<ul>\n<li>It could just throw an error. While this would be easy it would mean that the client needs to check the future count which seems kind of wrong.</li>\n<li>It could move the object out and then throw an exception for every other future that wants to read it. However, it is super unclear to me what this would mean for callbacks.</li>\n</ul>\n<p>Consider this (rather stupid but valid) example:</p>\n<pre><code class=\"lang-auto\">ACTOR Future&lt;int&gt;\nfoo(Future&lt;vector&lt;int&gt;&gt; f) {\n  wait(onReady(f));\n  auto v = f.consume();\n  int res = 0;\n  for (val : v) { res += val; }\n  return res;\n}\n\nvoid bar() {\n  Promise&lt;vector&lt;int&gt;&gt; p;\n  std::vector&lt;Future&lt;int&gt;&gt; futures{ foo(p.getFuture()), foo(p.getFuture() };\n  wait(delay(1.0));\n  p.send(std::vector&lt;int&gt;{1,2,3,4,5});\n  wait(allReady(futures));\n}\n</code></pre>\n<p>What should happen in the program above?</p>",
        "post_number": 15,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-22T16:50:14.355Z",
        "reply_count": 1,
        "reply_to_post_number": 14,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 20,
        "readers_count": 19,
        "score": 9.0,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 7,
          "username": "SteavedHams",
          "name": "Steve Atherton",
          "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/15",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6812,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-22T18:12:32.648Z",
        "cooked": "<p>In my proposal, the second call to <code>foo()</code> would throw an error on consume.  This is the kind of issue I was referring to regarding catching issues like this at run-time in simulation.  Getting a value from a future more than once via a <code>.consume()</code> or a consuming <code>wait()</code> is just not valid to write, but I\u2019m not sure how we could reliably detect these situations at compile time.</p>",
        "post_number": 16,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-22T18:12:32.648Z",
        "reply_count": 1,
        "reply_to_post_number": 15,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 16,
        "readers_count": 15,
        "score": 8.2,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 15,
          "username": "markus.pilman",
          "name": "Markus Pilman",
          "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/16",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6814,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2020-04-22T19:01:49.315Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"16\" data-topic=\"2076\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>In my proposal, the second call to <code>foo()</code> would throw an error on consume.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t like this though. You say the second, but in practice there\u2019s also a problem with priorities here. So it would be the second that gets scheduled. But to make things worse we don\u2019t actually have priorities in simulation - so the behavior will be different in simulation than on a real cluster.</p>\n<p>If <code>consume</code> would fail if there\u2019s more than one future (or if the future was created from a promise after <code>consume</code> was called), at least the semantics would be well defined and consistent.</p>",
        "post_number": 17,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-22T19:02:34.223Z",
        "reply_count": 1,
        "reply_to_post_number": 16,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 16,
        "readers_count": 15,
        "score": 8.2,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/17",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6816,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-22T20:26:39.471Z",
        "cooked": "<p>Good points.  I think the most strict implementation would be this:</p>\n<ul>\n<li>Only allow <code>.consume()</code> when the future reference count is 1</li>\n<li>Only allow a consuming callback to be added when\n<ul>\n<li>The reference count is 1</li>\n<li>There are no other callbacks presently</li>\n<li>There have been no callbacks, consuming or not, in the past.</li>\n</ul>\n</li>\n<li>Only allow <code>.get()</code> on futures where <code>.consume()</code> has never been called and no consuming callback has ever been added.</li>\n</ul>\n<p>I think this would have the highest chance of catching misuse in simulation, though it won\u2019t catch everything as a promise holder could get a new future at any time and try to consume or wait for it.</p>",
        "post_number": 18,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-22T20:26:39.471Z",
        "reply_count": 0,
        "reply_to_post_number": 17,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 18,
        "readers_count": 17,
        "score": 3.6,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 15,
          "username": "markus.pilman",
          "name": "Markus Pilman",
          "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/18",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6827,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-04-24T11:11:15.413Z",
        "cooked": "<p>Just for fun I changed <code>vector&lt;T&gt; getAll(vector&lt;Future&lt;T&gt;&gt;)</code> to be abstraction-breaking and <code>std::move(const_cast&lt;T &amp;&gt;(x))</code> each item out of the vector of ready futures into the result vector.  I was not surprised that I can still run tests without errors because I really doubt any futures in vectors sent to <code>getAll()</code> have any other reference holders.</p>\n<p>I ran an instance of <code>APICorrectness.txt</code>, and it used 51 seconds of CPU.  In that time, these are the number of calls to <code>getAll&lt;T&gt;()</code> counted by their <code>T</code> types.</p>\n<pre><code class=\"lang-auto\">      1 InitializeBackupReply\n      1 MasterProxyInterface\n      1 ResolverInterface\n      3 WorkloadInterface\n      4 long int\n     63 std::vector&lt;UID&gt;\n    279 Optional&lt;Standalone&lt;StringRef&gt; &gt;\n    977 ResolveTransactionBatchReply\n   1892 Standalone&lt;StringRef&gt; (vector size up to 9)\n  19319 GetReadVersionReply  (vector size always 1)\n</code></pre>\n<p>This of course doesn\u2019t represent a great deal of work difference between copy and move, so perhaps there isn\u2019t a lot to be gained from removing copies from <code>getAll()</code>.  I ran a few other tests and the results were similar.</p>",
        "post_number": 19,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-24T11:12:20.064Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 20,
        "readers_count": 19,
        "score": 9.0,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/19",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6828,
        "name": "Daniel Smith",
        "username": "Daniel-B-Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "created_at": "2020-04-24T15:59:45.927Z",
        "cooked": "<p>As discussed in person, I think we shouldn\u2019t use this pattern:</p>\n<pre><code>T &amp;&amp;t = wait(f);\n</code></pre>\n<p>The <code>T&amp;&amp;</code> only indicates that <code>wait()</code> must return an xvalue, but the variable <code>t</code> is itself an lvalue. Most people forget that fact, so it\u2019s really easy to forget a <code>std::move()</code> and end up with an unnecessary copy when using <code>t</code>.</p>",
        "post_number": 20,
        "post_type": 1,
        "posts_count": 26,
        "updated_at": "2020-04-24T15:59:45.927Z",
        "reply_count": 1,
        "reply_to_post_number": 11,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 18,
        "readers_count": 17,
        "score": 68.6,
        "yours": false,
        "topic_id": 2076,
        "topic_slug": "avoiding-unnecessary-copies-from-movable-futures",
        "display_username": "Daniel Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 362,
          "username": "trevor.clinkenbeard",
          "name": "Trevor Clinkenbeard",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 679,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/avoiding-unnecessary-copies-from-movable-futures/2076/20",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      6732,
      6734,
      6738,
      6749,
      6750,
      6752,
      6762,
      6795,
      6796,
      6797,
      6798,
      6799,
      6800,
      6801,
      6811,
      6812,
      6814,
      6816,
      6827,
      6828,
      6829,
      6830,
      6832,
      6833,
      6834,
      6835
    ]
  },
  "timeline_lookup": [
    [
      1,
      2013
    ],
    [
      4,
      2011
    ],
    [
      6,
      2010
    ],
    [
      8,
      2009
    ],
    [
      15,
      2008
    ],
    [
      19,
      2006
    ]
  ],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Avoiding unnecessary copies from movable futures",
  "id": 2076,
  "title": "Avoiding unnecessary copies from movable futures",
  "posts_count": 26,
  "created_at": "2020-04-17T16:47:45.488Z",
  "views": 2662,
  "reply_count": 15,
  "like_count": 6,
  "last_posted_at": "2020-04-24T17:56:15.383Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "avoiding-unnecessary-copies-from-movable-futures",
  "category_id": 5,
  "word_count": 3078,
  "deleted_at": null,
  "user_id": 362,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2076",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 26,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 6,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": null,
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 7,
        "username": "SteavedHams",
        "name": "Steve Atherton",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "post_count": 10,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 15,
        "username": "markus.pilman",
        "name": "Markus Pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "post_count": 6,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 362,
        "username": "trevor.clinkenbeard",
        "name": "Trevor Clinkenbeard",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 679,
        "username": "Daniel-B-Smith",
        "name": "Daniel Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 14,
        "username": "andrew.noyes",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 362,
      "username": "trevor.clinkenbeard",
      "name": "Trevor Clinkenbeard",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/9fc29f/{size}.png"
    },
    "last_poster": {
      "id": 15,
      "username": "markus.pilman",
      "name": "Markus Pilman",
      "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/pull/2915",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 362,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/2984",
        "title": "Added Future<T>(T &&value) constructor to avoid a copy... by satherton \u00b7 Pull Request #2984 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 7,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/2986",
        "title": "Actor compiler will std::move() return expressions that exactly match a state variable by satherton \u00b7 Pull Request #2986 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 7,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}