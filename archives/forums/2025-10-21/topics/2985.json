{
  "post_stream": {
    "posts": [
      {
        "id": 10213,
        "name": "Rajiv M Ranganath",
        "username": "rajivr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
        "created_at": "2021-11-02T12:02:49.637Z",
        "cooked": "<p>For the Rust binding layer that I am currently working on, while writing documentation for the <code>Versionstamp</code> module, I wanted to create an example similar to <a href=\"https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/tuple/Versionstamp.html\" rel=\"noopener nofollow ugc\">this</a> example from Java bindings.</p>\n<p>Following is the code in Rust. (Full working example is <a href=\"https://github.com/rajivr/fdb/blob/4858d1339bac32e2212ad1aaea152f810cd84633/fdb/examples/versionstamp.rs\" rel=\"noopener nofollow ugc\">here</a>).</p>\n<pre><code class=\"lang-auto\">let vs = fdb_database\n    .run(|tr| {\n        let mut t = Tuple::new();\n        t.add_versionstamp(Versionstamp::incomplete(0));\n        tr.mutate(\n            MutationType::SetVersionstampedKey,\n            (t.pack_with_versionstamp(Bytes::from_static(&amp;b\"prefix\"[..])))\n                .unwrap()\n                .into(),\n            Bytes::from_static(&amp;b\"\"[..]),\n        );\n\n\t    let vs_fut = tr.get_versionstamp();\n\n        tr.commit().join()?;\n\n\t    let vs = vs_fut.join()?;\n\n\t    Ok(vs)\n    })\n    .unwrap_or_else(|err| panic!(\"Error occurred during `run`: {:?}\", err));\n</code></pre>\n<p>As I was looking at this code, I realized if the <code>commit</code> future succeeds and if the <code>get_versionstamp</code> future fails, there is a possibility that <code>.run</code> method could retry the closure, and commit twice.</p>\n<p>Does the standard retry logic using <code>on_error</code> ensure that this does not happen?</p>\n<p>Asking the same question in a slightly different way - Can we assume that once <code>tr.commit()</code> succeeds, <code>vs_fut</code> will also return the transaction versionstamp without generating an error?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2021-11-02T12:02:49.637Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 105,
        "reads": 22,
        "readers_count": 21,
        "score": 549.4,
        "yours": false,
        "topic_id": 2985,
        "topic_slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
        "display_username": "Rajiv M Ranganath",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/tuple/Versionstamp.html",
            "internal": false,
            "reflection": false,
            "title": "Versionstamp (FoundationDB Java Client API)",
            "clicks": 3
          },
          {
            "url": "https://github.com/rajivr/fdb/blob/4858d1339bac32e2212ad1aaea152f810cd84633/fdb/examples/versionstamp.rs",
            "internal": false,
            "reflection": false,
            "title": "fdb/versionstamp.rs at 4858d1339bac32e2212ad1aaea152f810cd84633 \u00b7 rajivr/fdb \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 946,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-regarding-retry-logic-and-transaction-get-versionstamp-api/2985/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 10224,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2021-11-03T21:11:11.507Z",
        "cooked": "<p>Hm, the <code>get_versionstamp</code> future is somewhat weird, in that it must be called before the transaction commits, but it will not be completed until after (essentially, being filled in with information from the <code>commit</code> response message).</p>\n<p>The way the standard retry works, it will call <code>commit</code> for you, essentially being equivalent to:</p>\n<pre><code class=\"lang-auto\">def run(lambda):\n    tr = db.create_transaction()\n    while True:\n        try:\n            result = lambda.apply(tr)\n            tr.commit()\n            return result\n        except Err as e:\n            tr = tr.on_error(e)\n</code></pre>\n<p>With <code>on_error</code> handling here decisions like whether to retry (or if it\u2019s hit a limit) or whether the error is retryable.</p>\n<p>So, in the example for the Java bindings, the lambda returns the result of <code>getVersionstamp</code> but doesn\u2019t try and commit, and so the transaction will only be committed once, and it will always have been committed if <code>.run</code> returns a successful result.</p>\n<aside class=\"quote no-group\" data-username=\"rajivr\" data-post=\"1\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rajivr/48/1100_2.png\" class=\"avatar\"> rajivr:</div>\n<blockquote>\n<p>Asking the same question in a slightly different way - Can we assume that once <code>tr.commit()</code> succeeds, <code>vs_fut</code> will also return the transaction versionstamp without generating an error?</p>\n</blockquote>\n</aside>\n<p>That\u2019s right\u2026for the most part. Once <code>tr.commit</code> succeeds (or maybe more precisely \u201conce the transaction that created the versionstamp future commits\u201d) , it will fill in <code>vs_fut</code> with the versionstamp from the commit response. This means that the only way that the future fails is if something weird happens, e.g., the client is closed between when the commit succeeds and <code>vs_fut</code> is completed, and then <code>vs_fut</code> returns a \u201ccancelled\u201d exception or something.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2021-11-03T21:11:11.507Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 21,
        "readers_count": 20,
        "score": 44.2,
        "yours": false,
        "topic_id": 2985,
        "topic_slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-regarding-retry-logic-and-transaction-get-versionstamp-api/2985/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 10226,
        "name": "Rajiv M Ranganath",
        "username": "rajivr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
        "created_at": "2021-11-04T01:18:14.286Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/alloc\">@alloc</a> Thanks for the reply. <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"2\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>The way the standard retry works, it will call <code>commit</code> for you, essentially being equivalent to:</p>\n<pre><code class=\"lang-auto\">def run(lambda):\n    tr = db.create_transaction()\n    while True:\n        try:\n            result = lambda.apply(tr)\n            tr.commit()\n            return result\n        except Err as e:\n            tr = tr.on_error(e)\n</code></pre>\n<p>With <code>on_error</code> handling here decisions like whether to retry (or if it\u2019s hit a limit) or whether the error is retryable.</p>\n</blockquote>\n</aside>\n<p>In the Rust bindings <code>.run</code> method is implemented in a very similar way <a href=\"https://github.com/rajivr/fdb/blob/4858d1339bac32e2212ad1aaea152f810cd84633/fdb/src/database/fdb_database.rs#L83-L113\" rel=\"noopener nofollow ugc\">here</a>.</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"2\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>So, in the example for the Java bindings, the lambda returns the result of <code>getVersionstamp</code> but doesn\u2019t try and commit, and so the transaction will only be committed once, and it will always have been committed if <code>.run</code> returns a successful result.</p>\n</blockquote>\n</aside>\n<p>That\u2019s correct! I have not actively programmed in Java in a <em>very very</em> long time, but as I looked at the following code from JavaDoc</p>\n<pre><code class=\"lang-auto\">  CompletableFuture&lt;byte[]&gt; trVersionFuture = db.run((Transaction tr) -&gt; {\n       // The incomplete Versionstamp will be overwritten with tr's version information when committed.\n       Tuple t = Tuple.from(\"prefix\", Versionstamp.incomplete());\n       tr.mutate(MutationType.SET_VERSIONSTAMPED_KEY, t.packWithVersionstamp(), new byte[0]);\n       return tr.getVersionstamp();\n   });\n\n   byte[] trVersion = trVersionFuture.get();\n</code></pre>\n<p>I realized that when <code>trVersionFuture</code> value gets returned from <code>db.run</code>, the <code>Transaction tr</code> value passed to the function by <code>db.run</code> would still be live and GC\u2019ed later.</p>\n<p>Hence the <code>.run()</code> method can call the commit once.</p>\n<p>However, in case of Rust, we do not have a GC, and in the API design we tie the lifetime of all FDB futures to the lifetime of the transaction (i.e., lifetime of <code>tr</code> argument in the above example).</p>\n<p>Because of this, I had to call <code>commit</code> twice. Once inside the closure and another time from inside the <code>.run</code> method. Luckily calling <code>commit</code> twice did not generate an error, otherwise I would have had to create a separate method for versionstamp (something like <code>run_and_get_versionstamp()</code>).</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"2\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>This means that the only way that the future fails is if something weird happens, e.g., the client is closed between when the commit succeeds and <code>vs_fut</code> is completed, and then <code>vs_fut</code> returns a \u201ccancelled\u201d exception or something.</p>\n</blockquote>\n</aside>\n<p>I have not yet started with developing FDB layers, but how common is it to return versionstamp from <code>db.run</code> methods in something like Record Layer?</p>\n<p>A good way of handling this case in Rust would be</p>\n<ol>\n<li>\n<p>Introduce a <code>run_and_get_versionstamp</code> method, that would return a Rust tuple containing the result of the Rust closure, and the versionstamp.</p>\n</li>\n<li>\n<p>Make <code>get_versionstamp</code> method <code>unsafe</code>, so the caller is aware of this issue.</p>\n</li>\n</ol>\n<p>Please correct me if I am wrong, I think we need to worry about two error conditions here.</p>\n<ol>\n<li>\n<p>The one generated from <code>commit</code> (after retrying fails), in which case, the versionstamp would be irrelevant.</p>\n</li>\n<li>\n<p>The commit succeeds, but versionstamp future fails. In which case, the caller should be careful in retrying the transaction, in case she is depending on versionstamp to maintain invariants.</p>\n</li>\n</ol>\n<p>Also are there any other APIs similar to <code>get_versionstamp</code> that would need additional care? <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2021-11-04T01:18:14.286Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 21,
        "readers_count": 20,
        "score": 24.2,
        "yours": false,
        "topic_id": 2985,
        "topic_slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
        "display_username": "Rajiv M Ranganath",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/rajivr/fdb/blob/4858d1339bac32e2212ad1aaea152f810cd84633/fdb/src/database/fdb_database.rs#L83-L113",
            "internal": false,
            "reflection": false,
            "title": "fdb/fdb_database.rs at 4858d1339bac32e2212ad1aaea152f810cd84633 \u00b7 rajivr/fdb \u00b7 GitHub",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 946,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-regarding-retry-logic-and-transaction-get-versionstamp-api/2985/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 10232,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2021-11-05T00:16:43.809Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"rajivr\" data-post=\"3\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rajivr/48/1100_2.png\" class=\"avatar\"> rajivr:</div>\n<blockquote>\n<p>However, in case of Rust, we do not have a GC, and in the API design we tie the lifetime of all FDB futures to the lifetime of the transaction (i.e., lifetime of <code>tr</code> argument in the above example).</p>\n</blockquote>\n</aside>\n<p>Hm, interesting. I <em>think</em> that tying a future to its associated transaction should work, though it\u2019s maybe a bit dicey. The thing that makes <code>getVersionstamp</code> somewhat unique is that it\u2019s one of the few times where the user is trying to return the <em>future</em> from within the lambda instead of the <em>value</em> returned by a future.  Which definitely makes code that has to think about lifetimes a bit tricky.</p>\n<p>It\u2019s possible that <code>getVersionstamp</code> might need to have a different lifetime than the transaction\u2019s lifetime in order to make it work naturally (i.e., without a double commit, which may work, but I believe a second commit to a single transaction is discouraged\u2013and is perhaps undefined behavior). Though I\u2019m not super familiar with how Rust handles lifetimes, so I\u2019m not sure how feasible that would be.</p>\n<aside class=\"quote no-group\" data-username=\"rajivr\" data-post=\"3\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rajivr/48/1100_2.png\" class=\"avatar\"> rajivr:</div>\n<blockquote>\n<p>I have not yet started with developing FDB layers, but how common is it to return versionstamp from <code>db.run</code> methods in something like Record Layer?</p>\n</blockquote>\n</aside>\n<p>Well, that\u2019s a bit hard to say. In practice, the Record Layer <em>always</em> collects the versionstamp from a transaction and stores it locally. You can see that in the wrapper of the <code>commit</code> method: <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/233a72a51182a1f35b9bad34ac29b127a437a12b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContext.java#L437\">https://github.com/FoundationDB/fdb-record-layer/blob/233a72a51182a1f35b9bad34ac29b127a437a12b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContext.java#L437</a></p>\n<p>The value, however, is typically only used to set some state on the transaction-wrapper, and so clients who want to inspect the versionstamp essentially only have to <code>commit()</code> their transaction and then when that completes, look at the value of <code>getVersionStamp</code>. My guess is that that is not all that frequently done, with the main use case being around versionstamp operations (where the value returned by the transaction can be used to know what \u201cversion\u201d was written into the data). I guess that\u2019s sort of equivalent to the <code>run_and_get_versionstamp</code> method your describing, insofar as the user has an alternate means of getting the versionstamp than by calling the method themselves.</p>\n<aside class=\"quote no-group\" data-username=\"rajivr\" data-post=\"3\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rajivr/48/1100_2.png\" class=\"avatar\"> rajivr:</div>\n<blockquote>\n<p>The one generated from <code>commit</code> (after retrying fails), in which case, the versionstamp would be irrelevant.</p>\n</blockquote>\n</aside>\n<p>Yes, that\u2019s right. In that case, I believe the future can be ignored, though I\u2019m not 100% certain what it is completed to (if anything).</p>\n<aside class=\"quote no-group\" data-username=\"rajivr\" data-post=\"3\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rajivr/48/1100_2.png\" class=\"avatar\"> rajivr:</div>\n<blockquote>\n<p>The commit succeeds, but versionstamp future fails. In which case, the caller should be careful in retrying the transaction, in case she is depending on versionstamp to maintain invariants.</p>\n</blockquote>\n</aside>\n<p>Yes, that\u2019s the other case. In most of the use cases where I think someone might want to look at the versionstamp, it\u2019s mainly to introspect data that they just wrote (e.g., if they wrote a versionstamped key or value, they might want to use the return value from <code>getVersionstamp</code> to know what <em>exact</em> key or value was written). If the versionstamp future fails, then I think they can treat this the same way they\u2019d need to treat a <code>commit_unknown_result</code>, i.e., cases where a commit might or might not have failed (e.g., because the database connection failed between when the transaction was submitted and when the response was issued to the client). In either the case of a <code>getVersionstamp</code> failure or a <code>commit_unknown_result</code>, the caller doesn\u2019t know exactly what data was written, so if their operation isn\u2019t idempotent, they might need to issue some kind of query to see if the data is there before retrying (or something like that). But it does get a little hairy and a little complicated for users to follow.</p>\n<p>I kind of wish that instead the <code>commit</code> method returned a <code>commit_response</code> message or something with the versionstamp (and the commit version and perhaps other data), and then the user could ask for and maybe introspect the commit response, but that\u2019s not quite how the API is set up. <img src=\"https://emoji.discourse-cdn.com/twitter/confused.png?v=12\" title=\":confused:\" class=\"emoji\" alt=\":confused:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2021-11-05T00:16:43.809Z",
        "reply_count": 2,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 15,
        "readers_count": 14,
        "score": 13.0,
        "yours": false,
        "topic_id": 2985,
        "topic_slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/233a72a51182a1f35b9bad34ac29b127a437a12b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContext.java#L437",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FDBRecordContext.java at 233a72a51182a1f35b9bad34ac29b127a437a12b \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-regarding-retry-logic-and-transaction-get-versionstamp-api/2985/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 10233,
        "name": "Rajiv M Ranganath",
        "username": "rajivr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
        "created_at": "2021-11-05T01:21:33.601Z",
        "cooked": "<p>Thanks again <a class=\"mention\" href=\"/u/alloc\">@alloc</a> for the detailed reply! <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"4\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>If the versionstamp future fails, then I think they can treat this the same way they\u2019d need to treat a <code>commit_unknown_result</code> , i.e., cases where a commit might or might not have failed (e.g., because the database connection failed between when the transaction was submitted and when the response was issued to the client). In either the case of a <code>getVersionstamp</code> failure or a <code>commit_unknown_result</code> , the caller doesn\u2019t know exactly what data was written, so if their operation isn\u2019t idempotent, they might need to issue some kind of query to see if the data is there before retrying (or something like that).</p>\n</blockquote>\n</aside>\n<p>Treating the <code>get_versionstamp</code> future failure similar to <code>commit_unknown_result</code>, would simplify the API design. I\u2019ll go ahead and introduce <code>run_and_get_versionstamp</code> method and make <code>get_versionstamp</code> method <code>unsafe</code>.</p>\n<p>Btw, I still don\u2019t have a good idea on how to correctly use <code>commit_unknown_result</code> for layer development. Its one of the places where I am very likely going to come back and ask more questions in the the future! <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2021-11-05T01:21:33.601Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 14,
        "readers_count": 13,
        "score": 7.8,
        "yours": false,
        "topic_id": 2985,
        "topic_slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
        "display_username": "Rajiv M Ranganath",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 946,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-regarding-retry-logic-and-transaction-get-versionstamp-api/2985/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 10236,
        "name": "Rajiv M Ranganath",
        "username": "rajivr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
        "created_at": "2021-11-07T05:37:25.761Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"4\" data-topic=\"2985\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>It\u2019s possible that <code>getVersionstamp</code> might need to have a different lifetime than the transaction\u2019s lifetime in order to make it work naturally (i.e., without a double commit, which may work, but I believe a second commit to a single transaction is discouraged\u2013and is perhaps undefined behavior). Though I\u2019m not super familiar with how Rust handles lifetimes, so I\u2019m not sure how feasible that would be.</p>\n</blockquote>\n</aside>\n<p><a class=\"mention\" href=\"/u/alloc\">@alloc</a> I explored this further. It turns out that it was possible to safely return the <code>Transaction</code> value from <code>.run</code> method.</p>\n<p>You can ignore the Rust type system noise, but here is how such an interface would look. (Working code is <a href=\"https://github.com/rajivr/fdb/blob/1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696/fdb/src/transaction/transaction_context.rs\" rel=\"noopener nofollow ugc\">here</a>).</p>\n<pre><code class=\"lang-auto\">    fn run_and_get_transaction&lt;T, F, Tr&gt;(\n        &amp;self,\n        f: F,\n    ) -&gt; FdbResult&lt;(T, Box&lt;dyn Transaction&lt;Database = Self::Database&gt;&gt;)&gt;\n    where\n        Self: Sized,\n        F: Fn(&amp;dyn Transaction&lt;Database = Self::Database&gt;) -&gt; FdbResult&lt;T&gt;;\n</code></pre>\n<p>The issue however, is that even after returning the <code>Transaction</code> value, it seems like for <code>get_versionstamp()</code> to work correctly, the <code>get_versionstamp()</code> future must be created <em>before</em> calling <code>commit()</code> on the transaction.</p>\n<p>Because of this constraint, it seems like we really need a <code>run_and_get_versionstamp</code> method.</p>\n<p>I also ended up keeping <code>run_and_get_transaction</code> method, as its needed to make <code>get_committed_version</code> work correctly.</p>\n<p>This thread has been very helpful. As I was working on this issue, I also discovered a subtle bug in my earlier <code>.run()</code> implementation, which I have now fixed. Hopefully the binding tester will weed out any remaining hidden bugs.</p>\n<p>Thanks again for taking time to provide detailed reply.</p>\n<p>Here is the final <a href=\"https://github.com/rajivr/fdb/blob/1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696/fdb/examples/get_versionstamp.rs#L21-L68\" rel=\"noopener nofollow ugc\">code</a> that started this thread! <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2021-11-07T12:00:37.364Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 1,
        "incoming_link_count": 5,
        "reads": 13,
        "readers_count": 12,
        "score": 42.6,
        "yours": false,
        "topic_id": 2985,
        "topic_slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
        "display_username": "Rajiv M Ranganath",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/rajivr/fdb/blob/1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696/fdb/examples/get_versionstamp.rs#L21-L68",
            "internal": false,
            "reflection": false,
            "title": "fdb/get_versionstamp.rs at 1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696 \u00b7 rajivr/fdb \u00b7 GitHub",
            "clicks": 8
          },
          {
            "url": "https://github.com/rajivr/fdb/blob/1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696/fdb/src/transaction/transaction_context.rs",
            "internal": false,
            "reflection": false,
            "title": "fdb/transaction_context.rs at 1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696 \u00b7 rajivr/fdb \u00b7 GitHub",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 946,
          "username": "rajivr",
          "name": "Rajiv M Ranganath",
          "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 946,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/question-regarding-retry-logic-and-transaction-get-versionstamp-api/2985/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      10213,
      10224,
      10226,
      10232,
      10233,
      10236
    ]
  },
  "timeline_lookup": [
    [
      1,
      1449
    ],
    [
      2,
      1448
    ],
    [
      4,
      1447
    ],
    [
      6,
      1445
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings"
  ],
  "tags_descriptions": {},
  "fancy_title": "Question regarding retry logic and transaction get_versionstamp API",
  "id": 2985,
  "title": "Question regarding retry logic and transaction get_versionstamp API",
  "posts_count": 6,
  "created_at": "2021-11-02T12:02:49.561Z",
  "views": 651,
  "reply_count": 3,
  "like_count": 4,
  "last_posted_at": "2021-11-07T05:37:25.761Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "question-regarding-retry-logic-and-transaction-get-versionstamp-api",
  "category_id": 8,
  "word_count": 2177,
  "deleted_at": null,
  "user_id": 946,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2985",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 6,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Implementing VersionStamps in bindings",
      "id": 250,
      "title": "Implementing VersionStamps in bindings",
      "slug": "implementing-versionstamps-in-bindings",
      "posts_count": 25,
      "reply_count": 18,
      "highest_post_number": 25,
      "image_url": null,
      "created_at": "2018-04-24T19:05:11.830Z",
      "last_posted_at": "2018-05-09T18:14:10.990Z",
      "bumped": true,
      "bumped_at": "2018-05-09T18:14:10.990Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 5417,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 120,
            "username": "josephg",
            "name": "Seph Gentle",
            "avatar_template": "/user_avatar/forums.foundationdb.org/josephg/{size}/84_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "`fdb_future_block_until_ready` and retry logic",
      "id": 2826,
      "title": "`fdb_future_block_until_ready` and retry logic",
      "slug": "fdb-future-block-until-ready-and-retry-logic",
      "posts_count": 17,
      "reply_count": 14,
      "highest_post_number": 17,
      "image_url": null,
      "created_at": "2021-07-29T16:11:47.961Z",
      "last_posted_at": "2021-09-02T13:29:20.517Z",
      "bumped": true,
      "bumped_at": "2021-09-02T13:29:20.517Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1009,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 946,
            "username": "rajivr",
            "name": "Rajiv M Ranganath",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "id": 1833,
      "title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "slug": "cannot-commit-transaction-that-reads-the-metadataversion-key-after-changing-it",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-12-11T22:52:33.816Z",
      "last_posted_at": "2019-12-13T13:23:15.818Z",
      "bumped": true,
      "bumped_at": "2019-12-13T14:11:35.389Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1297,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Why does get versionstamp() return a future that resolves with 0 bytes?",
      "id": 2296,
      "title": "Why does get versionstamp() return a future that resolves with 0 bytes?",
      "slug": "why-does-get-versionstamp-return-a-future-that-resolves-with-0-bytes",
      "posts_count": 6,
      "reply_count": 3,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2020-08-18T22:42:03.399Z",
      "last_posted_at": "2020-08-21T17:40:12.261Z",
      "bumped": true,
      "bumped_at": "2020-08-21T17:40:12.261Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 544,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 776,
            "username": "dimi",
            "name": "Dimitri Bouniol",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dimi/{size}/879_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 319,
            "username": "kirilltitov",
            "name": "Kirill Titov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/kirilltitov/{size}/328_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Node bindings release 0.8.0, now with Versionstamp support in the tuple layer!",
      "id": 1035,
      "title": "Node bindings release 0.8.0, now with Versionstamp support in the tuple layer!",
      "slug": "node-bindings-release-0-8-0-now-with-versionstamp-support-in-the-tuple-layer",
      "posts_count": 14,
      "reply_count": 11,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2019-01-18T12:41:26.214Z",
      "last_posted_at": "2019-01-29T11:37:56.955Z",
      "bumped": true,
      "bumped_at": "2019-01-29T11:37:56.955Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 792,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 308,
            "username": "ananthakumaran",
            "name": "Anantha Kumaran",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 120,
            "username": "josephg",
            "name": "Seph Gentle",
            "avatar_template": "/user_avatar/forums.foundationdb.org/josephg/{size}/84_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 946,
        "username": "rajivr",
        "name": "Rajiv M Ranganath",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 946,
      "username": "rajivr",
      "name": "Rajiv M Ranganath",
      "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png"
    },
    "last_poster": {
      "id": 946,
      "username": "rajivr",
      "name": "Rajiv M Ranganath",
      "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png"
    },
    "links": [
      {
        "url": "https://github.com/rajivr/fdb/blob/1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696/fdb/examples/get_versionstamp.rs#L21-L68",
        "title": "fdb/get_versionstamp.rs at 1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696 \u00b7 rajivr/fdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 8,
        "user_id": 946,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/tuple/Versionstamp.html",
        "title": "Versionstamp (FoundationDB Java Client API)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 946,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/233a72a51182a1f35b9bad34ac29b127a437a12b/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContext.java#L437",
        "title": "fdb-record-layer/FDBRecordContext.java at 233a72a51182a1f35b9bad34ac29b127a437a12b \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/rajivr/fdb/blob/4858d1339bac32e2212ad1aaea152f810cd84633/fdb/examples/versionstamp.rs",
        "title": "fdb/versionstamp.rs at 4858d1339bac32e2212ad1aaea152f810cd84633 \u00b7 rajivr/fdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 946,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/rajivr/fdb/blob/1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696/fdb/src/transaction/transaction_context.rs",
        "title": "fdb/transaction_context.rs at 1d48f2e94cc0a3f8a9e4a544137e68b1af3f4696 \u00b7 rajivr/fdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 946,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/rajivr/fdb/blob/4858d1339bac32e2212ad1aaea152f810cd84633/fdb/src/database/fdb_database.rs#L83-L113",
        "title": "fdb/fdb_database.rs at 4858d1339bac32e2212ad1aaea152f810cd84633 \u00b7 rajivr/fdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 946,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}