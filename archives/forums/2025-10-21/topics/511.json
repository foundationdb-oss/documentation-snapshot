{
  "post_stream": {
    "posts": [
      {
        "id": 1472,
        "name": "Jan Rychter",
        "username": "jwr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "created_at": "2018-06-16T12:26:34.794Z",
        "cooked": "<p>I\u2019m currently using RethinkDB, but watching FoundationDB with great interest. I would like to ask about a use case involving changefeeds, which I think are a fantastic (but poorly understood) feature of RethinkDB. From what I can tell, the following cannot currently be achieved with FoundationDB:</p>\n<ul>\n<li>get a range of keys and set a watch on that range in a single transaction</li>\n<li>receive updated values when any of the watched keys is changed or when a new key is added in the range</li>\n</ul>\n<p>RethinkDB seems to be the only database that can do this today. The use case is:</p>\n<ul>\n<li>when a user logs in, set up a changefeed on that user\u2019s data (in RethinkDB this can be any query, but I\u2019m simply using a secondary index range),</li>\n<li>the changefeed gets all initial user data, gathering changes that happen during the initial download</li>\n<li>after the initial data load, get subsequent changes (including those that happened during the initial download)</li>\n<li>provide real-time updates in the user interface</li>\n</ul>\n<p>To narrow things down, I don\u2019t need to get <em>all</em> the updates, if a key is updated several times, I\u2019m fine with getting just the latest value. But I can\u2019t afford to miss changes, as that would leave the client UI out of sync.</p>\n<p>From what I understood from FoundationDB docs, only watches on single keys are supported, and even then I am not guaranteed not to miss changes (there is an ongoing discussion in another thread in the forums). I can\u2019t see any reason why what I described would not be possible fundamentally \u2014 but I might be missing something.</p>\n<p>Is this something that is (or will be) doable with FoundationDB?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-16T12:26:34.794Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1036,
        "reads": 110,
        "readers_count": 109,
        "score": 5188.8,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "Jan Rychter",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/streaming-data-out-of-foundationdb/683/2",
            "internal": true,
            "reflection": true,
            "title": "Streaming data out of FoundationDB",
            "clicks": 6
          },
          {
            "url": "https://forums.foundationdb.org/t/changes-feed-without-hot-keys/1057",
            "internal": true,
            "reflection": true,
            "title": "Changes feed without hot keys",
            "clicks": 5
          },
          {
            "url": "https://forums.foundationdb.org/t/understanding-watches/903/2",
            "internal": true,
            "reflection": true,
            "title": "Understanding \"Watches\"",
            "clicks": 3
          },
          {
            "url": "https://forums.foundationdb.org/t/feature-request-additional-atomic-operations/2782/3",
            "internal": true,
            "reflection": true,
            "title": "Feature Request: Additional atomic operations",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 307,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1475,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-16T14:13:03.771Z",
        "cooked": "<p>FoundationDB doesn\u2019t support setting watches on ranges, but as a client there are schemes you can setup to monitor changes to a range. In the example where you want to setup a change feed on a user\u2019s data, you could add a key that gets updated by the client every time an update is made to that user\u2019s data. Then you can set a watch on that key to know when the user\u2019s data is modified.</p>\n<p>With this, you won\u2019t know anything about the keys modified or their new values. To learn that, you could read the whole range and compare it with a version of the range that you\u2019ve cached, or you could store a record of changes in the database and read that to know what\u2019s new. If, for example, your watched key contains a <a href=\"https://apple.github.io/foundationdb/api-python.html?highlight=versionstamp#atomic-operations\">versionstamped value</a>, then you can also keep a list of modifications with versionstamped keys, and when your watch fires you can then read all new entries in your modification list with a versionstamp larger than your current versionstamp. In this scheme, you may need to have some way to clean up your modification history when it\u2019s no longer needed.</p>\n<p>Of course, to simplify the process of setting something like this up and using it, you could provide the ability to watch change feeds as part of a <a href=\"https://apple.github.io/foundationdb/layer-concept.html\">layer</a>. The complexity of the above would be managed by the layer while giving the user a simplified API that provides the features you need.</p>\n<p>With respect to missing updates, the only type of update that a watch may miss is an ABA update (i.e. value=A when the watch is started, changes to B, and then back to A). If you don\u2019t care about intermediate values but only care about the latest value, then this may not be an issue for you. In the scheme I described above where the value uses versionstamps, the value will monotonically increase and you can\u2019t get ABA updates.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-16T14:13:03.771Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 34,
        "reads": 108,
        "readers_count": 107,
        "score": 196.4,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/layer-concept.html",
            "internal": false,
            "reflection": false,
            "title": "Layer Concept \u2014 FoundationDB 5.1",
            "clicks": 40
          },
          {
            "url": "https://apple.github.io/foundationdb/api-python.html?highlight=versionstamp#atomic-operations",
            "internal": false,
            "reflection": false,
            "title": "Python API \u2014 FoundationDB 5.1",
            "clicks": 37
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1482,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-06-18T16:21:55.711Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"1\" data-topic=\"511\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>even then I am not guaranteed not to miss changes</p>\n</blockquote>\n</aside>\n<p>I somewhat remember that thread, but I can\u2019t find it. In any case, if you transactionally read a key and transactionally set a watch on that key, then the watch won\u2019t be registered with the database until commit time <em>but</em> it is set to fire whenever a write is detected following the <em>read</em>.</p>\n<p>The way this works is that as all FDB reads are versioned, the read is associated with some read version <em>v</em>. When a watch comes in, it is also associated with a version, in this case, the same version <em>v</em>. If there is a concurrent write to that key during the transaction\u2019s lifetime (i.e., between start time and commit time), then the most-recently-written version of that key must (by necessity) be greater than <em>v</em>, so the watch will fire. If there is no such write, when the watch gets to the database, it will see that there hasn\u2019t been a change yet and wait for one (firing then).</p>\n<p>But the key point here is that reading the key and setting the watch happen transactionally. If you do something like put a watch on some key and trigger a long running job when it completes and then set a new watch after the job has ended, you might miss any update that happens between your job beginning and ending. To close the gap there, you will need to verify when setting the watch that the key hasn\u2019t changed between job start and end time. If it has changed, then you would need to short circuit then and do whatever you do with a change. If it hasn\u2019t, then you can set the watch.</p>\n<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"2\" data-topic=\"511\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>With respect to missing updates, the only type of update that a watch may miss is an ABA update (i.e. value=A when the watch is started, changes to B, and then back to A).</p>\n</blockquote>\n</aside>\n<p>I will also add that if you go with something like keeping a change-log in the database, then you can actually notice these kinds of changes with some caveats.</p>\n<p>There are basically two ways to structure such a log. One is to keep track in one keyspace of the mapping from key to most-recently-modified version and another index from version to key. Then to get all updates, you read everything from the last time you\u2019ve read to the end of the version to key index. To modify a key, you atomically update (1) the key itself, (2) its most-recently-modified version (or this can be kept as part of the value associated with the key), (3) remove the old entry in the version to key mapping, and (4) add the new entry to that index. Then only the most recent updates are in the index, so getting the most up-to-date values of all of the keys is fast if that\u2019s all  you care about. (In particular, if there is a hot key that is updated a bunch, despite all of the writes, you will see it only once in the index.) On deletes, you might need to do something like write a tombstone value into the key so that readers know that whatever the key was representing has been deleted (and not just not updated), and at some point, you should probably clean out the tombstones.</p>\n<p>The other way is to keep instead an index from version to some kind of mutation representation (which is closer to a more traditional log). Then clients can munge through this mutation log to get updates instead. This gets all intermediate values if that\u2019s what\u2019s necessary, but it requires log rolling to avoid the log getting too big, which is another thing the client logic would have to handle.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-18T16:21:55.711Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 2,
        "incoming_link_count": 13,
        "reads": 103,
        "readers_count": 102,
        "score": 90.4,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1484,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-18T16:57:44.571Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"511\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>I will also add that if you go with something like keeping a change-log in the database, then you can actually notice these kinds of changes with some caveats.</p>\n</blockquote>\n</aside>\n<p>Just to avoid any confusion, my note about ABA updates was in reference to the key that actually had a watch set on it. Our watches may not fire in the presence of an ABA update on the watched key. In the scheme above, though, the watched key is always changed with an increasing version, so it avoids the ABA update behavior.</p>\n<p>Alec\u2019s comments are in regard to detecting ABA updates on the keys that you are actually interested in detecting changes on. In this case, that would be the range that we are keeping a change-log on. His advice applies to detecting changes (including ABA changes) to any of the keys in the target range.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-18T16:57:44.571Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 93,
        "readers_count": 92,
        "score": 33.6,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1545,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-06-23T15:51:21.285Z",
        "cooked": "<p>I\u2019m afraid that this thread, like the previous one about watches, might leave the reader with an impression that they are a lot harder to use correctly than (I think) they actually are.</p>\n<p>The basic idea of a watch is that you have something that you <em>could</em> monitor with a polling loop:</p>\n<pre><code>@fdb.transactional\ndef get_light_switch_state(tr):\n    return tr[\"light_switch\"] == \"on\"\nwhile True:\n    state = get_light_switch_state(db)\n    set_lamp_state( state )\n    time.sleep(1)\n</code></pre>\n<p>But this will either be slow to react (if the sleep is long) or use lots of resources (if the sleep is short).  So you can replace the sleep with a watch:</p>\n<pre><code>@fdb.transactional\ndef get_light_switch_state(tr):\n    return tr[\"light_switch\"] == \"on\", tr.watch( \"light_switch\" )\nwhile True:\n    state, watch = get_light_switch_state(db)\n    set_lamp_state( state )\n    watch.wait()\n</code></pre>\n<p>and for the most part it will \u201cpoll\u201d only when the state changes, but pretty quickly when it does, so you get the best of both worlds.  Watches should be totally reliable for anything that polling would in principle work for.</p>\n<p>Of course, if you change the light switch state and then change it back quickly, either version can \u201cmiss\u201d that \u201cABA\u201d update.  Neither of these methods should be used when the goal is to produce a log of updates.  The preferred approach to do the latter with FDB is to maintain such a log transactionally when doing the updates (as <a class=\"mention\" href=\"/u/alloc\">@alloc</a> explains above).  FDB also has the ability to log <em>all</em> updates to a given key range (this capability is used by the backup and DR tooling), but this facility is somewhat dispreferred and underdocumented because there is no way to provide FDB\u2019s excellent backward compatibility to applications dependent on the format of these logs.  They are likely to need updating to work correctly with new major versions of the database, and that\u2019s a significant disadvantage.</p>\n<p>Now to the original question: how can a layer or application best implement reactive features using FDB, where the data to be monitored for changes is not limited to a single key?  I think the most attractive design is to maintain an index of what is currently being watched, and at update time only keep track of changes for the watched things.  Depending on your data model and use case, you could make various decisions about what granularity to track each of these things at.  For your requirements, you would probably only track which keys have changed since the watch was created, rather than keeping a log, but the latter option is available for use cases that need it.</p>\n<p>Are there any features at the FDB level that would make this sort of thing more efficient?  Range watches analogous to our single key watches are feasible, and would provide a nice interface in many cases closely analogous to the light switch example I give above, but when they fired you would have to read the entire range to find out what was changed, which makes them generally less attractive than single key watches.  I think they would be unlikely to be the most efficient implementation of what you want, and they would come at some performance cost (the data structures for range watches on the storage server being somewhat slower than for individual keys).  So I\u2019m open to suggestions, but my first guess is that this is a very desirable layer feature but that the FDB API already offers the necessary low level tools.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-23T15:51:21.285Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 276,
        "reads": 87,
        "readers_count": 86,
        "score": 1397.4,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/transaction-log/785/3",
            "internal": true,
            "reflection": true,
            "title": "Transaction Log",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 12,
          "username": "ajbeamon",
          "name": "A.J. Beamon",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1546,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-06-24T17:05:53.803Z",
        "cooked": "<p>I prototyped a crude document database with changefeeds, to illustrate one possible approach to this problem: <a href=\"https://gist.github.com/davidscherer/2fb9aa34048c75470fec879df3c53f2a\" rel=\"nofollow noopener\">https://gist.github.com/davidscherer/2fb9aa34048c75470fec879df3c53f2a</a></p>\n<p>It\u2019s half-assed and unfinished in a number of ways, and I don\u2019t think the data structure I used is necessarily the best possible, but I still thought it was worth sharing.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-24T17:05:53.803Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 7,
        "reads": 78,
        "readers_count": 77,
        "score": 70.6,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://gist.github.com/davidscherer/2fb9aa34048c75470fec879df3c53f2a",
            "internal": false,
            "reflection": false,
            "title": "Crude document database with changefeeds, for illustrative purposes \u00b7 GitHub",
            "clicks": 102
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1574,
        "name": "Jan Rychter",
        "username": "jwr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "created_at": "2018-06-28T10:43:31.612Z",
        "cooked": "<p>Thanks for all the answers. I\u2019m quiet, not because I\u2019m ignoring the topic, but because I need to process the information and think about this carefully. I\u2019m not new to distributed systems, which is why the thought of implementing my own (correct) changefeed system scares me.</p>\n<p>I didn\u2019t know about versionstamped keys (they don\u2019t seem to be mentioned in the guides, only deeper in the API docs) \u2014 I can see how they can be extremely useful, but I need to start trying things out to understand exactly how.</p>\n<p>I\u2019m slightly curious why there are no watches on key ranges, though. It seems the basic functionality is already there, because that is exactly what transactions do: watch for changes to a key range.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-06-28T10:43:31.612Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 71,
        "readers_count": 70,
        "score": 29.2,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "Jan Rychter",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 307,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1589,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-07-03T00:56:45.626Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jwr\" data-post=\"7\" data-topic=\"511\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwr/48/302_2.png\" class=\"avatar\"> jwr:</div>\n<blockquote>\n<p>I\u2019m slightly curious why there are no watches on key ranges, though. It seems the basic functionality is already there, because that is exactly what transactions do: watch for changes to a key range.</p>\n</blockquote>\n</aside>\n<p>There\u2019s a few pieces to the answer to your question, and let\u2019s start off with single key watches before expanding out into range watches.</p>\n<p>The contract of a watch is that if the value of the key being watched permanently changes from the supplied value when watch is called at a version later than when the watch was set, then the watch will be triggered.  What you appear to be asking for (or expecting) is a contract that if the value is modified, then the watch fires.  The difference in implementation between these two is if version history is required.</p>\n<p>Watches become complicated in what to do if a client goes away for a while, and then tries to resume its watch.   If the system doesn\u2019t know if any changes occurred on the watched key in the version range the client is interested in, then it has two options: trigger the watch or not.  The former leads to systems that promise watches \u201cwill notify you if one or more changes might have happened\u201d, versus the latter, where FDB is trying to promise \u201cwill notify you when a change definitely has happened\u201d.  FDB can get into a situation where it doesn\u2019t know if a change happened between when a client started the watch and now because it only maintains 5 seconds of version history.  It appears that RethinkDB\u2019s change feeds are an example of the former, as if you\u2019re \u201cconnected\u201d then you get streamed notifications, but they make no guarantees of delivery.  FDB watches guarantee delivery in a sense, as under failure, the watch will retry, and \u201ceventually\u201d you\u2019ll be notified that a modification happened.</p>\n<p>Suppose that we had a storage engine that could maintain, for any key, the most recent version at which it was modified.  Then we would be able to support a watch of the form \u201cnotify me when key X was modified at a version later than Y\u201d, as at any point we\u2019d be able to know if a modification happened in that range by reading the key.  Extending the watch to a range still presents a complication: knowing if a key was modified between a starting version and now for a client that\u2019s missed version updates means a range read of the entire range, to see if there\u2019s any key that\u2019s been updated more recently.  That\u2019d be a somewhat expensive operation to be happening transparently, possibly by multiple clients, and particularly for watches that span a lot of data.</p>\n<p>I do think it\u2019s worth revisiting our watch API, particularly if we ever gain a natively MVCC storage engine.  It\u2019s possible that we\u2019d downgrade our watch API\u2019s contract to allow triggering the watch even if we\u2019re unsure that any change happened, but I kind of like the current \u201cit either happened or it didn\u2019t\u201d API\u2026</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-07-03T00:59:43.009Z",
        "reply_count": 1,
        "reply_to_post_number": 7,
        "quote_count": 1,
        "incoming_link_count": 14,
        "reads": 71,
        "readers_count": 70,
        "score": 104.2,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1630,
        "name": "Jan Rychter",
        "username": "jwr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "created_at": "2018-07-06T14:46:54.646Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a>: I think I am asking for something slightly simpler than versioning (and for the record, RethinkDB\u2019s changefeeds are described here: <a href=\"https://www.rethinkdb.com/docs/changefeeds/javascript/\" rel=\"nofollow noopener\">https://www.rethinkdb.com/docs/changefeeds/javascript/</a>). I also think the contract I\u2019m describing is weaker than what you described.</p>\n<p>If the client goes away (disconnects), I fully expect to have to re-initialize the watch. I do not expect to be able to ask for changes which happened since a specific version, only since I established the watch.</p>\n<p>What I\u2019m successfully using in RethinkDB right now are changefeeds of this type:</p>\n<pre><code class=\"lang-auto\">r.db(\"db\").table(\"some-table\").getAll(\"username\",{index:\"owner\"}).changes({\"squash\":true, \"includeInitial\":true,\"includeStates\":true})\n</code></pre>\n<p>This is a changefeed on all keys in a secondary index range (for a specific username). It sets up a point in \u201ctime\u201d when an initial snapshot is taken (as in the beginning of a transaction) and the \u201cwatch\u201d established. I then get an initial data dump, and subsequent changes. The changes are \u201csquashed\u201d, which means I might not get all of the changes to a particular document (value under the key), just the latest one. Notice that versions do not figure into this. If I disconnect, I have to set up another changefeed, thus re-downloading all the initial values and re-establishing the \u201cwatch\u201d.</p>\n<p>Having read your explanation, I think I can see a problem with implementing this: after a value changes, the watch is \u201cdone\u201d. It would need to be re-established automatically and atomically, or not disappear at all. But here again, I don\u2019t see versioning as necessary: I am interested in changes since I established the watch.</p>\n<p>So, I am not sure I follow everything you wrote: I do want to get notifications \u201cwhen a change definitely has happened\u201d, but only for those changes that happened since I established the watch. I don\u2019t think this is different from monitoring if certain keys have changed in a transaction. In a way, one could think of changefeeds as \u201cindefinitely open transactions\u201d.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-07-06T14:46:54.646Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 14,
        "reads": 67,
        "readers_count": 66,
        "score": 83.4,
        "yours": false,
        "topic_id": 511,
        "topic_slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
        "display_username": "Jan Rychter",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://www.rethinkdb.com/docs/changefeeds/javascript/",
            "internal": false,
            "reflection": false,
            "title": "Changefeeds in RethinkDB - RethinkDB",
            "clicks": 7
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 307,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/changefeeds-watching-and-getting-updates-on-ranges-of-keys/511/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1472,
      1475,
      1482,
      1484,
      1545,
      1546,
      1574,
      1589,
      1630
    ]
  },
  "timeline_lookup": [
    [
      1,
      2684
    ],
    [
      3,
      2682
    ],
    [
      5,
      2677
    ],
    [
      6,
      2676
    ],
    [
      7,
      2672
    ],
    [
      8,
      2668
    ],
    [
      9,
      2664
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Changefeeds (watching and getting updates on ranges of keys)",
  "id": 511,
  "title": "Changefeeds (watching and getting updates on ranges of keys)",
  "posts_count": 9,
  "created_at": "2018-06-16T12:26:34.710Z",
  "views": 4221,
  "reply_count": 7,
  "like_count": 2,
  "last_posted_at": "2018-07-06T14:46:54.646Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
  "category_id": 7,
  "word_count": 3079,
  "deleted_at": null,
  "user_id": 307,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_511",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 9,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 5,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Changes feed without hot keys",
      "id": 1057,
      "title": "Changes feed without hot keys",
      "slug": "changes-feed-without-hot-keys",
      "posts_count": 8,
      "reply_count": 4,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2019-01-24T21:54:58.266Z",
      "last_posted_at": "2019-01-25T20:22:00.709Z",
      "bumped": true,
      "bumped_at": "2019-01-25T20:22:00.709Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1474,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 491,
            "username": "iilyak",
            "name": "Iilyak",
            "avatar_template": "/user_avatar/forums.foundationdb.org/iilyak/{size}/1073_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 308,
            "username": "ananthakumaran",
            "name": "Anantha Kumaran",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 423,
            "username": "kocolosk",
            "name": "Adam Kocoloski",
            "avatar_template": "/user_avatar/forums.foundationdb.org/kocolosk/{size}/412_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Watchers and not missing changes",
      "id": 474,
      "title": "Watchers and not missing changes",
      "slug": "watchers-and-not-missing-changes",
      "posts_count": 14,
      "reply_count": 6,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-25T13:29:22.034Z",
      "last_posted_at": "2018-06-05T23:23:48.371Z",
      "bumped": true,
      "bumped_at": "2018-06-05T23:23:48.371Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 1999,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 289,
            "username": "rowanG",
            "name": "Rowan Goemans",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 298,
            "username": "gwillis12",
            "name": "Geo",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png",
            "trust_level": 0
          }
        }
      ]
    },
    {
      "fancy_title": "Understanding &ldquo;Watches&rdquo;",
      "id": 903,
      "title": "Understanding \"Watches\"",
      "slug": "understanding-watches",
      "posts_count": 10,
      "reply_count": 4,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2018-11-26T17:28:09.202Z",
      "last_posted_at": "2018-11-27T17:28:33.763Z",
      "bumped": true,
      "bumped_at": "2018-11-27T17:28:33.763Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 3295,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 437,
            "username": "MansurAshraf",
            "name": "Mansur Ashraf",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/b9bd4f/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 435,
            "username": "ArchDev",
            "name": "Arthur Kushka",
            "avatar_template": "/user_avatar/forums.foundationdb.org/archdev/{size}/425_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Transaction.Watch Examples?",
      "id": 257,
      "title": "Transaction.Watch Examples?",
      "slug": "transaction-watch-examples",
      "posts_count": 6,
      "reply_count": 2,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2018-04-25T03:34:54.216Z",
      "last_posted_at": "2018-10-23T12:05:15.737Z",
      "bumped": true,
      "bumped_at": "2018-10-23T12:05:15.737Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 2822,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 174,
            "username": "seddonm1",
            "name": "seddonm1",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/e274bd/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 265,
            "username": "brainfucker",
            "name": "Illarionov Oleg",
            "avatar_template": "/user_avatar/forums.foundationdb.org/brainfucker/{size}/237_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Fdb-zk: rough cut of Zookeeper API layer",
      "id": 1278,
      "title": "Fdb-zk: rough cut of Zookeeper API layer",
      "slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-04-03T02:54:03.579Z",
      "last_posted_at": "2019-04-09T04:13:12.883Z",
      "bumped": true,
      "bumped_at": "2019-04-09T04:13:12.883Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 5102,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 113,
            "username": "pH14",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 307,
        "username": "jwr",
        "name": "Jan Rychter",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 307,
      "username": "jwr",
      "name": "Jan Rychter",
      "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png"
    },
    "last_poster": {
      "id": 307,
      "username": "jwr",
      "name": "Jan Rychter",
      "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png"
    },
    "links": [
      {
        "url": "https://gist.github.com/davidscherer/2fb9aa34048c75470fec879df3c53f2a",
        "title": "Crude document database with changefeeds, for illustrative purposes \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 102,
        "user_id": 22,
        "domain": "gist.github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://apple.github.io/foundationdb/layer-concept.html",
        "title": "Layer Concept \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 40,
        "user_id": 12,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/api-python.html?highlight=versionstamp#atomic-operations",
        "title": "Python API \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 37,
        "user_id": 12,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://www.rethinkdb.com/docs/changefeeds/javascript/",
        "title": "Changefeeds in RethinkDB - RethinkDB",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 307,
        "domain": "www.rethinkdb.com",
        "root_domain": "rethinkdb.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/streaming-data-out-of-foundationdb/683/2",
        "title": "Streaming data out of FoundationDB",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 6,
        "user_id": 8,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/changes-feed-without-hot-keys/1057",
        "title": "Changes feed without hot keys",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 5,
        "user_id": 491,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/understanding-watches/903/2",
        "title": "Understanding \"Watches\"",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 3,
        "user_id": 12,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/transaction-log/785/3",
        "title": "Transaction Log",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 22,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/feature-request-additional-atomic-operations/2782/3",
        "title": "Feature Request: Additional atomic operations",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 491,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}