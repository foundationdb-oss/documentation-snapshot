{
  "post_stream": {
    "posts": [
      {
        "id": 2300,
        "name": "Caleb Spare",
        "username": "cespare",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cespare/{size}/36_2.png",
        "created_at": "2018-10-10T01:28:42.543Z",
        "cooked": "<p>(I previously asked about key expiry <a href=\"https://forums.foundationdb.org/t/designing-key-value-expiration-in-fdb/156\">here</a> \u2013 this is a different, but related, use case.)</p>\n<p>I\u2019m considering FDB for a use case with the following properties:</p>\n<ul>\n<li>Simple key-value storage</li>\n<li>Keys are 8-byte hashes</li>\n<li>Values are large (mean 5k) binary blobs</li>\n<li>Each key/value pair expires after T time has passed (perhaps 24h)</li>\n<li>Keys are never deleted apart from expiration</li>\n<li>Writes to existing keys must be rejected</li>\n<li>The rate of writes is fairly high (10k/sec)</li>\n<li>The rate of reads is low (500/sec)</li>\n<li>Most reads are either for nonexistent keys or for recently written keys</li>\n</ul>\n<p><strong>Option A</strong> would be to store the values with the expiry keys:</p>\n<pre><code class=\"lang-auto\">(timestamp, key) -&gt; value\n(key) -&gt; timestamp\n</code></pre>\n<p><strong>Option B</strong> is to store the values with the primary keys:</p>\n<pre><code class=\"lang-auto\">(timestamp, key) -&gt; \"\"\n(key) -&gt; value\n</code></pre>\n<p>I was leaning toward A because then the data that expires at the same time should be sequential, so I would think that writes and deletes would be more efficient. But on the other hand, does this concentrate lots of writes on the same FDB process?</p>\n<p>With B reads only have to consult the primary key, not the expiry key, but given the high write:read ratio I don\u2019t care about optimizing for reads. (Note that writes have to consult the PK in either A or B because of the need to detect and reject duplicate keys.)</p>\n<p>Should I go with A or B or something else entirely?</p>\n<p>Is FoundationDB a good fit for this use case? I think the common wisdom is that B-tree based DBs are best for read-heavy workloads and you want an LSM for write-heavy workloads, but it seems that FDB should be okay for this given enough machines with fast SSDs.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-10-10T01:28:42.543Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 965,
        "reads": 62,
        "readers_count": 61,
        "score": 4832.4,
        "yours": false,
        "topic_id": 758,
        "topic_slug": "designing-an-expiring-key-value-store",
        "display_username": "Caleb Spare",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/designing-key-value-expiration-in-fdb/156",
            "internal": true,
            "reflection": false,
            "title": "Designing key/value expiration in FDB",
            "clicks": 19
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 44,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/designing-an-expiring-key-value-store/758/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 2306,
        "name": "Jay Kominek",
        "username": "jkominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "created_at": "2018-10-10T19:46:48.149Z",
        "cooked": "<p>Do you care about making keys appear expired in the seconds to minutes between the exact moment of expiration, and the time when some garbage collection process can clean those records up? If you don\u2019t, option B (or option B with the key spread around the timestamp to spread out writes) seems ok; depending on the rate of rejected writes you might be pulling down a lot of 5k blobs though.</p>\n<p>If so, you\u2019d need an efficient way to go from key to timestamp, which eliminates option B.</p>\n<p>I don\u2019t claim any particular expertise, but given your description, I would try to do something like:</p>\n<pre><code>'k', key -&gt; value\n't', key -&gt; timestamp\n's', key[0], timestamp, key[1:7] -&gt; empty\n</code></pre>\n<p>To read you pull the key from the k and t prefixes, if the timestamp is old, you can return nothing.</p>\n<p>To write you check for the key in the t space, and can abort or overwrite the old value as appropriate. Writing fills out all three keys, with the s space splitting the key up on either side of the timestamp, to spread the writes out across processes.</p>\n<p>Garbage collection can proceed in parallel by searching each of the 256 subspaces of s for timestamps that have expired. Expiration becomes just a performance/space optimization, as the reads/writes can still function and efficiently implement your expiration even if the garbage collector never runs.</p>\n<p>(On further consideration, maybe your option A with the key splitting trick would be fine?)</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-10-10T19:50:04.946Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 14,
        "reads": 56,
        "readers_count": 55,
        "score": 101.2,
        "yours": false,
        "topic_id": 758,
        "topic_slug": "designing-an-expiring-key-value-store",
        "display_username": "Jay Kominek",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/how-to-troubleshoot-throughput-performance-degrade/1436/3",
            "internal": true,
            "reflection": true,
            "title": "How to troubleshoot throughput performance degrade?",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 173,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/designing-an-expiring-key-value-store/758/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2307,
        "name": "Caleb Spare",
        "username": "cespare",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cespare/{size}/36_2.png",
        "created_at": "2018-10-10T20:06:19.414Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jkominek\" data-post=\"2\" data-topic=\"758\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jkominek/48/140_2.png\" class=\"avatar\"> jkominek:</div>\n<blockquote>\n<p>Do you care about making keys appear expired in the seconds to minutes between the exact moment of expiration, and the time when some garbage collection process can clean those records up?</p>\n</blockquote>\n</aside>\n<p>I was planning on checking the timestamp and returning \u201cdoes not exist\u201d for expired-but-not-deleted keys.</p>\n<p>(I didn\u2019t write it down, but I was planning on storing the timestamp with the value in option B; it\u2019s necessary to have the timestamp available for all reads.)</p>\n<p>Thanks for the key spreading idea \u2013 that\u2019s clever.</p>\n<p>I feel like A plus key-spreading is the best contender given what I\u2019m assuming and what you wrote. B is even simpler, though \u2013 I wonder what the performance hit of not consolidating values-to-delete-together is. I\u2019ll probably have to benchmark.</p>\n<p>Thanks for the feedback!</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-10-10T20:06:19.414Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 54,
        "readers_count": 53,
        "score": 20.8,
        "yours": false,
        "topic_id": 758,
        "topic_slug": "designing-an-expiring-key-value-store",
        "display_username": "Caleb Spare",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 44,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/designing-an-expiring-key-value-store/758/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2308,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-10-10T20:56:52.352Z",
        "cooked": "<p>What happens if the system clock of the garbage collecting process shifts far in the future, or the past? It would either instantly wipe all newly inserted keys, or never garbage collect them. Even with NTP properly set up, a single mistake by someone or something on one of the physical host for your process could wipe all data (<em>I have recently observed some event log entries in one of my servers that are dated December 12th of 2018, and have NO idea how they got there</em>)</p>\n<p><strong>EDIT</strong>: and the reverse is also true: if the clock of one of the processes that writes keys would have drifted in the future, you\u2019ll end up with a batch of keys that would stick around for far longer than 24h (in my case above, it would have lasted a few months).</p>\n<p>Using VersionStamps, or read/commit versions to extrapolate a notion of \u201ctime elapsed since\u201d could maybe help solve this? (as long as you don\u2019t need to-the-second precision but \u201cabout 24h more or less\u201d)</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-10-10T21:05:09.717Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 7,
        "reads": 54,
        "readers_count": 53,
        "score": 50.8,
        "yours": false,
        "topic_id": 758,
        "topic_slug": "designing-an-expiring-key-value-store",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/designing-an-expiring-key-value-store/758/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2314,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-10-11T04:22:58.609Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"cespare\" data-post=\"1\" data-topic=\"758\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cespare/48/36_2.png\" class=\"avatar\"> cespare:</div>\n<blockquote>\n<p>Is FoundationDB a good fit for this use case? I think the common wisdom is that B-tree based DBs are best for read-heavy workloads and you want an LSM for write-heavy workloads, but it seems that FDB should be okay for this given enough machines with fast SSDs.</p>\n</blockquote>\n</aside>\n<p>FDB can do okay at this.  You\u2019re looking to drive ~50MB/s of write load, which I\u2019ve seen FDB do.</p>\n<p>Your workload description does hit the exact checkboxes of:</p>\n<ul>\n<li>Significantly more writes than reads</li>\n<li>All keys are independent and uncorrelated</li>\n<li>Ordering of keys is unimportant</li>\n</ul>\n<p>That largely means most of FDB\u2019s features aren\u2019t actually interesting or helpful for you.  If you\u2019re already running a Cassandra/HBase/Riak/etc.-style database internally, then this use case would fit well on one of those.  But either way, you should probably just optimize for whatever is operationally the most sane for you to do, so if you\u2019re already mainly running FoundationDB, then put the use case on FDB for the operational sanity.</p>\n<aside class=\"quote no-group\" data-username=\"cespare\" data-post=\"1\" data-topic=\"758\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cespare/48/36_2.png\" class=\"avatar\"> cespare:</div>\n<blockquote>\n<p>I was leaning toward A because then the data that expires at the same time should be sequential, so I would think that writes and deletes would be more efficient. But on the other hand, does this concentrate lots of writes on the same FDB process?</p>\n</blockquote>\n</aside>\n<p>I would recommend spreading the load across the key space.  Most ordered databases struggle when every key you write is strictly greater than every key previously written.  FDB less so than others, but it still makes trying to evenly distribute load across the cluster rather difficult.</p>\n<p>Sometimes one can push garbage collection work to clients.   Assuming your keys are well distributed, if instead of looking up a key in <code>'t'</code> to test its existence, you do a prefix range read of the first 3 bytes of the key in <code>'t'</code>, then you\u2019ll have a range read cover every key in the database about five times a day (so expected 20% overhead for storing to-be-expired values).  If you write your client to also asynchronously expire other keys in the database when it does a write, then you don\u2019t need a second garbage collection process.</p>\n<p>( According to birthday paradox, You\u2019d expect to two keys to land in the same 256^3 buckets once reaching sqrt(2^8^3) = ~5000 values. )</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"4\" data-topic=\"758\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Using VersionStamps, or read/commit versions to extrapolate a notion of \u201ctime elapsed since\u201d could maybe help solve this? (as long as you don\u2019t need to-the-second precision but \u201cabout 24h more or less\u201d)</p>\n</blockquote>\n</aside>\n<p>I think this still doesn\u2019t protect you from significant time drift between servers.  I think you could see a large version jump if a recovery moved the master from a machine behind in time to one forward in time.  Repeated recoveries would accelerate the passage of time, though probably on just O(minutes) realistically.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2018-10-11T04:22:58.609Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 2,
        "incoming_link_count": 12,
        "reads": 50,
        "readers_count": 49,
        "score": 70.0,
        "yours": false,
        "topic_id": 758,
        "topic_slug": "designing-an-expiring-key-value-store",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/designing-an-expiring-key-value-store/758/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      2300,
      2306,
      2307,
      2308,
      2314
    ]
  },
  "timeline_lookup": [
    [
      1,
      2569
    ],
    [
      2,
      2568
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Designing an expiring key/value store",
  "id": 758,
  "title": "Designing an expiring key/value store",
  "posts_count": 5,
  "created_at": "2018-10-10T01:28:42.464Z",
  "views": 2598,
  "reply_count": 1,
  "like_count": 1,
  "last_posted_at": "2018-10-11T04:22:58.609Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "designing-an-expiring-key-value-store",
  "category_id": 7,
  "word_count": 1383,
  "deleted_at": null,
  "user_id": 44,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_758",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 5,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Designing key/value expiration in FDB",
      "id": 156,
      "title": "Designing key/value expiration in FDB",
      "slug": "designing-key-value-expiration-in-fdb",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2018-04-20T22:03:24.598Z",
      "last_posted_at": "2018-04-21T00:18:33.401Z",
      "bumped": true,
      "bumped_at": "2018-04-21T00:18:33.401Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 3439,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 44,
            "username": "cespare",
            "name": "Caleb Spare",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cespare/{size}/36_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Keyspace partitions &amp; performance",
      "id": 168,
      "title": "Keyspace partitions & performance",
      "slug": "keyspace-partitions-performance",
      "posts_count": 9,
      "reply_count": 5,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-04-21T05:03:54.670Z",
      "last_posted_at": "2018-04-22T03:29:31.049Z",
      "bumped": true,
      "bumped_at": "2018-04-22T03:29:31.049Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 5892,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 113,
            "username": "pH14",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 9,
            "username": "mbhaskar",
            "name": "Bhaskar Muppana",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FoundationDB cluster performance issue - Periods of high disk I/O and sustained high latency",
      "id": 2184,
      "title": "FoundationDB cluster performance issue - Periods of high disk I/O and sustained high latency",
      "slug": "foundationdb-cluster-performance-issue-periods-of-high-disk-i-o-and-sustained-high-latency",
      "posts_count": 22,
      "reply_count": 17,
      "highest_post_number": 22,
      "image_url": null,
      "created_at": "2020-06-15T15:45:43.650Z",
      "last_posted_at": "2020-07-06T06:50:56.594Z",
      "bumped": true,
      "bumped_at": "2020-07-06T06:50:56.594Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2571,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 779,
            "username": "imtdk",
            "name": null,
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/i/22d042/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 747,
            "username": "ashishgupta",
            "name": "Ashish Gupta",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Scalable time series database / Improving write throughput",
      "id": 2032,
      "title": "Scalable time series database / Improving write throughput",
      "slug": "scalable-time-series-database-improving-write-throughput",
      "posts_count": 9,
      "reply_count": 4,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2020-03-29T21:33:25.875Z",
      "last_posted_at": "2020-03-30T22:48:00.513Z",
      "bumped": true,
      "bumped_at": "2020-03-30T22:48:00.513Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1709,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 744,
            "username": "v-pap",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/v-pap/{size}/936_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Log abstraction on FoundationDB",
      "id": 117,
      "title": "Log abstraction on FoundationDB",
      "slug": "log-abstraction-on-foundationdb",
      "posts_count": 10,
      "reply_count": 3,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2018-04-20T10:47:11.941Z",
      "last_posted_at": "2018-05-03T17:35:34.126Z",
      "bumped": true,
      "bumped_at": "2018-05-03T17:35:34.126Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 3110,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 78,
            "username": "pineapple",
            "name": "Brian Haslet",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 44,
        "username": "cespare",
        "name": "Caleb Spare",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cespare/{size}/36_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 173,
        "username": "jkominek",
        "name": "Jay Kominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 44,
      "username": "cespare",
      "name": "Caleb Spare",
      "avatar_template": "/user_avatar/forums.foundationdb.org/cespare/{size}/36_2.png"
    },
    "last_poster": {
      "id": 13,
      "username": "alexmiller",
      "name": "Alex Miller",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
    },
    "links": [
      {
        "url": "https://forums.foundationdb.org/t/designing-key-value-expiration-in-fdb/156",
        "title": "Designing key/value expiration in FDB",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 19,
        "user_id": 44,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}