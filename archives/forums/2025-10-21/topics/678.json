{
  "post_stream": {
    "posts": [
      {
        "id": 2026,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-09-03T19:04:26.371Z",
        "cooked": "<p>Implementing a SQL database as a layer with a mutable schema logically requires storing the schema somewhere. In order to use that schema, it needs to be read during a transaction, or somehow updated in a local cache before the query starts.</p>\n<p>Is there a strategy that has worked for this type of pattern in the past that allows schema modifications to be atomic?</p>\n<p>The first problem is that simply reading the schema on every transaction would bottleneck throughput at the throughput of the storage servers where the keys for the schema are. Storing the schema in some sort of a log structure and using a <code>watch</code> would make it eventually consistent as far as I can tell, which may or may not be a problem, but would require more work at the layer level to present a consistent view to the end-user.</p>\n<p>A third option is storing the schema in multiple places such that each copy is most likely on a different storage server, and updating all copies whenever the schema changes. This would potentially bump up against limits around how much data can be written in a single transaction, but that would be quite a large schema! The layer process would pick a spot to read the schema from at random from the spots it has been written to.</p>\n<p>Am I missing any more options that would allow me to provide transactional schema modifications? This is all assuming the DDL in question does not require writing any new data.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-03T19:06:07.182Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 181,
        "reads": 51,
        "readers_count": 50,
        "score": 917.2,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/whats-the-purpose-of-the-directory-layer/677/4",
            "internal": true,
            "reflection": true,
            "title": "What's the purpose of the Directory layer?",
            "clicks": 1
          },
          {
            "url": "https://forums.foundationdb.org/t/a-few-design-pattern-check-my-understanding-questions/1153/10",
            "internal": true,
            "reflection": true,
            "title": "A few design-pattern + check-my-understanding questions",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 2027,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-09-03T19:54:37.208Z",
        "cooked": "<p>If you haven\u2019t skimmed through the paper on <a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41376.pdf\" rel=\"nofollow noopener\">F1\u2019s schema changes</a>, I\u2019d highly recommend it.</p>\n<p>As commented in the paper, you\u2019d probably wish to do explicit reads every so often rather than a watch, as theoretically, your layer process could be partitioned away from only the storage servers that have the schema.  Watches give you no notification of this, which means that partitioned layer processes could continue to process user queries at significantly older schema versions, potentially causing you to have inconsistent data.  If you require re-reading the schema every 1 minute, and refuse to answer queries if you haven\u2019t read the schema within the past minute, then you\u2019ll prevent this.</p>\n<p>Presenting a consistent view of a schema change to a client would only require consistency within a session, which is much easier to do than across a whole database.  Your clients can always send the most recent version of the schema that it knows about.  If the server doesn\u2019t have that version yet, it waits until it does to handle the query (or goes and fetches the schema, or returns a retryable error).  If the server has a newer schema, then it corrects the client and distributes the new schema with the version.</p>\n<hr>\n<p>If you wanted the completely atomic cutover semantics, I feel like implementing support in FDB to be able to:</p>\n<ol>\n<li>Read from the storage-server local data  (that\u2019s secretly maintained in \\xFF\\xFF\\xFF, but completely inaccessible from outside the storage server currently)</li>\n<li>Do commits that push to this space on every storage server</li>\n</ol>\n<p>Would give you your easy way to do a local read on any storage server to get your schema.  A schema would change atomically at a version, and any server you contact for a read should also be able to give you the schema metadata.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-03T19:54:37.208Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 49,
        "readers_count": 48,
        "score": 24.8,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41376.pdf",
            "internal": false,
            "reflection": false,
            "clicks": 37
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2028,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-09-03T21:00:38.801Z",
        "cooked": "<p>The atomic cutover semantics would be ideal. Modifying FoundationDB to add that feature definitely sounds useful and I could see other types of small reference data that are needed frequently by layers using it.</p>\n<p>The F1 schema evolution paper and the concept of schema leases gave me an idea as well. If you limit the scope of the problem from \u201cthe schema can change at any time\u201d to \u201cthe schema can change at most once every N database versions\u201d where N is a sufficiently long window to keep the read rate low on the schema keys, a new schema could be written to a database version in the future. It would perform the same operations as described in the F1 paper around schema leases. So long as N is less than the maximum duration of a transaction, you wouldn\u2019t need extra write fencing because that would be handled by FoundationDB not allowing a commit of older than the maximum duration.</p>\n<p>I would have to think about this a bit more, but I think you could rely on the database version to provide the atomic cutover if you narrowed the problem as I described.</p>\n<p>That paper is very helpful regardless, so thanks!</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-03T21:00:38.801Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 7,
        "reads": 44,
        "readers_count": 43,
        "score": 43.8,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2029,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-09-04T00:38:50.973Z",
        "cooked": "<p>Just for clarity, \u201cwrite to a database version in the future\u201d, I mean take the read version of a transaction and increment it by N, then write the schema back at that calculated key.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-04T00:38:50.973Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 42,
        "readers_count": 41,
        "score": 18.4,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2030,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-09-04T02:41:25.657Z",
        "cooked": "<p>I think you have a few ideas already on how this might be done. In addition to what <a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a> wrote, I will add a few of my own thoughts.</p>\n<hr>\n<p>One strategy that can be used is to \u201cversion\u201d your schema, either with some kind of hash, some kind of incrementing \u201cschema version\u201d number, or some combination of the two. As you suggested, you can keep multiple copies of the schema version information around in the database. Because this version/hash information is a lot smaller than the schema itself, you can probably get away with doing this without needing to worry about hitting the transaction size limit (of let\u2019s say 1 MB). So for most operations, your flow is:</p>\n<ol>\n<li>Pick a schema version key at random.</li>\n<li>Check if the version is the same as your cached schema.</li>\n<li>If not, read the schema from the place where the schema is stored and cache it for future operations.</li>\n<li>Perform operation.</li>\n</ol>\n<p>Then to do schema update, its:</p>\n<ol>\n<li>Write the new schema to the schema place.</li>\n<li>Update all of the version/hash keys.</li>\n<li>Commit your single transaction.</li>\n</ol>\n<p>If you had, let\u2019s say, 100 such keys then the transaction is, what, maybe 50 bytes per version key plus the schema size, so let\u2019s so 5 kB for the version keys and however large your schema is. This can easily be done in a single transaction.</p>\n<p>Additionally, I would assume that for a sufficiently complicated schema, deserializing it from the database and producing a version of it that you could use within your application is costly enough that you wouldn\u2019t want to do it with every operation. So even if you had a single version/hash key that you consulted every time (which would be a hot-key, yes), then at least you wouldn\u2019t have to grab the full schema each time.</p>\n<p>Notice that nothing in the above required a change in the FoundationDB software. (In other words, it could be implemented by a layers developer today.) In some sense, most of the other suggestions I\u2019ve come across on how you could better handle this all kind of boil down to, \u201cHow could you make it easier for FoundationDB to do (what\u2019s described above) for someone?\u201d This would include:</p>\n<ul>\n<li>The ability to mark some keyspaces as requiring additional replication. Then your schema version queries would be load-balanced across more servers (i.e., across the additional replicas), so at least you\u2019ve got that going for you, which is nice.</li>\n<li>If I\u2019m understanding <a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a>\u2019s suggestion correctly, the idea that each storage server could keep schema information in its local storage. In some sense, this is taking the idea that some keyspaces should get additional replication <em>ad infinitum</em> and just putting that information everywhere. As long as there aren\u2019t too much schema data (e.g., probably fine for the schema version; maybe not fine for the schema itself, or maybe both are fine), this should work. (I believe <a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a> is also coupling the storage of the meta-data with server side schema-validation. I think this is optional, as the client could also just verify this if they have access to it, though I can see the performance boost from saving a round trip).</li>\n</ul>\n<p>But even with the additional optimizations, the above does require an extra read at the beginning of every operation (i.e., an extra round trip), which would be nice to avoid. There are a few ways of fixing that, some of which require FoundationDB to change.</p>\n<p>One that doesn\u2019t is somewhat analogous to your suggestion that you could write a database version in the future. I think that would work, but I would suggest using the commit version of the schema-updating-transaction rather than the read version (which can be determined by using the <a href=\"https://apple.github.io/foundationdb/api-python.html#fdb.Transaction.set_versionstamped_value\">set_versionstamped_value</a> mutation). I think this is necessary because if you want to enforce that meta-data mutations don\u2019t happen more often than once every N database versions, then when you need to make sure that when you write out the meta-data update that the new version is at least N database versions then your commit version (or you might have other transactions who read the schema information after your read but prior to your commit who now have fewer than N database versions between now and when the schema is updated). I suppose if you somehow knew <a href=\"https://github.com/apple/foundationdb/blob/f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889/fdbserver/Knobs.cpp#L34\">the maximum number of database versions that could exist between a transaction\u2019s read version and its commit version</a>, you could take that into account when you wrote the version at which your meta-data should start being used, but even with that, it seems safer to me to use the commit version.</p>\n<p>Then you can almost do something like:</p>\n<ol>\n<li>Get the read version of a transaction.</li>\n<li>Check to see if the read version is before or after the atomic switchover version.</li>\n<li>If before use old schema; if after, use new schema.</li>\n</ol>\n<p>The problem occurs if there is a transaction that starts (i.e., gets its read version) <em>before</em> the atomic switchover version but commits (i.e., gets its commit version) <em>after</em> the atomic switchover version. I believe you could probably get around this by having two switchover versions, the first of which is the version that it is no longer safe to perform reads after and another version (which must be at least as big as the maximum gap between a read version and a commit version for a given transaction\u2013<a href=\"https://github.com/apple/foundationdb/blob/f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889/fdbserver/Knobs.cpp#L34\">whatever that is</a>) after which no <em>writes</em> can take place at the old version. If this is possible or not will depend on the nature of the schema change, and some will only require a single version. For example, if you add a table, then I think one version is fine unless you have any cross-table constraints (like foreign key constraints). For something like dropping an index, you can do things like stop allowing any queries to that index starting with the first version, accept that maybe a few extra inserts will write index entries to the index between the read-cutoff-version and the write-cutoff-version, and then delete the index data after the write-cutoff-version.</p>\n<p>I don\u2019t like that that solution requires knowing the maximum difference between a transaction read version and a transaction commit version (which really sounds like database internals to me that the user shouldn\u2019t rely on). Correctly orchestrating the list of read-acceptable and write-acceptable things for each part of the schema seems like it could be difficult to me as well, though the F1 paper that <a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a> mentioned kind of goes into this, so maybe it wouldn\u2019t actually be that hard. You also need something along those lines anyway (probably) to handle things like adding an index, where the index has to be back-filled with old data and updated inline with new data, so maybe it\u2019s not so bad. Hm.</p>\n<p>One thing you could do to solve that problem would be to have the ability to add a write-conflict-key in the future. This does not exist write now, but if it did, then you could theoretically use it to invalidate any transactions that cross the atomic switchover line. The problem, however, is that that would have to be durable (in the general case\u2013if it is mandated that this version is less than the number of versions that <a href=\"https://github.com/apple/foundationdb/blob/f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889/fdbserver/Knobs.cpp#L261\">gets increased during a recovery</a>, whatever that may be, it might actually be fine to leave it as an in-memory only thing), which means writing it somewhere that probably isn\u2019t super scalable, though maybe it\u2019s fine if it\u2019s an \u201cupdated once every day at most\u201d kind of value.</p>\n<p>There are also a few changes you could imagine to FoundationDB that would make it possible to do this kind of thing without the extra round trip, but they would require some internals changes. From what I can recall being suggested by other people at other times, they would be:</p>\n<ul>\n<li>The addition of a piece of meta-data that is returned with a get-read-version call. This meta-data should be user-settable (or maybe user incrementable), the idea being that each time the schema is updated, you also update this key. Then you can essentially use it as, like, a \u201ccache invalidation\u201d token. In some sense, this is the <em>opposite</em> of some of the other suggestions that have suggested spreading the meta-data out to more places insofar as it is putting this information into a <em>centralized</em> location and instead depending on the fact that it\u2019s going to places that we already need to check during a transaction\u2019s lifecycle in order to make work. This key would be relatively low-throughput and wouldn\u2019t scale well to having more than 1 (or, well, maybe more than like 10), but maybe that\u2019s fine for this purpose.</li>\n<li>This would only work for read-write transactions (or read-only transactions where the read-conflict ranges get verified at the end\u2013which is not the case right now), but if you could set a read-conflict-key for a key \u201cin the past\u201d, then you could imagine adding that conflict range to your schema version key. Then your transaction will be failed at commit time if the schema has been changed. The issue <em>here</em> is that you have to be able to handle arbitrarily bad looking data during the course of any transaction who gets a read version after the change has happened but doesn\u2019t learn that it is an old schema version until later. (And of course, you have no ability to validate everything is fine for read-only transactions.)</li>\n</ul>\n<hr>\n<p>There is another strategy that maybe doesn\u2019t require an FoundationDB changes, but it is a little harder to pull off. Here the strategy is that you could design your app to have two modes:</p>\n<ul>\n<li>Optimistic mode: Always assume the schema is up to date.</li>\n<li>Pessimistic mode: Never assume the schema is up to date.</li>\n</ul>\n<p>Most of the time, you run in optimistic mode for performance reasons. Right before you change the meta-data, you push out a change (maybe a new version of your application; maybe you change some runtime property if you can do that) and switch your application to pessimistic mode, so now maybe you have a hot key or maybe all of your operations require an extra round trip or whatever. Then you push the meta-data change, and everything starts to use that (which is picked up right away because they are all in pessimistic mode). Then you switch your application back to optimistic mode.</p>\n<p>This only works if you can be <em>certain</em> that all of your application instances switch over to the new mode and back. If it\u2019s possible that you have some app instances that are partitioned away from the main system and might miss the update, then you can get into a really bad situation where you have multiple schema versions being used at once. For this reason, I generally wouldn\u2019t recommend it, but it\u2019s possible that it might work in some environments.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-04T02:41:25.657Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 44,
        "readers_count": 43,
        "score": 68.8,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-python.html#fdb.Transaction.set_versionstamped_value",
            "internal": false,
            "reflection": false,
            "title": "Python API \u2014 FoundationDB 5.2",
            "clicks": 2
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889/fdbserver/Knobs.cpp#L34",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/Knobs.cpp at f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889/fdbserver/Knobs.cpp#L261",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/Knobs.cpp at f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2031,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-09-04T02:42:46.346Z",
        "cooked": "<p>Oh, also, at some point, this switched from, \u201c<a class=\"mention\" href=\"/u/alloc\">@alloc</a> is answering a question about schema changes using techniques he\u2019s known about and considered,\u201d to, \u201c<a class=\"mention\" href=\"/u/alloc\">@alloc</a> is speculating wildly and generally musing about the problem\u201d, so some of these ideas might be terrible or half-baked or under-explained. Sorry about that.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-04T02:42:46.346Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 36,
        "readers_count": 35,
        "score": 12.2,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2032,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-09-04T11:05:09.976Z",
        "cooked": "<p>There would definitely be parts that require complex orchestration over longer than the duration of a transaction, as you mention and are also outlined in the F1 paper. The reason to want the changes to be atomic is to manage the state of indexes from non-existent, to write-only, to read-write, for example. If you can build on that, it would be simpler to know when you\u2019re \u201cdone\u201d with a given async schema change.</p>\n<p>Thanks for the suggestions. I\u2019m not confident enough in my C++ abilities to design new core features at this point, but the other paths seem workable enough for now to test out.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-04T11:05:09.976Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 34,
        "readers_count": 33,
        "score": 26.8,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2041,
        "name": "",
        "username": "George",
        "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
        "created_at": "2018-09-06T20:22:45.907Z",
        "cooked": "<p>Could you accomplish correct caching by adding a READ conflict range (<a href=\"https://apple.github.io/foundationdb/api-c.html#c.fdb_transaction_add_conflict_range\" rel=\"nofollow noopener\">link</a>)? The general process being:</p>\n<ol>\n<li>Read current Schema from the database</li>\n<li>Use current schema in transactions but add a READ conflict range for the schema\u2019s key</li>\n<li>If a write happens, that transaction will conflict and you can re-read the schema from the database.</li>\n</ol>\n<p>I\u2019m not sure if the transaction failure event gives you enough information to determine it was the schema read that conflicted (as opposed to one of your other operations), but my gut feeling is that this will improve performance enough to make it worthwhile. Also, I may be wrong about how much performance overhead adding a conflicting read range incurs.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-06T23:59:47.756Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 31,
        "readers_count": 30,
        "score": 11.2,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-c.html#c.fdb_transaction_add_conflict_range",
            "internal": false,
            "reflection": false,
            "title": "C API \u2014 FoundationDB 5.2",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2046,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-09-08T15:28:47.996Z",
        "cooked": "<p>Adding a read conflict range is fairly cheap. It ends up being the case that the resolver has to do an extra check in-memory. As noted, you don\u2019t have enough information returned to you to let you know whether it was the schema change that caused the conflict or whether it was something else, but that\u2019s usually fine. (You can adopt a rule like every time there is a conflict, check the schema again.)</p>\n<p>The problem, though, is that there is a gap where the schema might change that you might miss. In particular, the following might happen:</p>\n<ol>\n<li>You read and cache the schema in transaction 1.</li>\n<li>Someone else updates the schema in a separate transaction.</li>\n<li>You begin transaction 2. It gets a read version <em>after</em> the above schema update has happened. Therefore, when you commit and check to see if the schema matches, the resolver see there have been no updates to that key since transaction 2 began, and your transaction (erroneously) succeeds.</li>\n</ol>\n<p>This is partially the idea behind my suggestion that if you could add a read conflict key \u201cin the past\u201d, you could close this gap, because now the resolver would check that the schema hasn\u2019t been mutated since the end of transaction 1. But this also won\u2019t work for read-only transactions, and all of your client code would have to be designed to tolerate differences between the schema and the database because schema validation won\u2019t happen until the transaction ends.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-09-08T15:28:47.996Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 31,
        "readers_count": 30,
        "score": 21.2,
        "yours": false,
        "topic_id": 678,
        "topic_slug": "implementing-atomic-ddl-for-sql-schema",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 251,
          "username": "George",
          "name": "",
          "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/implementing-atomic-ddl-for-sql-schema/678/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      2026,
      2027,
      2028,
      2029,
      2030,
      2031,
      2032,
      2041,
      2046
    ]
  },
  "timeline_lookup": [
    [
      1,
      2605
    ],
    [
      7,
      2604
    ],
    [
      8,
      2602
    ],
    [
      9,
      2600
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Implementing atomic DDL for SQL schema",
  "id": 678,
  "title": "Implementing atomic DDL for SQL schema",
  "posts_count": 9,
  "created_at": "2018-09-03T19:04:26.293Z",
  "views": 2146,
  "reply_count": 2,
  "like_count": 2,
  "last_posted_at": "2018-09-08T15:28:47.996Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "implementing-atomic-ddl-for-sql-schema",
  "category_id": 9,
  "word_count": 3293,
  "deleted_at": null,
  "user_id": 81,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_678",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 9,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "id": 1833,
      "title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "slug": "cannot-commit-transaction-that-reads-the-metadataversion-key-after-changing-it",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-12-11T22:52:33.816Z",
      "last_posted_at": "2019-12-13T13:23:15.818Z",
      "bumped": true,
      "bumped_at": "2019-12-13T14:11:35.389Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1297,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Changefeeds (watching and getting updates on ranges of keys)",
      "id": 511,
      "title": "Changefeeds (watching and getting updates on ranges of keys)",
      "slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-06-16T12:26:34.710Z",
      "last_posted_at": "2018-07-06T14:46:54.646Z",
      "bumped": true,
      "bumped_at": "2018-07-06T14:46:54.646Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 4221,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 307,
            "username": "jwr",
            "name": "Jan Rychter",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Technical overview of the database",
      "id": 135,
      "title": "Technical overview of the database",
      "slug": "technical-overview-of-the-database",
      "posts_count": 27,
      "reply_count": 15,
      "highest_post_number": 27,
      "image_url": null,
      "created_at": "2018-04-20T15:30:31.788Z",
      "last_posted_at": "2019-01-11T23:25:47.462Z",
      "bumped": true,
      "bumped_at": "2019-01-11T23:25:47.462Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 64,
      "views": 12958,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 96,
            "username": "idiot",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/i/f04885/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 443,
            "username": "junius",
            "name": "junius",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/f08c70/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Understanding inter communication",
      "id": 745,
      "title": "Understanding inter communication",
      "slug": "understanding-inter-communication",
      "posts_count": 12,
      "reply_count": 7,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2018-10-05T00:51:33.531Z",
      "last_posted_at": "2018-10-11T17:16:52.613Z",
      "bumped": true,
      "bumped_at": "2018-10-11T17:16:52.613Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 10,
      "views": 3588,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 384,
            "username": "Chandru4u",
            "name": "Chandrashekar",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/c/b487fb/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 251,
        "username": "George",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 81,
      "username": "ryanworl",
      "name": "Ryan Worl",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
    },
    "last_poster": {
      "id": 8,
      "username": "alloc",
      "name": "Alec Grieser",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
    },
    "links": [
      {
        "url": "https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41376.pdf",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 37,
        "user_id": 13,
        "domain": "static.googleusercontent.com",
        "root_domain": "googleusercontent.com"
      },
      {
        "url": "https://apple.github.io/foundationdb/api-python.html#fdb.Transaction.set_versionstamped_value",
        "title": "Python API \u2014 FoundationDB 5.2",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://forums.foundationdb.org/t/a-few-design-pattern-check-my-understanding-questions/1153/10",
        "title": "A few design-pattern + check-my-understanding questions",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 53,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/whats-the-purpose-of-the-directory-layer/677/4",
        "title": "What's the purpose of the Directory layer?",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 8,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889/fdbserver/Knobs.cpp#L34",
        "title": "foundationdb/Knobs.cpp at f8262a2f951ccae1f2cbc732bebeaf8e0a1f5889 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}