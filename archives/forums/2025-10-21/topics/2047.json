{
  "post_stream": {
    "posts": [
      {
        "id": 6605,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2020-04-06T11:43:10.439Z",
        "cooked": "<p>Hi everyone! After playing with the FDB Operator, I decided to play a bit with the record-layer by developing <a href=\"https://github.com/PierreZ/fdb-etcd\" rel=\"nofollow noopener\">an ETCD layer</a>. My goal is to see how far I can go using the record-layer without using a fdb-client directly. This is mostly a toy project for now, but I\u2019m having a lot of fun <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=9\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>\n<p>Here\u2019s what I did for now:</p>\n<ul>\n<li>etcd protobuf was imported and exposed with Vert.x,</li>\n<li>Record-layer is used. <a href=\"https://github.com/PierreZ/fdb-etcd/blob/master/src/main/proto/record.proto\" rel=\"nofollow noopener\">As etcd is also using protobuf, we are directly storing the KeyValue message</a>,</li>\n<li>Integrations test using a real FDB spawned with testcontainers and official Java etcd client,</li>\n<li>Tests are backported from jetcd test cases</li>\n<li>Supported operations:\n<ul>\n<li>put,</li>\n<li>get,</li>\n<li>scan,</li>\n<li>delete,</li>\n<li>compact,</li>\n</ul>\n</li>\n<li>ETCD MVCC simulated using FDB\u2019s read version</li>\n</ul>\n<p>I successfully implemented basic crud operations thanks to the recordStore. Now, before moving to watches and leases, I want to understand correctly how <code>Indexes</code> works and how I can use them, appart from optimize queries with filtering.</p>\n<h2>Indexes and functions</h2>\n<p>By reading the <a href=\"https://foundationdb.github.io/fdb-record-layer/Extending.html\" rel=\"nofollow noopener\">Extending doc</a>, I understood the fact that an index is only a subspace in-sync with a record-store. There seems to be multiples IndexTypes which are related to <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/FunctionNames.java\" rel=\"nofollow noopener\">Functions</a>; their goal seems to be the <code>maintainer</code> of the index\u2019s subspace.</p>\n<p>There seems to be different kind of functions, and I have some questions about them:</p>\n<ul>\n<li>\n<p>What is the difference between:</p>\n<ul>\n<li>\n<code>aggregate func</code> and <code>aggregate index func</code>?</li>\n<li>\n<code>RecordFunction</code>, <code>StoreRecordFunction</code> and <code>IndexRecordFunction</code>? I have difficulties to represent the difference by reading the related part on the <a href=\"https://foundationdb.github.io/fdb-record-layer/Extending.html\" rel=\"nofollow noopener\">Extending doc</a>.</li>\n</ul>\n</li>\n<li>\n<p>What is the workflow of a <code>IndexMaintainer</code>? Is it something like:</p>\n<ol>\n<li>call to saveRecords</li>\n<li>foreach index in indexes:\n<ul>\n<li>apply keyExpression to the record to produce a list of tuples for each index entry</li>\n<li>use IndexMaintainer on the list of Tuples to updates Index</li>\n</ul>\n</li>\n<li>store record</li>\n</ol>\n</li>\n<li>\n<p>Where can I find the code for the moment where <code>IndexTypes.VALUE</code> or <code>IndexTypes.MAX_EVER</code> Indexes are used? I couldn\u2019t find it and I would like to see under the hood how it is working for a simple case like the  secondary index pattern or keeping the ever seen max long.</p>\n</li>\n</ul>\n<h2>Query an Index</h2>\n<p>I runned into some difficulties to directly query an Index. I tried to use the <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L270-L272\" rel=\"nofollow noopener\">universal Index <code>globalCount</code> declared in the example.Main class</a> but it is always returning 0 (code and test are available <a href=\"https://github.com/PierreZ/fdb-etcd/commit/67d77b8c357771e3c3cdae02caf2715198448e65\" rel=\"nofollow noopener\">here</a>). I do have some questions about this:</p>\n<ul>\n<li>Why do we need to specify a KeyExpression in the context of an universal Index? It seems to me that I don\u2019t know how to create a keyExpression that would be matching for example all records for a specific KeySpace/Directory.</li>\n</ul>\n<pre><code class=\"lang-java\">IndexAggregateFunction function = new IndexAggregateFunction(\n        FunctionNames.COUNT, COUNT_INDEX.getRootExpression(), COUNT_INDEX.getName());\n\nreturn recordStore.evaluateAggregateFunction(\n        Collections.singletonList(\"KeyValue\"),\n        function, Key.Evaluated.fromTuple(new Tuple()), IsolationLevel.SERIALIZABLE)\n</code></pre>\n<ul>\n<li>\n<p>for the above code, why do I need to Evaluate again against keys? I thought I already did defined them inside the Index. Is is the original key?</p>\n</li>\n<li>\n<p>Why do I need to provide an AggregateFunction? From my point-of-view, As the index is maintained, I just need to <code>get</code> within the index keyspace?</p>\n</li>\n</ul>\n<h2>Watch</h2>\n<p>My next big work will soon be able <code>Watch</code> and <code>Lease</code> support. I did not went deep yet on thinking how I should implement this, so for now I only have questions.</p>\n<p>As an index is an <code>in-sync keyspace</code> aside the recordStore, is it the right way to use it for storing other info, a bit like the <code>MAX_EVER</code> info?<br>\nCould we theoretically be able to reimplement all the needed things to have watches in the similar fashion than <a class=\"mention\" href=\"/u/ph14\">@pH14</a>\u2019s work around the ZK layer?</p>\n<p>I <a href=\"https://forums.foundationdb.org/t/foundationdb-summit-2019-a-zookeeper-layer-for-foundationdb/1764\">watched the talk</a>, and my first thoughts were mixed. On the other hand, I can easily create some records that will be used to create for example the <code>Watch Event Log</code>, but I\u2019m not certain about certains things:</p>\n<ul>\n<li>watch over record-layer,</li>\n<li>versionstamp as part of the primary-key not supported in record-layer,</li>\n<li>the approach between Index and Record.Maybe we can represent the <code>Watch Event log</code> as an Index? Or maybe as a regular other recordStore?</li>\n</ul>\n<p>I would love to have some insights/tips/infos from more experienced record-layer users than myself, hence the number of questions included in this post <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=9\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"></p>\n<p>Thanks a lot for reading my pretty long post!</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-04-06T11:43:10.439Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 568,
        "reads": 85,
        "readers_count": 84,
        "score": 2947.0,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/PierreZ/fdb-etcd",
            "internal": false,
            "reflection": false,
            "title": "GitHub - PierreZ/fdb-etcd: ETCD layer on top of FoundationDB",
            "clicks": 52
          },
          {
            "url": "https://foundationdb.github.io/fdb-record-layer/Extending.html",
            "internal": false,
            "reflection": false,
            "title": "Extending the Record Layer",
            "clicks": 16
          },
          {
            "url": "https://forums.foundationdb.org/t/foundationdb-summit-2019-a-zookeeper-layer-for-foundationdb/1764",
            "internal": true,
            "reflection": false,
            "title": "FoundationDB Summit 2019: A ZooKeeper Layer for FoundationDB",
            "clicks": 11
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L270-L272",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/Main.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 5
          },
          {
            "url": "https://github.com/PierreZ/fdb-etcd/blob/master/src/main/proto/record.proto",
            "internal": false,
            "reflection": false,
            "title": "fdb-etcd/record.proto at master \u00b7 PierreZ/fdb-etcd \u00b7 GitHub",
            "clicks": 3
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/FunctionNames.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FunctionNames.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/PierreZ/fdb-etcd/commit/67d77b8c357771e3c3cdae02caf2715198448e65",
            "internal": false,
            "reflection": false,
            "title": "feat(store): using universal indexes to follow number of records \u00b7 PierreZ/fdb-etcd@67d77b8 \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://forums.foundationdb.org/t/a-foundationdb-layer-for-apiserver-as-an-alternative-to-etcd/2697/2",
            "internal": true,
            "reflection": true,
            "title": "A FoundationDB layer for apiserver as an alternative to etcd",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 4
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 6620,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2020-04-09T17:23:22.949Z",
        "cooked": "<p>I continued to play with indexes, and answer some questions by myself <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=9\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"><br>\nI will try to explain what I learned <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=9\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"></p>\n<h2>Indexes</h2>\n<p>Indexes are a subspace in-sync with a record-store. It is used to optimize queries (<code>setFilters</code>) but you can also view them as an alternative POV of your recordstore. For example, You can setup an Index that will count every record that you have:</p>\n<pre><code class=\"lang-java\">  // Keep a global track of the number of records stored\n  protected static final Index COUNT_INDEX = new Index(\n    \"globalRecordCount\", // name\n    new GroupingKeyExpression(EmptyKeyExpression.EMPTY, 0), // a key expression\n    IndexTypes.COUNT); // an index-type\n// and after\n\n// add a global index that will count all records and updates\nmetadataBuilder.addUniversalIndex(COUNT_INDEX);\n</code></pre>\n<p>Here, for every record, we will construct a Index called <code>globalRecordCount</code> and will populate with keys and values according to the key-expression and index-type. In this example, if you scan the index using this:</p>\n<pre><code class=\"lang-java\">        recordStoreProvider.apply(context).scanIndex(\n          COUNT_INDEX,\n          IndexScanType.BY_GROUP,\n          TupleRange.ALL,\n          null, // continuation,\n          ScanProperties.FORWARD_SCAN\n        ).asList().join().stream().forEach(\n          indexEntry -&gt; log.trace(\"found an indexEntry for stats: key:'{}', value: '{}'\", indexEntry.getKey(), indexEntry.getValue())\n        );\n</code></pre>\n<p>You willl have in your log as requested a empty key and the <code>count</code> of records:</p>\n<pre><code class=\"lang-auto\">EtcdRecordStore - found an indexEntry for stats: key:'()', value: '(2)'\n</code></pre>\n<p>Let\u2019s make another example. In my case (ETCD) each record is represented by a key and a version. Version are starting at 1 and are incrementing. One inserting a new record, I need to retrieve the latest version and do a +1 before inserting one. Before I was scanning old records for the key and filtering to get the last version. I can now use an Index that will hold this for me.</p>\n<p>As I have multiple versions per key, I will aggregate my record by keeping <code>the greatest value of Version</code>. I could have went with a Index.Count, but I wanted to play with Max <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=9\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>\n<pre><code class=\"lang-auto\">  // keep track of the version per key with an index\n  protected static final Index INDEX_VERSION_PER_KEY = new Index(\n    \"index-version-per-key\",\n    Key.Expressions.field(\"version\").groupBy(Key.Expressions.field(\"key\")),\n    IndexTypes.MAX_EVER_LONG);\n</code></pre>\n<p>Almost the same thing, except that I can represent <strong>the aggregation performed on my record before populate my index</strong>: here, I\u2019m basically saying what the key and value will look like in the index:</p>\n<ul>\n<li>rowkey will be my <code>key</code> field on protobuf, with version aggregated</li>\n<li>value will be the max-ever long value seen</li>\n</ul>\n<p>Let\u2019s scan it</p>\n<pre><code class=\"lang-java\">        recordStoreProvider.apply(context).scanIndex(\n          INDEX_VERSION_PER_KEY,\n          IndexScanType.BY_GROUP,\n          TupleRange.ALL,\n          null, // continuation,\n          ScanProperties.FORWARD_SCAN\n        ).asList().join().stream().forEach(\n          indexEntry -&gt; log.trace(\"found an indexEntry: key:'{}', value: '{}'\", indexEntry.getKey(), indexEntry.getValue())\n        );\n</code></pre>\n<p>and after inserting some values:</p>\n<pre><code class=\"lang-auto\">found an indexEntry: key:'(b\"sample_key\")', value: '(1)'\nfound an indexEntry: key:'(b\"sample_key2\")', value: '(2)'\n</code></pre>\n<p>So we have a keyspace, with key as a rowkey and with a tuple of the max ever seen value of <code>version</code> field. Let\u2019s retrieve the value for a specific index.</p>\n<pre><code class=\"lang-java\">\n      // retrieve version using an index\n      IndexAggregateFunction function = new IndexAggregateFunction(\n        FunctionNames.MAX_EVER, INDEX_VERSION_PER_KEY.getRootExpression(), INDEX_VERSION_PER_KEY.getName());\n\n      Tuple maxResult = recordStoreProvider.apply(context)\n        .evaluateAggregateFunction(\n          Collections.singletonList(\"KeyValue\"), function,\n          Key.Evaluated.concatenate(record.getKey().toByteArray()), IsolationLevel.SERIALIZABLE)\n        .join();\n</code></pre>\n<p>The IndexAggregateFunction is a function that can be applied on a aggregated index, such as <code>MAX</code>. We can choose on which key we will evaluate, here the original key.</p>\n<p>One thing I did not understand is why I needed to say again the key during evaluateAggregateFunction. The answer is that I can choose which key I want to aggregate. Do I want to retrieve only one value? Or maybe I want to <strong>retrieve the max version across all keys</strong>? It is simple as replacing <code>Key.Evaluated.concatenate(record.getKey().toByteArray()),</code> with <code>Key.Evaluated.empty</code>, which will match all keys from the index.</p>\n<p>Function MAX, count and so on are using FDB atomic operations.</p>\n<p>All modifications to an index are done within the same transaction as inserting the record, so you are indeed in-sync.</p>\n<h2>Questions</h2>\n<p>Now I have others questions <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=9\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\">:</p>\n<ul>\n<li>\n<p>I still have no clues what <code>RecordFunction</code> , <code>StoreRecordFunction</code> and <code>IndexRecordFunction</code> are,</p>\n</li>\n<li>\n<p>You seems to be able to load your own functions and indexes, but I did not yet found how,</p>\n</li>\n<li>\n<p>does watching is allowed through the record-layer? Or do I need to use the FDB client,</p>\n</li>\n<li>\n<p>As we can design the key of an index to be pretty static thanks to aggregation, we would imagine put a watch on a key of a designed aggregated index. For that I need the full rowkey of a value, how can I compute/retrieve it? My guess is that I can retrieve it with the Index KeySpace.</p>\n</li>\n<li>\n<p>for the globalCount, can I create an universal record count that will \u201cknow\u201d the context like:</p>\n<ul>\n<li>the directory with the current context,</li>\n<li>the record name?<br>\nI would love to have something like (\u201capplication\u201d, \u201cetcd\u201d, \u201ctenant\u201d, \u201ctenantA\u201d, \u201crecord\u201d, \u201cmyRecord\u201d) =&gt; (myCount)</li>\n</ul>\n</li>\n</ul>\n<p>Thanks again for open-sourcing the record-layer, I must admit that I\u2019m having a lot of fun lately! I really love the API and the possibilities offered by it <img src=\"https://emoji.discourse-cdn.com/twitter/+1.png?v=9\" title=\":+1:\" class=\"emoji\" alt=\":+1:\"></p>\n<p>Nice work!</p>\n<p>Stay safe in those trouble times,<br>\nPierre</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-04-09T17:23:22.949Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 71,
        "reads": 68,
        "readers_count": 67,
        "score": 388.6,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6891,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-05-04T21:01:27.886Z",
        "cooked": "<p>Thanks for your patience as we were mulling over this post! We\u2019re certainly glad you\u2019re finding the Record Layer fun to explore!</p>\n<h2><a name=\"functions-1\" class=\"anchor\" href=\"#functions-1\"></a>Functions</h2>\n<p>Okay, there were a couple of different questions regarding the various function classes. If I\u2019m honest, the distinctions are a little subtle (and I needed to look them again), but the understanding I have is:</p>\n<ol>\n<li>Aggregate functions and aggregate index functions are both operations where you want to take all values from a specific field across multiple records and \u201caggregate\u201d them together. For example, the \u201csum\u201d aggregate function represents the sum of a certain field aggregated across all records. Something like <code>SELECT sum(some_field) FROM some_record_type WHERE some_predicate()</code> in SQL-ish.</li>\n<li>Aggregate index functions are <em>like</em> regular aggregate functions, but they use an index to answer. For many aggregate functions, using an index is just an optimization, though there are certain aggregates that actually <em>require</em> an index. For example, if you didn\u2019t have a \u201csum\u201d index, you could still answer a \u201csum\u201d query by iterating over all records and summing the value. But, the \u201cmax_ever\u201d function (which <em>is</em> an aggregate index function) cannot be answered without having a \u201cmax_ever\u201d index because if you insert a record with a higher value of the indexed field, then that updates the \u201cmax_ever\u201d value, but then if you remove it, then you should still have the same \u201cmax_ever\u201d value even though it can no longer be recomputed from just the records. (The \u201ccount_updates\u201d index, which counts how many times a thing is updated, is similar, and is probably miscategorized in <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/FunctionNames.java\">FunctionNames</a>.)</li>\n<li>Record functions are functions that produce a single value based on the value of a field for a single record. That function might require looking at an index and it\u2019s value may depend on what other data are being stored, but it\u2019s not \u201caggregating\u201d the values across multiple records; it computes the value for a single record. So, for example, the \u201crank\u201d function is a record function because each individual record will have its own rank (based on a given field).</li>\n<li>Then an <code>IndexRecordFunction</code> is a record function whose value is determined by looking at an index, whereas the <code>StoreRecordFunction</code> doesn\u2019t look at an index (just the record store). For example, the rank function will typically be implemented with an <code>IndexRecordFunction</code> as it needs to figure out the rank of a record based on an appropriate \u201crank\u201d index, but a \u201cversion\u201d function (getting the <code>FDBRecordVersion</code> associated with a given record) would typically use a <code>StoreRecordFunction</code> as it doesn\u2019t require using a separate index (the versions are stored right with the records themselves).</li>\n</ol>\n<p>So, I hope that helps, though it\u2019s definitely a somewhat confusing hierarchy, so if you have more follow up questions, I\u2019d be happy to try and clarify.</p>\n<h2><a name=\"indexes-2\" class=\"anchor\" href=\"#indexes-2\"></a>Indexes</h2>\n<p>The basic flow you lay out for index maintenance is essentially correct. Within <code>saveRecord</code>, we essentially iterate over the indexes defined on that index type and then call <code>update</code> on the index maintainer implementation. Then the commit will transactionally update the records and all the indexes.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"1\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>Where can I find the code for the moment where <code>IndexTypes.VALUE</code> or <code>IndexTypes.MAX_EVER</code> Indexes are used?</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"2\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>You seems to be able to load your own functions and indexes, but I did not yet found how</p>\n</blockquote>\n</aside>\n<p>Believe it or not, these questions are actually related.</p>\n<p>So, when an index is about to be updated, we first load it, based on its type, from a registry mapping index type to index maintainer implementation (or, actually, index maintainer . See: <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L583\">https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L583</a></p>\n<p>The registry knows what maintainers exist by reading from a service loader the list of available maintainers. See: <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainerRegistryImpl.java#L58\">https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainerRegistryImpl.java#L58</a> (Though the maintainer registry is configurable, so you could pick your own favorite implementation instead of using the default one, though there may be places where we call <code>IndexMaintainerRegistryImpl.instance()</code> other than just to populate the default, so here there be dragons.)</p>\n<p>The service loader knows which classes exist by looking in a file included in the Jar\u2019s resources. Entries can be added to that file by using the <code>AutoService</code> class annotation. See the <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/VersionIndexMaintainerFactory.java\"><code>ValueIndexMaintainerFactory</code></a>, which lists the types of indexes it provides maintainers for as just the <code>IndexType.VALUE</code> type and it marks itself with <code>@AutoService(IndexMaintainerFactory.class)</code>. See also the <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/AtomicMutationIndexMaintainerFactory.java\"><code>AtomicMutationIndexMaintainerFactory</code></a>, which provides an implementation for something that provides multiple types.</p>\n<p>So, the steps to creating a custom index type are something like:</p>\n<ol>\n<li>Create an implementation of the <code>IndexMaintainer</code> class (which <em>probably</em> should be an interface instead of an abstract class), possibly one that extends the <code>StandardIndexMaintainer</code>. Note that our track record with keeping the API there stable from the point of view of an implementor is a little bit weaker than our track record with keeping it stable from the point of view of a consumer. So, for example, we <em>may</em> add methods that new adopters will need to add their own implementations of.</li>\n<li>Create an implementation of the <code>IndexMaintainerFactory</code> that knows how to produce <code>IndexMaintainer</code>s of the new type you\u2019d like to add. Add the type to list it returns in <code>getTypes</code>, and mark the class as <code>@AutoService(IndexMaintainerFactory.class)</code>.</li>\n<li>There\u2019s no step 3! (Or, more seriously, you should be able to now create indexes with the type you defined.)</li>\n</ol>\n<p>Note that it\u2019s kind of on you, the index maintainer, to make sure you don\u2019t accidentally change the index in some backwards incompatible way, storage wise. So, for example, if your index involves serializing some data, you have to make sure that the serialization is \u201cstable\u201d and won\u2019t break when you upgrade software (or are okay with not being able to read old data, etc.).</p>\n<p>For custom functions, I\u2019m not sure if you are referring to the \u201crecord functions\u201d and \u201caggregate functions\u201d discussed above, or <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/FunctionKeyExpression.java\"><code>FunctionKeyExpression</code>s</a>. In many instances, it may actually be preferable to produce a new <code>FunctionKeyExpression</code> instead of a new index type. For example, if your index is really about extracting information in a new way (like, for example, an \u201cdescending\u201d sort index, where field values are sorted in descending rather than ascending order), you may just want a custom function (in the descending sort case, one that flips the bytes of the extracted field so that it sorts \u201cthe wrong way\u201d). If your index is about <em>storing</em> data in a new way (e.g., maintaining a whole new data structure so that you can do exotic things that can\u2019t be done with an existing index), then you might have a new container. For example, in the world of \u201cweird indexes you might want to have on text\u201d, we have (1) a \u201ctext index\u201d, for full body search, that stores data on disk in a data structure that is designed to use less space than a na\u00efve approach, and (2) a \u201ccollation\u201d <code>FunctionKeyExpression</code>, which allows the user to specify a locale to produce an index entry with appropriate case folding for the text they produce (for use with a standard value index). (As an aside, it\u2019s possible if we were doing things again that text indexes would take a special <code>FunctionKeyExpression</code> from \u201cstring\u201d to \u201cmap&lt;string, list&gt;\u201d instead of essentially putting both things in the index, but also, maybe <em>alea iacta est</em> on that one\u2026)</p>\n<p>In any case, defining a custom <code>FunctionKeyExpression</code> is very similar to the way a custom index is defined:</p>\n<ol>\n<li>Create a new implementation of the <code>FunctionKeyExpression</code> class. See, e.g., <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-spatial/src/main/java/com/apple/foundationdb/record/spatial/geophile/GeophileSpatialFunctionKeyExpression.java\"><code>GeophileSpatialFunctionKeyExpression</code></a></li>\n<li>Create an implementation of the <code>FunctionKeyExpression.Factory</code> interface, and make sure to mark it as <code>@AutoService(FunctionKeyExpression.Factory.class)</code> as well as include a builder for the key expression in the list of builders it returns. See, e.g., <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-spatial/src/main/java/com/apple/foundationdb/record/spatial/geophile/GeophileSpatialFunctionKeyExpressionFactory.java\"><code>GeophileSpatialFunctionKeyExpressionFactory</code></a></li>\n<li>The function can now be referenced by name with something like <code>Key.Expressions.function(functionName)</code>, and it can be queried (if the function implements <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/QueryableKeyExpression.java\"><code>QueryableKeyExpression</code></a>), though that bit of the API is somewhat newer and may have some deficiencies in the planner.</li>\n</ol>\n<p>Defining a custom <code>IndexAggregateFunction</code> I think is easier. It\u2019s been a while since I\u2019ve done it, so I could be wrong, but I think you can just start using a new name for the function, and then as long as you implement <code>canEvaluateAggregateFunction</code> and <code>evaluateAggregateFunction</code> on your index maintainer, then it should \u201cjust work\u201d. Likewise for record functions, though it\u2019s <code>canEvaluateRecordFunction</code> and <code>canEvaluateRecordFunction</code>.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"2\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>One thing I did not understand is why I needed to say again the key during evaluateAggregateFunction. The answer is that I can choose which key I want to aggregate. Do I want to retrieve only one value? Or maybe I want to <strong>retrieve the max version across all keys</strong> ? It is simple as replacing <code>Key.Evaluated.concatenate(record.getKey().toByteArray()),</code> with <code>Key.Evaluated.empty</code> , which will match all keys from the index.</p>\n</blockquote>\n</aside>\n<p>Right. I think you\u2019ve figured most of this out, based on the response, but perhaps just to summarize: with an aggregate index, you can provided \u201cgrouping\u201d and \u201cgrouped\u201d (or \u201caggregated\u201d) columns. So, in your example, you\u2019ve produced a <code>MAX_EVER</code> index with one grouping column (the key) and one grouped column (the version). So, in SQL, the equivalent query is something like:</p>\n<pre data-code-wrap=\"sql\"><code class=\"lang-sql\">SELECT max_ever(KeyValue.version GROUPED BY KeyValue.key) FROM KeyValue WHERE KeyValue.key = key\n</code></pre>\n<p>For some <code>key</code>. The \u201cevaluate aggregate function\u201d syntax is essentially a translation of that, where:</p>\n<ol>\n<li>The first argument says the list of types to evaluate this query over, like <code>FROM KeyValue</code></li>\n<li>The <code>function</code> argument is essentially serving the purpose of the <code>max_ever(KeyValue.version GROUPED BY keyValue.key)</code> part of the query, where the function name (the first argument) specifies the <code>max_ever</code> part and the key expression (the second argument) specifies <code>KeyValue.version GROUPED BY KeyValue.key</code>. I <em>think</em> you don\u2019t actually need the index name in in the <code>IndexAggregateFunction</code> creation, though adding the index name essentially provides a hint to the Record Store to choose the right index.</li>\n<li>The third argument is doing the some thing as the <code>WHERE KeyValue.key = key</code> part of the query, though it\u2019s somewhat subtle as to how. The API expects essentially the values of the grouping keys in the order they are declared by the query\u2019s \u201cgrouped by\u201d expression, and then it rendezvous them, one by one. So, in this case, with one grouping column, it matches the first grouping value to the grouping column itself.</li>\n<li>For completeness, the fourth argument, setting the <code>IsolationLevel</code>, just sets whether the transaction should be aborted if (1) this transaction is a read/write transaction and (2) any of the data read in the index changes. If \u201cyes\u201d, then this should be set to <code>SERIALIZABLE</code> and if \u201cno\u201d, then <code>SNAPSHOT</code>. The SQL statement here doesn\u2019t really have an opinion on that.</li>\n</ol>\n<p>So, to answer your question about whether the index could be used to retrieve the max version across all keys, I believe the answer is \u201cyes\u201d, though you would need to translate a slightly different statement, namely:</p>\n<pre data-code-wrap=\"sql\"><code class=\"lang-sql\">SELECT max_ever(KeyValue.version) FROM KeyValue\n</code></pre>\n<p>Note the lack of grouping keys. So something like:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">IndexAggregateFunction function = new IndexAggregateFunction(\n   FunctionNames.MAX_EVER,\n   Key.Expressions.field(\"version\").ungrouped(),\n   INDEX_VERSION_PER_KEY.getName()\n);\nrecordStore.evaluateAggregateFunction(\n   Collections.singletonList(\"KeyValue\"),\n   function,\n   Key.Evaluated.EMPTY,\n   IsolationLevel.SERIALIZABLE\n);\n</code></pre>\n<p>That should produce the max ever across all records, though note that this will require scanning the entire index, which for an index that is one per (etcd) key, that might be too many scans to fit in the timespan of a single transaction (five seconds). In that case, you may need to defined a second aggregate index without the grouping column.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"2\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>for the globalCount, can I create an universal record count that will \u201cknow\u201d the context like:</p>\n<ul>\n<li>the directory with the current context,</li>\n<li>the record name?<br>\nI would love to have something like (\u201capplication\u201d, \u201cetcd\u201d, \u201ctenant\u201d, \u201ctenantA\u201d, \u201crecord\u201d, \u201cmyRecord\u201d) =&gt; (myCount)</li>\n</ul>\n</blockquote>\n</aside>\n<p>Hmm, I\u2019m not sure I totally understand all of the facets of this question, but you might be able to some of these things with additional grouping columns on your universal index. I\u2019m not, for example, totally sure what a \u201cdirectory\u201d is in this context, but if it\u2019s expressible as a field on a record (or a <code>FunctionKeyExpression</code> of a field on record), you could add it as an additional grouping column to your universal index. Note that you\u2019ll need to make sure that the field is defined on all types, but if that\u2019s possible, it can be done. You can also do the same with \u201cmulti-type\u201d indexes, which are defined, as the name implies, on more than one type, though not necessarily all of them (like a universal index is).</p>\n<h2><a name=\"versionstamps-3\" class=\"anchor\" href=\"#versionstamps-3\"></a>Versionstamps</h2>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"1\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>versionstamp as part of the primary-key not supported in record-layer</p>\n</blockquote>\n</aside>\n<p>Yeah, at the moment, versionstamps within primary keys are not supported. There are some details as to why in <a href=\"https://github.com/FoundationDB/fdb-record-layer/issues/100\">Issue #100</a>, but the tl;dr is that it would require some special case logic in the places where we write records, though maybe it\u2019s worth doing. If you have more specific questions about this, I\u2019d be happy to try and provide more details.</p>\n<h2><a name=\"watches-4\" class=\"anchor\" href=\"#watches-4\"></a>Watches</h2>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"2\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>does watching is allowed through the record-layer? Or do I need to use the FDB client,</p>\n</blockquote>\n</aside>\n<p>Unfortunately, the answer to both of this questions is that the Record Layer doesn\u2019t supporting watching (on its own), so you\u2019d need to either use the FDB APIs directly or we\u2019d need to think about how we\u2019d want watches exposed. One thing that\u2019s come up in the past when things like this have been discussed is that there are a few different facets to what a \u201cwatch\u201d API would look like:</p>\n<ol>\n<li>For example, should you be able to watch records for changes? And would the record be required to already exist? The reason this is important is that if you don\u2019t have versionstamp tracking enabled, there isn\u2019t actually any FDB key that is guaranteed to be touched when a record is written (due to some details of the storage format). So, it would either be required that you can only watch records that already exist, or it would be required that you have versionstamp tracking enabled.</li>\n<li>Should you be able to watch changes in index keys? In the case of an etcd layer, for example, you might want to watch the \u201cmax_version_by_key\u201d index for changes. And if that\u2019s the goal, what should the API look like?</li>\n<li>The FDB watch API has problems with A \u2192 B \u2192 A updates being lost. (See <a href=\"https://forums.foundationdb.org/t/understanding-watches/903\" class=\"inline-onebox\">Understanding \"Watches\"</a>). Should the Record Layer try and \u201cprotect\u201d you from such an update by, for example, only allowing you to watch versionstamped keys, or something, which are guaranteed to be monotonically increasing?</li>\n</ol>\n<p>So, there would need to be some thought put into exactly what we\u2019d want the API to look like. Not an insurmountable amount of thought, mind you, but some thought.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"2\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>As we can design the key of an index to be pretty static thanks to aggregation, we would imagine put a watch on a key of a designed aggregated index. For that I need the full rowkey of a value, how can I compute/retrieve it? My guess is that I can retrieve it with the Index KeySpace.</p>\n</blockquote>\n</aside>\n<p>This is getting a little bit into the territory of \u201cpeeling back abstractions\u201d, but perhaps it is necessary given that the Record Layer doesn\u2019t let you specify a way to watch keys, etc. But it would be something like <code>recordStore.indexSubspace(index).pack(indexKey)</code> to produce the key that an aggregate index is using, which you could then watch. Again, not sure if that\u2019s recommended, <em>per se</em>, but it\u2019s possible.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"1\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>On the other hand, I can easily create some records that will be used to create for example the <code>Watch Event Log</code></p>\n</blockquote>\n</aside>\n<p>Yeah, I think that sounds like about the approach you\u2019d need to take, given that FDB only maintains a finite amount of MVCC history, if you wanted to implement the full etcd watch API with events. Then you\u2019d also need to play some tricks to correctly implement \u201crange watches\u201d, which aren\u2019t really supported by the FDB API, and probably require some engineering around to make work.</p>\n<h2><a name=\"some-closing-thoughts-5\" class=\"anchor\" href=\"#some-closing-thoughts-5\"></a>Some Closing Thoughts</h2>\n<p>I hope that helps! There are probably either weird edge cases you\u2019ll run into with a project as complicated as this, especially as adapting APIs built with one set of assumptions about the underlying storage implementation (e.g., single-Raft group with a single master writer) when applying it to a totally different backend. I hope some of this is helpful, and let us know if you have additional questions, and good luck with the project!</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-05-04T21:01:27.886Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 2,
        "incoming_link_count": 23,
        "reads": 66,
        "readers_count": 65,
        "score": 208.2,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/understanding-watches/903",
            "internal": true,
            "reflection": false,
            "title": "Understanding \"Watches\"",
            "clicks": 5
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/issues/100",
            "internal": false,
            "reflection": false,
            "title": "Support putting record version in primary key \u00b7 Issue #100 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 4
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-spatial/src/main/java/com/apple/foundationdb/record/spatial/geophile/GeophileSpatialFunctionKeyExpressionFactory.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/GeophileSpatialFunctionKeyExpressionFactory.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/AtomicMutationIndexMaintainerFactory.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/AtomicMutationIndexMaintainerFactory.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L583",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FDBRecordStore.java at 1804da48ccf3dcec301767e27743ea492f394f74 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/VersionIndexMaintainerFactory.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/VersionIndexMaintainerFactory.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-spatial/src/main/java/com/apple/foundationdb/record/spatial/geophile/GeophileSpatialFunctionKeyExpression.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/GeophileSpatialFunctionKeyExpression.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/FunctionNames.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FunctionNames.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/IndexMaintainerRegistryImpl.java#L58",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/IndexMaintainerRegistryImpl.java at 1804da48ccf3dcec301767e27743ea492f394f74 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/FunctionKeyExpression.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/FunctionKeyExpression.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/QueryableKeyExpression.java",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/QueryableKeyExpression.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 3
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6916,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2020-05-06T08:06:22.772Z",
        "cooked": "<p>Hi Alec!<br>\nWhat an awesome response <img src=\"https://emoji.discourse-cdn.com/twitter/astonished.png?v=12\" title=\":astonished:\" class=\"emoji\" alt=\":astonished:\" loading=\"lazy\" width=\"20\" height=\"20\"> THANK YOU for taking so much time to answer me <img src=\"https://emoji.discourse-cdn.com/twitter/smile.png?v=12\" title=\":smile:\" class=\"emoji\" alt=\":smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>So, I hope that helps, though it\u2019s definitely a somewhat confusing hierarchy, so if you have more follow up questions, I\u2019d be happy to try and clarify.</p>\n</blockquote>\n</aside>\n<p>It sure does!</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>Defining a custom <code>IndexAggregateFunction</code> I think is easier. It\u2019s been a while since I\u2019ve done it, so I could be wrong, but I think you can just start using a new name for the function, and then as long as you implement <code>canEvaluateAggregateFunction</code> and <code>evaluateAggregateFunction</code> on your index maintainer, then it should \u201cjust work\u201d. Likewise for record functions, though it\u2019s <code>canEvaluateRecordFunction</code> and <code>canEvaluateRecordFunction</code> .</p>\n</blockquote>\n</aside>\n<p>It makes total sense, thanks for all the links <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>That should produce the max ever across all records, though note that this will require scanning the entire index, which for an index that is one per (etcd) key, that might be too many scans to fit in the timespan of a single transaction (five seconds). In that case, you may need to defined a second aggregate index without the grouping column.</p>\n</blockquote>\n</aside>\n<p>I actually got that one on my one last week, but it is super nice to be aligned with your point-of-view.</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>Yeah, at the moment, versionstamps within primary keys are not supported. There are some details as to why in <a href=\"https://github.com/FoundationDB/fdb-record-layer/issues/100\" rel=\"noopener nofollow ugc\">Issue #100</a>, but the tl;dr is that it would require some special case logic in the places where we write records, though maybe it\u2019s worth doing. If you have more specific questions about this, I\u2019d be happy to try and provide more details.</p>\n</blockquote>\n</aside>\n<p>The issue is opened since 2018, is there other people asking for this? Might worth the shot <img src=\"https://emoji.discourse-cdn.com/twitter/yum.png?v=12\" title=\":yum:\" class=\"emoji\" alt=\":yum:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>Hmm, I\u2019m not sure I totally understand all of the facets of this question, but you might be able to some of these things with additional grouping columns on your universal index.</p>\n</blockquote>\n</aside>\n<p>Sorry, poor choice of words, I was mainly talking about KeySpaces, where I can use the <code>DirectoryLayerDirectory</code>. I was wondering if an index could have insights about the current hierarchy used for the data keyspace, but I guess not as we are kind of chrooted in the KeySpace <img src=\"https://emoji.discourse-cdn.com/twitter/tongue.png?v=12\" title=\":tongue:\" class=\"emoji\" alt=\":tongue:\" loading=\"lazy\" width=\"20\" height=\"20\"> I played with another piece of code where I\u2019m created a dedicated MetadataStore with its own KeySpace scoped by a tenant for example, so I have a better understanding of what is possible for now.</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>For example, should you be able to watch records for changes? And would the record be required to already exist? The reason this is important is that if you don\u2019t have versionstamp tracking enabled, there isn\u2019t actually any FDB key that is guaranteed to be touched when a record is written (due to some details of the storage format). So, it would either be required that you can only watch records that already exist, or it would be required that you have versionstamp tracking enabled.</p>\n</blockquote>\n</aside>\n<p>Does versionstamp tracking has downsides?</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>Should you be able to watch changes in index keys? In the case of an etcd layer, for example, you might want to watch the \u201cmax_version_by_key\u201d index for changes. And if that\u2019s the goal, what should the API look like?</p>\n</blockquote>\n</aside>\n<p>I found the feature pretty cool!</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>The FDB watch API has problems with A \u2192 B \u2192 A updates being lost. (See <a href=\"https://forums.foundationdb.org/t/understanding-watches/903\">Understanding \u201cWatches\u201d</a>). Should the Record Layer try and \u201cprotect\u201d you from such an update by, for example, only allowing you to watch versionstamped keys, or something, which are guaranteed to be monotonically increasing?</p>\n</blockquote>\n</aside>\n<p>That could be a log with versionstamp as key, and serialized record as value. Not cheap I admit, that could be an option for a record.</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>Yeah, I think that sounds like about the approach you\u2019d need to take, given that FDB only maintains a finite amount of MVCC history, if you wanted to implement the full etcd watch API with events. Then you\u2019d also need to play some tricks to correctly implement \u201crange watches\u201d, which aren\u2019t really supported by the FDB API, and probably require some engineering around to make work.</p>\n</blockquote>\n</aside>\n<p>As you say, \u201crange watches\u201d, aren\u2019t supported by the FDB API, but that may worth the shot to add them to the record-layer. I really like the idea of being notified when the \u201cmax_version_by_key\u201d index has changed.</p>\n<p>Maybe that could be a first step to add watches in record-layer, knowing that we can generate an <code>value-type</code> index. Then we could wire a log to provide range watches, what do you think?</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"3\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>I hope that helps! There are probably either weird edge cases you\u2019ll run into with a project as complicated as this, especially as adapting APIs built with one set of assumptions about the underlying storage implementation (e.g., single-Raft group with a single master writer) when applying it to a totally different backend. I hope some of this is helpful, and let us know if you have additional questions, and good luck with the project!</p>\n</blockquote>\n</aside>\n<p>Again, thanks a lot for all the insights you gave me. It is a fun project indeed, it gave me a good understanding of what the record-layer looks like and the possibilities. Now I\u2019m kind of interested in contributing directly to the record-layer, especially the <code>watch</code> part, depending on how the discussion will go <img src=\"https://emoji.discourse-cdn.com/twitter/rocket.png?v=12\" title=\":rocket:\" class=\"emoji\" alt=\":rocket:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-05-06T08:06:22.772Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 53,
        "readers_count": 52,
        "score": 45.6,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7036,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-05-21T00:45:37.045Z",
        "cooked": "<p>Ah, I really should be better at responding more promptly to things\u2026</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"4\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>The issue is opened since 2018, is there other people asking for this? Might worth the shot <img src=\"https://emoji.discourse-cdn.com/twitter/yum.png?v=12\" title=\":yum:\" class=\"emoji\" alt=\":yum:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n</blockquote>\n</aside>\n<p>Hm, I think there are probably a few different people vaguely asking about having this (or wishing this existed). The main difficultly would be trying to make sure that all of the places that perform a <code>set</code> do the \u201cright thing\u201d and translate the set to a versionstamp operation, I think.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"4\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>Does versionstamp tracking has downsides?</p>\n</blockquote>\n</aside>\n<p>Mainly just that it uses some extra space to store the versions (per record, roughly one extra key with a 13 byte value) and therefore also a bit of extra I/O. So, nothing too bad, but not zero, <em>per se</em>.</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"4\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>Maybe that could be a first step to add watches in record-layer, knowing that we can generate an <code>value-type</code> index. Then we could wire a log to provide range watches, what do you think?</p>\n</blockquote>\n</aside>\n<p>Yeah, something like that. I think the exact nature of this log has interesting requirements/scalability questions. For example:</p>\n<ol>\n<li>If it needs to support arbitrary range watches, is it okay if it needs to scan and filter out data from \u201cunused\u201d ranges? For example, you could imagine keeping a history of all changes to everything, and then just throwing out changes not in your watched range. But is that too slow (especially if you\u2019re watching a small range). And could this use pattern lead to hot spots? For example, if all updates end up writing to the tail of this log, then will the storage servers for those log keys be overwhelmed with too many writes?</li>\n<li>An alternative design would, for example, maintain one queue on disk for each range watch request that contains only the changes needed to satisfy that request. But then if there are ranges with many watchers, does that produce a lot of write amplification? And how do you know who\u2019s watching at write time?</li>\n</ol>\n<p>There may be an interesting hybrid or something that allows for most range watches or all range watches (with some ranges being more efficient to watch than others).</p>\n<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"4\" data-topic=\"2047\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>Now I\u2019m kind of interested in contributing directly to the record-layer, especially the <code>watch</code> part, depending on how the discussion will go <img src=\"https://emoji.discourse-cdn.com/twitter/rocket.png?v=12\" title=\":rocket:\" class=\"emoji\" alt=\":rocket:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n</blockquote>\n</aside>\n<p>Awesome! Best of luck exploring!</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-05-21T00:45:37.045Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 44,
        "readers_count": 43,
        "score": 43.8,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7115,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2020-05-29T10:35:04.128Z",
        "cooked": "<p>Thanks Alec for the answers!</p>\n<p>I think I will start my contributions by enabling versions within the primary keys, and then I will upsert any GitHub issues related to watches.  Is that OK for you?</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-05-29T10:35:04.128Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 36,
        "readers_count": 35,
        "score": 22.2,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7171,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-06-02T18:18:36.411Z",
        "cooked": "<p>Yeah, that might be a good issue to start on, though there are some\u2026potential roadblocks that can make that somewhat complicated. So, um, tread carefully\u2026</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-06-02T18:18:36.411Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 35,
        "readers_count": 34,
        "score": 17.0,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 534,
          "username": "PierreZ",
          "name": "Pierre Zemb",
          "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7203,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2020-06-03T06:21:53.521Z",
        "cooked": "<p>As they say: \u201cIts the not the destination, It\u2019s the journey.\u201d <img src=\"https://emoji.discourse-cdn.com/twitter/slightly_smiling_face.png?v=9\" title=\":slightly_smiling_face:\" class=\"emoji\" alt=\":slightly_smiling_face:\"></p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2020-06-03T06:21:53.521Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 34,
        "readers_count": 33,
        "score": 11.8,
        "yours": false,
        "topic_id": 2047,
        "topic_slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer/2047/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      6605,
      6620,
      6891,
      6916,
      7036,
      7115,
      7171,
      7203
    ]
  },
  "timeline_lookup": [
    [
      1,
      2024
    ],
    [
      2,
      2021
    ],
    [
      3,
      1996
    ],
    [
      4,
      1995
    ],
    [
      5,
      1980
    ],
    [
      6,
      1971
    ],
    [
      7,
      1967
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Multiple questions about Indexes, functions and watches to implement etcd-layer",
  "id": 2047,
  "title": "Multiple questions about Indexes, functions and watches to implement etcd-layer",
  "posts_count": 8,
  "created_at": "2020-04-06T11:43:10.344Z",
  "views": 3094,
  "reply_count": 6,
  "like_count": 8,
  "last_posted_at": "2020-06-03T06:21:53.521Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "multiple-questions-about-indexes-functions-and-watches-to-implement-etcd-layer",
  "category_id": 12,
  "word_count": 6269,
  "deleted_at": null,
  "user_id": 534,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2047",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 8,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Changefeeds (watching and getting updates on ranges of keys)",
      "id": 511,
      "title": "Changefeeds (watching and getting updates on ranges of keys)",
      "slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-06-16T12:26:34.710Z",
      "last_posted_at": "2018-07-06T14:46:54.646Z",
      "bumped": true,
      "bumped_at": "2018-07-06T14:46:54.646Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 4221,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 307,
            "username": "jwr",
            "name": "Jan Rychter",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A FoundationDB layer for apiserver as an alternative to etcd",
      "id": 2697,
      "title": "A FoundationDB layer for apiserver as an alternative to etcd",
      "slug": "a-foundationdb-layer-for-apiserver-as-an-alternative-to-etcd",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2021-05-11T17:23:35.277Z",
      "last_posted_at": "2021-10-15T09:24:06.276Z",
      "bumped": true,
      "bumped_at": "2021-10-19T21:04:32.807Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 7,
      "views": 3572,
      "category_id": 14,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 935,
            "username": "wilsonwang371",
            "name": "Wilson Wang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wilsonwang371/{size}/1072_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 1012,
            "username": "julienlau",
            "name": "Julien Laurenceau",
            "avatar_template": "/user_avatar/forums.foundationdb.org/julienlau/{size}/1199_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 534,
            "username": "PierreZ",
            "name": "Pierre Zemb",
            "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Watchers and not missing changes",
      "id": 474,
      "title": "Watchers and not missing changes",
      "slug": "watchers-and-not-missing-changes",
      "posts_count": 14,
      "reply_count": 6,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-25T13:29:22.034Z",
      "last_posted_at": "2018-06-05T23:23:48.371Z",
      "bumped": true,
      "bumped_at": "2018-06-05T23:23:48.371Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 1999,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 289,
            "username": "rowanG",
            "name": "Rowan Goemans",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 298,
            "username": "gwillis12",
            "name": "Geo",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png",
            "trust_level": 0
          }
        }
      ]
    },
    {
      "fancy_title": "Performance characteristics of using Watches for Distributed Task Scheduling",
      "id": 471,
      "title": "Performance characteristics of using Watches for Distributed Task Scheduling",
      "slug": "performance-characteristics-of-using-watches-for-distributed-task-scheduling",
      "posts_count": 28,
      "reply_count": 13,
      "highest_post_number": 28,
      "image_url": "https://global.discourse-cdn.com/foundationdb/original/1X/0819f4ad7c04fe7d847b2f33824849dc70ee6a0c.png",
      "created_at": "2018-05-24T13:42:28.764Z",
      "last_posted_at": "2018-08-16T03:57:50.737Z",
      "bumped": true,
      "bumped_at": "2018-08-16T03:57:50.737Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 15,
      "views": 5180,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 118,
            "username": "abdullin",
            "name": "Rinat Abdullin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/abdullin/{size}/83_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 68,
            "username": "daverosenthal",
            "name": "Dave Rosenthal",
            "avatar_template": "/user_avatar/forums.foundationdb.org/daverosenthal/{size}/51_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Fdb-zk: rough cut of Zookeeper API layer",
      "id": 1278,
      "title": "Fdb-zk: rough cut of Zookeeper API layer",
      "slug": "fdb-zk-rough-cut-of-zookeeper-api-layer",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-04-03T02:54:03.579Z",
      "last_posted_at": "2019-04-09T04:13:12.883Z",
      "bumped": true,
      "bumped_at": "2019-04-09T04:13:12.883Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 5102,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 113,
            "username": "pH14",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 534,
        "username": "PierreZ",
        "name": "Pierre Zemb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "post_count": 5,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 534,
      "username": "PierreZ",
      "name": "Pierre Zemb",
      "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png"
    },
    "last_poster": {
      "id": 534,
      "username": "PierreZ",
      "name": "Pierre Zemb",
      "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png"
    },
    "links": [
      {
        "url": "https://github.com/PierreZ/fdb-etcd",
        "title": "GitHub - PierreZ/fdb-etcd: ETCD layer on top of FoundationDB",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 52,
        "user_id": 534,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://foundationdb.github.io/fdb-record-layer/Extending.html",
        "title": "Extending the Record Layer",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 16,
        "user_id": 534,
        "domain": "foundationdb.github.io",
        "root_domain": "foundationdb.github.io"
      },
      {
        "url": "https://forums.foundationdb.org/t/foundationdb-summit-2019-a-zookeeper-layer-for-foundationdb/1764",
        "title": "FoundationDB Summit 2019: A ZooKeeper Layer for FoundationDB",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 11,
        "user_id": 534,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/understanding-watches/903",
        "title": "Understanding \"Watches\"",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 8,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L270-L272",
        "title": "fdb-record-layer/Main.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 534,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/issues/100",
        "title": "Support putting record version in primary key \u00b7 Issue #100 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/PierreZ/fdb-etcd/blob/master/src/main/proto/record.proto",
        "title": "fdb-etcd/record.proto at master \u00b7 PierreZ/fdb-etcd \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 534,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-spatial/src/main/java/com/apple/foundationdb/record/spatial/geophile/GeophileSpatialFunctionKeyExpressionFactory.java",
        "title": "fdb-record-layer/GeophileSpatialFunctionKeyExpressionFactory.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/AtomicMutationIndexMaintainerFactory.java",
        "title": "fdb-record-layer/AtomicMutationIndexMaintainerFactory.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/indexes/VersionIndexMaintainerFactory.java",
        "title": "fdb-record-layer/VersionIndexMaintainerFactory.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-spatial/src/main/java/com/apple/foundationdb/record/spatial/geophile/GeophileSpatialFunctionKeyExpression.java",
        "title": "fdb-record-layer/GeophileSpatialFunctionKeyExpression.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/master/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/FunctionNames.java",
        "title": "fdb-record-layer/FunctionNames.java at master \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 534,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/1804da48ccf3dcec301767e27743ea492f394f74/fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.java#L583",
        "title": "fdb-record-layer/FDBRecordStore.java at 1804da48ccf3dcec301767e27743ea492f394f74 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}