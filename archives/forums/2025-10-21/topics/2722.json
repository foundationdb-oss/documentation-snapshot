{
  "post_stream": {
    "posts": [
      {
        "id": 9499,
        "name": "Alwin",
        "username": "ajames",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/{size}.png",
        "created_at": "2021-06-02T06:01:56.218Z",
        "cooked": "<p>We have a database with 10TB+ key-value size. We use record layer on top of it.<br>\nWhat is the most efficient way to scan the entire database?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-06-02T06:01:56.218Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 280,
        "reads": 54,
        "readers_count": 53,
        "score": 1410.8,
        "yours": false,
        "topic_id": 2722,
        "topic_slug": "efficient-way-to-scan-entire-database",
        "display_username": "Alwin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 769,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-scan-entire-database/2722/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 9502,
        "name": "Mike McMahon",
        "username": "MMcM",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
        "created_at": "2021-06-02T21:50:01.787Z",
        "cooked": "<p>I think we probably need more information about what you are trying to do to give a useful answer.</p>\n<p>Is this database one single record layer or many? When you say the entire database, do you mean concretely all the records in the database or do you want to traverse <em>everything</em>? What does this scanning do?</p>\n<p>I suspect that part of the answer is to use multiple reader processes. Perhaps with each assigned a portion of the record store, divided up according to the locality API. And, if the processing you need to do is variable, perhaps divided into many more pieces and put into a pending queue so that it smooths out. But even that might not be correct if the database is under active load and by efficient you don\u2019t mean devoting as much of the cluster to getting the job done as possible.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-06-02T21:50:01.787Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 53,
        "readers_count": 52,
        "score": 35.6,
        "yours": false,
        "topic_id": 2722,
        "topic_slug": "efficient-way-to-scan-entire-database",
        "display_username": "Mike McMahon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 219,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-scan-entire-database/2722/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9503,
        "name": "Alwin",
        "username": "ajames",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/{size}.png",
        "created_at": "2021-06-02T23:02:22.111Z",
        "cooked": "<p>Just one record layer.</p>\n<p>Might need to traverse all records. Primary key is a combination of two fields (f1,f2) and one use case is to delete records if f2 is present in given list of keys. Yes, I was looking into multiple reader approach. This job will probably run in background without disturbing main workload to cluster.</p>\n<p>Also, what is best way to count/get total number records?</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-06-02T23:02:22.111Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 15,
        "reads": 53,
        "readers_count": 52,
        "score": 90.6,
        "yours": false,
        "topic_id": 2722,
        "topic_slug": "efficient-way-to-scan-entire-database",
        "display_username": "Alwin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 219,
          "username": "MMcM",
          "name": "Mike McMahon",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 769,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-scan-entire-database/2722/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9504,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2021-06-03T18:26:45.163Z",
        "cooked": "<p>When breaking things up, you may be interested the <a href=\"https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.10.164.0/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.html#getPrimaryKeyBoundaries(com.apple.foundationdb.tuple.Tuple,com.apple.foundationdb.tuple.Tuple)\"><code>getPrimaryKeyBoundaries</code></a> API, which given a range, will tell you the primary keys closest to where FDB is sharding your data, so for a 10 TB database, you could run that one machine to generate split points, then farm the scan out to multiple readers so that each reader reads a different set of shards. This could allow you to spread out work more evenly than if you needed to do something like pick split points yourself (unless you have domain knowledge of your primary key distribution).</p>\n<aside class=\"quote no-group\" data-username=\"ajames\" data-post=\"3\" data-topic=\"2722\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/48.png\" class=\"avatar\"> ajames:</div>\n<blockquote>\n<p>Also, what is best way to count/get total number records?</p>\n</blockquote>\n</aside>\n<p>You can define a <code>COUNT</code> index that will tell you the total number of records and/or the total number of records of a given type. See this example here: <a href=\"https://github.com/FoundationDB/fdb-record-layer/blob/d17664ff507cfef07af6f9bdce0b6e9648ce81f7/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L272\">https://github.com/FoundationDB/fdb-record-layer/blob/d17664ff507cfef07af6f9bdce0b6e9648ce81f7/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L272</a></p>\n<p>For an ungrouped COUNT index, reading the record count is O(1). You can add additional grouping keys, in which case the index will need to aggregate up 1 key per grouping key value if you scan over multiple groups.</p>\n<p>Not sure about your mutation pattern, but note that adding this index can cause hot sharding problems, as defining the index will now cause every record insert and delete to update the COUNT index key(s). This may or may not be a problem for you depending on your mutation rate (and your hardware), and it might be something you\u2019ll need to experiment with. If you can\u2019t use the index due to hot shard concerns, I think the only alternative to get the count is to scan over the full store (possibly breaking it up using the strategy outlined above) and then collect the count.</p>\n<p>Also, if you want the <em>size</em> (in bytes) rather than the count, we did add some methods to use some FDB-maintained sampling data in Record Layer 3.0 to produce an approximation, though that\u2019s currently not published to maven (yet) as recent build changes broke our maven publishing pipeline. For the estimate size changes, see: <a href=\"https://github.com/FoundationDB/fdb-record-layer/issues/1229\" class=\"inline-onebox\">Expose range size estimate on Record Stores \u00b7 Issue #1229 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub</a></p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-06-03T18:26:45.163Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 12,
        "reads": 51,
        "readers_count": 50,
        "score": 70.2,
        "yours": false,
        "topic_id": 2722,
        "topic_slug": "efficient-way-to-scan-entire-database",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.10.164.0/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.html#getPrimaryKeyBoundaries(com.apple.foundationdb.tuple.Tuple,com.apple.foundationdb.tuple.Tuple)",
            "internal": false,
            "reflection": false,
            "title": "FDBRecordStore (fdb-record-layer-core 2.10.164.0 API)",
            "clicks": 23
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/blob/d17664ff507cfef07af6f9bdce0b6e9648ce81f7/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L272",
            "internal": false,
            "reflection": false,
            "title": "fdb-record-layer/Main.java at d17664ff507cfef07af6f9bdce0b6e9648ce81f7 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 21
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/issues/1229",
            "internal": false,
            "reflection": false,
            "title": "Expose range size estimate on Record Stores \u00b7 Issue #1229 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 12
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-scan-entire-database/2722/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 13515,
        "name": "Alwin",
        "username": "ajames",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/{size}.png",
        "created_at": "2023-11-16T23:48:03.155Z",
        "cooked": "<p>Are the latest versions of FDB equipped with built-in improvements or tools for efficiently scanning the entire database, or is the conventional approach of employing multiple readers assigned to segments of the record store still the recommended method?</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2023-11-16T23:48:03.155Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 21,
        "readers_count": 20,
        "score": 9.2,
        "yours": false,
        "topic_id": 2722,
        "topic_slug": "efficient-way-to-scan-entire-database",
        "display_username": "Alwin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 769,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/efficient-way-to-scan-entire-database/2722/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      9499,
      9502,
      9503,
      9504,
      13515
    ]
  },
  "timeline_lookup": [
    [
      1,
      1603
    ],
    [
      2,
      1602
    ],
    [
      4,
      1601
    ],
    [
      5,
      705
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Efficient way to scan entire database",
  "id": 2722,
  "title": "Efficient way to scan entire database",
  "posts_count": 5,
  "created_at": "2021-06-02T06:01:56.149Z",
  "views": 1260,
  "reply_count": 2,
  "like_count": 0,
  "last_posted_at": "2023-11-16T23:48:03.155Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "efficient-way-to-scan-entire-database",
  "category_id": 14,
  "word_count": 693,
  "deleted_at": null,
  "user_id": 769,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2722",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 5,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Getting the number of key/value pairs",
      "id": 189,
      "title": "Getting the number of key/value pairs",
      "slug": "getting-the-number-of-key-value-pairs",
      "posts_count": 12,
      "reply_count": 9,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2018-04-21T20:01:47.493Z",
      "last_posted_at": "2021-04-17T19:06:40.085Z",
      "bumped": true,
      "bumped_at": "2021-04-17T19:06:40.085Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 6235,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 132,
            "username": "Michael",
            "name": "Michael",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/4bbf92/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 323,
            "username": "WolfDan",
            "name": "Wolf Dan",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wolfdan/{size}/806_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 41,
            "username": "amirouche",
            "name": "Amirouche",
            "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Missing API for getting just the count of a key range?",
      "id": 444,
      "title": "Missing API for getting just the count of a key range?",
      "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
      "posts_count": 14,
      "reply_count": 9,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-21T09:23:36.938Z",
      "last_posted_at": "2018-09-10T16:25:03.060Z",
      "bumped": true,
      "bumped_at": "2018-09-10T16:25:03.060Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 3599,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Record Layer query performance benchmarking against traditional RDBMS",
      "id": 2082,
      "title": "Record Layer query performance benchmarking against traditional RDBMS",
      "slug": "record-layer-query-performance-benchmarking-against-traditional-rdbms",
      "posts_count": 4,
      "reply_count": 0,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2020-04-20T18:46:55.680Z",
      "last_posted_at": "2020-04-22T15:51:53.223Z",
      "bumped": true,
      "bumped_at": "2020-04-22T15:51:53.223Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1528,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 712,
            "username": "rahul-nitkkr",
            "name": "Rahul Roy",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 34,
            "username": "scgray",
            "name": "Scott Gray",
            "avatar_template": "/user_avatar/forums.foundationdb.org/scgray/{size}/30_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Scaling Record Layer for Bulk Writes",
      "id": 2249,
      "title": "Scaling Record Layer for Bulk Writes",
      "slug": "scaling-record-layer-for-bulk-writes",
      "posts_count": 7,
      "reply_count": 2,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2020-07-16T16:18:26.188Z",
      "last_posted_at": "2020-07-24T20:28:03.020Z",
      "bumped": true,
      "bumped_at": "2020-07-24T20:28:03.020Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 936,
      "category_id": 14,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 712,
            "username": "rahul-nitkkr",
            "name": "Rahul Roy",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 741,
            "username": "sears",
            "name": "Russell Sears",
            "avatar_template": "/user_avatar/forums.foundationdb.org/sears/{size}/887_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Keyspace partitions &amp; performance",
      "id": 168,
      "title": "Keyspace partitions & performance",
      "slug": "keyspace-partitions-performance",
      "posts_count": 9,
      "reply_count": 5,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-04-21T05:03:54.670Z",
      "last_posted_at": "2018-04-22T03:29:31.049Z",
      "bumped": true,
      "bumped_at": "2018-04-22T03:29:31.049Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 5892,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 113,
            "username": "pH14",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 9,
            "username": "mbhaskar",
            "name": "Bhaskar Muppana",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 769,
        "username": "ajames",
        "name": "Alwin",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/{size}.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 219,
        "username": "MMcM",
        "name": "Mike McMahon",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 769,
      "username": "ajames",
      "name": "Alwin",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/{size}.png"
    },
    "last_poster": {
      "id": 769,
      "username": "ajames",
      "name": "Alwin",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/9de0a6/{size}.png"
    },
    "links": [
      {
        "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.10.164.0/com/apple/foundationdb/record/provider/foundationdb/FDBRecordStore.html#getPrimaryKeyBoundaries(com.apple.foundationdb.tuple.Tuple,com.apple.foundationdb.tuple.Tuple)",
        "title": "FDBRecordStore (fdb-record-layer-core 2.10.164.0 API)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 23,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/blob/d17664ff507cfef07af6f9bdce0b6e9648ce81f7/examples/src/main/java/com/apple/foundationdb/record/sample/Main.java#L272",
        "title": "fdb-record-layer/Main.java at d17664ff507cfef07af6f9bdce0b6e9648ce81f7 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 21,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/issues/1229",
        "title": "Expose range size estimate on Record Stores \u00b7 Issue #1229 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 12,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}