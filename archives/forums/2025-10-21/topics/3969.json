{
  "post_stream": {
    "posts": [
      {
        "id": 12853,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2023-05-17T13:31:18.474Z",
        "cooked": "<p>I adding support for <code>fdb_transaction_get_range_split_points</code> to the .NET binding, and when doing some basic testing, I am getting a list of split points that seem very unevenly distributed, and with a lot of variation between chunks (multiple orders of magnitude from smallest to largest).</p>\n<p>My test runs on a <strong>7.1.24</strong> multi-process cluster that is mostly empty (used for testing). I insert a set of <strong>50k keys</strong>, all with <strong>50-byte random values</strong> (~2.5 MB of data).</p>\n<p>I then get the list of split points with a chunk size of <strong>12,500 bytes</strong> (I\u2019m expecting <strong>~200 chunks</strong> in return), and query the keys between each points to count the number of keys and size. This gives me <strong>109 chunks</strong> as small as <strong>200 bytes</strong> (4 keys!) and as large as <strong>150KB</strong>, with average 23 KB, and almost none that match the request chunk size (see below for the dump of the keys).</p>\n<p>The very small chunks are probably the extra bits that are the result of splitting shards into chunks, but I\u2019m more surprised by the un-even-ness of the other chunks, with some more than 10x the expected size.</p>\n<p>I tried changing the chunk size, and the number of split points almost never change, I also tried waiting several minutes between inserting the data and querying, and the behavior is mostly the same.</p>\n<p>Changing the parameters (number of items, size of the values, chunk size, etc\u2026) and the result are always the same: the actual size of the split points is all over the place.</p>\n<p>Is this something that other are seeing as well? Am I doing something wrong? Are my expectations of this API too strong? All the keys returned are valid keys, they all are contained within the range that I specified at the start, the first and last key match the bounds of the range, etc\u2026</p>\n<p>I looked at the implementation in <code>StorageMetrics.actor.cpp</code> method <code>getSplitPoints()</code> , and I see that it is probing the <code>bytesample</code> index to get an approximate set of keys that are roughly spaced by <code>chunkSize</code> bytes appart. Could this be because of a very uneven sampling of the keys by this actor ?</p>\n<p>Here is the result of getting the split points with chunk size 12500 in a range of 50K keys with 50 bytes values:</p>\n<pre><code class=\"lang-auto\">Creating 50,000 keys (50 bytes per key) with 2,500,000 total bytes\nGet split points for chunks of 12,500 bytes...\nFound 109 split points\n&gt; (0,) .. (60,):\t\t    60 results, size(values) =   3,000 bytes, ratio =     24%\n&gt; (60,) .. (520,):\t\t   460 results, size(values) =  23,000 bytes, ratio =    184%\n&gt; (520,) .. (622,):\t\t   102 results, size(values) =   5,100 bytes, ratio =     41%\n&gt; (622,) .. (687,):\t\t    65 results, size(values) =   3,250 bytes, ratio =     26%\n&gt; (687,) .. (897,):\t\t   210 results, size(values) =  10,500 bytes, ratio =     84%\n&gt; (897,) .. (1346,):\t   449 results, size(values) =  22,450 bytes, ratio =    180%\n&gt; (1346,) .. (1351,):\t     5 results, size(values) =     250 bytes, ratio =      2%\n&gt; (1351,) .. (2456,):\t 1,105 results, size(values) =  55,250 bytes, ratio =    442%\n&gt; (2456,) .. (2805,):\t   349 results, size(values) =  17,450 bytes, ratio =    140%\n&gt; (2805,) .. (3559,):\t   754 results, size(values) =  37,700 bytes, ratio =    302%\n&gt; (3559,) .. (4274,):\t   715 results, size(values) =  35,750 bytes, ratio =    286%\n&gt; (4274,) .. (5977,):\t 1,703 results, size(values) =  85,150 bytes, ratio =    681%\n&gt; (5977,) .. (6094,):\t   117 results, size(values) =   5,850 bytes, ratio =     47%\n&gt; (6094,) .. (6693,):\t   599 results, size(values) =  29,950 bytes, ratio =    240%\n&gt; (6693,) .. (6708,):\t    15 results, size(values) =     750 bytes, ratio =      6%\n&gt; (6708,) .. (6819,):\t   111 results, size(values) =   5,550 bytes, ratio =     44%\n&gt; (6819,) .. (6868,):\t    49 results, size(values) =   2,450 bytes, ratio =     20%\n&gt; (6868,) .. (9922,):\t 3,054 results, size(values) = 152,700 bytes, ratio =  1,222%\n&gt; (9922,) .. (11082,):\t 1,160 results, size(values) =  58,000 bytes, ratio =    464%\n&gt; (11082,) .. (12572,):\t 1,490 results, size(values) =  74,500 bytes, ratio =    596%\n&gt; (12572,) .. (13086,):\t   514 results, size(values) =  25,700 bytes, ratio =    206%\n&gt; (13086,) .. (13299,):\t   213 results, size(values) =  10,650 bytes, ratio =     85%\n&gt; (13299,) .. (13815,):\t   516 results, size(values) =  25,800 bytes, ratio =    206%\n&gt; (13815,) .. (13839,):\t    24 results, size(values) =   1,200 bytes, ratio =     10%\n&gt; (13839,) .. (14022,):\t   183 results, size(values) =   9,150 bytes, ratio =     73%\n&gt; (14022,) .. (14179,):\t   157 results, size(values) =   7,850 bytes, ratio =     63%\n&gt; (14179,) .. (14233,):\t    54 results, size(values) =   2,700 bytes, ratio =     22%\n&gt; (14233,) .. (14646,):\t   413 results, size(values) =  20,650 bytes, ratio =    165%\n&gt; (14646,) .. (15661,):\t 1,015 results, size(values) =  50,750 bytes, ratio =    406%\n&gt; (15661,) .. (15986,):\t   325 results, size(values) =  16,250 bytes, ratio =    130%\n&gt; (15986,) .. (16112,):\t   126 results, size(values) =   6,300 bytes, ratio =     50%\n&gt; (16112,) .. (18461,):\t 2,349 results, size(values) = 117,450 bytes, ratio =    940%\n&gt; (18461,) .. (19400,):\t   939 results, size(values) =  46,950 bytes, ratio =    376%\n&gt; (19400,) .. (19629,):\t   229 results, size(values) =  11,450 bytes, ratio =     92%\n&gt; (19629,) .. (20873,):\t 1,244 results, size(values) =  62,200 bytes, ratio =    498%\n&gt; (20873,) .. (21241,):\t   368 results, size(values) =  18,400 bytes, ratio =    147%\n&gt; (21241,) .. (21784,):\t   543 results, size(values) =  27,150 bytes, ratio =    217%\n&gt; (21784,) .. (21989,):\t   205 results, size(values) =  10,250 bytes, ratio =     82%\n&gt; (21989,) .. (22076,):\t    87 results, size(values) =   4,350 bytes, ratio =     35%\n&gt; (22076,) .. (22237,):\t   161 results, size(values) =   8,050 bytes, ratio =     64%\n&gt; (22237,) .. (22281,):\t    44 results, size(values) =   2,200 bytes, ratio =     18%\n&gt; (22281,) .. (23339,):\t 1,058 results, size(values) =  52,900 bytes, ratio =    423%\n&gt; (23339,) .. (23416,):\t    77 results, size(values) =   3,850 bytes, ratio =     31%\n&gt; (23416,) .. (23515,):\t    99 results, size(values) =   4,950 bytes, ratio =     40%\n&gt; (23515,) .. (25773,):\t 2,258 results, size(values) = 112,900 bytes, ratio =    903%\n&gt; (25773,) .. (25901,):\t   128 results, size(values) =   6,400 bytes, ratio =     51%\n&gt; (25901,) .. (26070,):\t   169 results, size(values) =   8,450 bytes, ratio =     68%\n&gt; (26070,) .. (26161,):\t    91 results, size(values) =   4,550 bytes, ratio =     36%\n&gt; (26161,) .. (26261,):\t   100 results, size(values) =   5,000 bytes, ratio =     40%\n&gt; (26261,) .. (26857,):\t   596 results, size(values) =  29,800 bytes, ratio =    238%\n&gt; (26857,) .. (27342,):\t   485 results, size(values) =  24,250 bytes, ratio =    194%\n&gt; (27342,) .. (27390,):\t    48 results, size(values) =   2,400 bytes, ratio =     19%\n&gt; (27390,) .. (27479,):\t    89 results, size(values) =   4,450 bytes, ratio =     36%\n&gt; (27479,) .. (27540,):\t    61 results, size(values) =   3,050 bytes, ratio =     24%\n&gt; (27540,) .. (28001,):\t   461 results, size(values) =  23,050 bytes, ratio =    184%\n&gt; (28001,) .. (28129,):\t   128 results, size(values) =   6,400 bytes, ratio =     51%\n&gt; (28129,) .. (29549,):\t 1,420 results, size(values) =  71,000 bytes, ratio =    568%\n&gt; (29549,) .. (29810,):\t   261 results, size(values) =  13,050 bytes, ratio =    104%\n&gt; (29810,) .. (31272,):\t 1,462 results, size(values) =  73,100 bytes, ratio =    585%\n&gt; (31272,) .. (31301,):\t    29 results, size(values) =   1,450 bytes, ratio =     12%\n&gt; (31301,) .. (33260,):\t 1,959 results, size(values) =  97,950 bytes, ratio =    784%\n&gt; (33260,) .. (33264,):\t     4 results, size(values) =     200 bytes, ratio =      2%\n&gt; (33264,) .. (33698,):\t   434 results, size(values) =  21,700 bytes, ratio =    174%\n&gt; (33698,) .. (34110,):\t   412 results, size(values) =  20,600 bytes, ratio =    165%\n&gt; (34110,) .. (34274,):\t   164 results, size(values) =   8,200 bytes, ratio =     66%\n&gt; (34274,) .. (34600,):\t   326 results, size(values) =  16,300 bytes, ratio =    130%\n&gt; (34600,) .. (35616,):\t 1,016 results, size(values) =  50,800 bytes, ratio =    406%\n&gt; (35616,) .. (35927,):\t   311 results, size(values) =  15,550 bytes, ratio =    124%\n&gt; (35927,) .. (36060,):\t   133 results, size(values) =   6,650 bytes, ratio =     53%\n&gt; (36060,) .. (36339,):\t   279 results, size(values) =  13,950 bytes, ratio =    112%\n&gt; (36339,) .. (36355,):\t    16 results, size(values) =     800 bytes, ratio =      6%\n&gt; (36355,) .. (37135,):\t   780 results, size(values) =  39,000 bytes, ratio =    312%\n&gt; (37135,) .. (37705,):\t   570 results, size(values) =  28,500 bytes, ratio =    228%\n&gt; (37705,) .. (38056,):\t   351 results, size(values) =  17,550 bytes, ratio =    140%\n&gt; (38056,) .. (38527,):\t   471 results, size(values) =  23,550 bytes, ratio =    188%\n&gt; (38527,) .. (39289,):\t   762 results, size(values) =  38,100 bytes, ratio =    305%\n&gt; (39289,) .. (39381,):\t    92 results, size(values) =   4,600 bytes, ratio =     37%\n&gt; (39381,) .. (39793,):\t   412 results, size(values) =  20,600 bytes, ratio =    165%\n&gt; (39793,) .. (39882,):\t    89 results, size(values) =   4,450 bytes, ratio =     36%\n&gt; (39882,) .. (40029,):\t   147 results, size(values) =   7,350 bytes, ratio =     59%\n&gt; (40029,) .. (40266,):\t   237 results, size(values) =  11,850 bytes, ratio =     95%\n&gt; (40266,) .. (41001,):\t   735 results, size(values) =  36,750 bytes, ratio =    294%\n&gt; (41001,) .. (41222,):\t   221 results, size(values) =  11,050 bytes, ratio =     88%\n&gt; (41222,) .. (41233,):\t    11 results, size(values) =     550 bytes, ratio =      4%\n&gt; (41233,) .. (41361,):\t   128 results, size(values) =   6,400 bytes, ratio =     51%\n&gt; (41361,) .. (41521,):\t   160 results, size(values) =   8,000 bytes, ratio =     64%\n&gt; (41521,) .. (41846,):\t   325 results, size(values) =  16,250 bytes, ratio =    130%\n&gt; (41846,) .. (42649,):\t   803 results, size(values) =  40,150 bytes, ratio =    321%\n&gt; (42649,) .. (42745,):\t    96 results, size(values) =   4,800 bytes, ratio =     38%\n&gt; (42745,) .. (43556,):\t   811 results, size(values) =  40,550 bytes, ratio =    324%\n&gt; (43556,) .. (43731,):\t   175 results, size(values) =   8,750 bytes, ratio =     70%\n&gt; (43731,) .. (43881,):\t   150 results, size(values) =   7,500 bytes, ratio =     60%\n&gt; (43881,) .. (44189,):\t   308 results, size(values) =  15,400 bytes, ratio =    123%\n&gt; (44189,) .. (44468,):\t   279 results, size(values) =  13,950 bytes, ratio =    112%\n&gt; (44468,) .. (44504,):\t    36 results, size(values) =   1,800 bytes, ratio =     14%\n&gt; (44504,) .. (44633,):\t   129 results, size(values) =   6,450 bytes, ratio =     52%\n&gt; (44633,) .. (44643,):\t    10 results, size(values) =     500 bytes, ratio =      4%\n&gt; (44643,) .. (44836,):\t   193 results, size(values) =   9,650 bytes, ratio =     77%\n&gt; (44836,) .. (45380,):\t   544 results, size(values) =  27,200 bytes, ratio =    218%\n&gt; (45380,) .. (45596,):\t   216 results, size(values) =  10,800 bytes, ratio =     86%\n&gt; (45596,) .. (45721,):\t   125 results, size(values) =   6,250 bytes, ratio =     50%\n&gt; (45721,) .. (45916,):\t   195 results, size(values) =   9,750 bytes, ratio =     78%\n&gt; (45916,) .. (45964,):\t    48 results, size(values) =   2,400 bytes, ratio =     19%\n&gt; (45964,) .. (46728,):\t   764 results, size(values) =  38,200 bytes, ratio =    306%\n&gt; (46728,) .. (48372,):\t 1,644 results, size(values) =  82,200 bytes, ratio =    658%\n&gt; (48372,) .. (48826,):\t   454 results, size(values) =  22,700 bytes, ratio =    182%\n&gt; (48826,) .. (48873,):\t    47 results, size(values) =   2,350 bytes, ratio =     19%\n&gt; (48873,) .. (50000,):\t 1,127 results, size(values) =  56,350 bytes, ratio =    451%\nStatistics: smallest = 200 bytes, largest = 152,700 bytes, average = 23,148 bytes\n</code></pre>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 2,
        "updated_at": "2023-05-17T13:33:17.708Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 20,
        "reads": 20,
        "readers_count": 19,
        "score": 104.0,
        "yours": false,
        "topic_id": 3969,
        "topic_slug": "issues-with-get-range-split-points-returning-chunks-of-very-uneven-size",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/issues-with-get-range-split-points-returning-chunks-of-very-uneven-size/3969/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 12855,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2023-05-17T15:59:18.677Z",
        "cooked": "<p>I added support for <code>fdb_get_estimated_range_size_bytes()</code> as well, and running a similar test, the values returned are a lot less \u201crandom\u201d: the estimated size is a lot closer to the actual values (if I count the size of the key and values combined). Only a very few ranges return 0 which could be expected (if it falls between two sampled keys)</p>\n<p>From the same cluster as above:</p>\n<pre><code class=\"lang-auto\">Get estimated ranges size...\n&gt; (12,295 .. 47,116): estimated = 2,268,750 bytes, exact(key+value) = 1,845,513 bytes, ratio =  122.9%\n&gt; (    29 .. 46,616): estimated = 2,904,000 bytes, exact(key+value) = 2,468,884 bytes, ratio =  117.6%\n&gt; ( 4,178 .. 42,548): estimated = 2,389,750 bytes, exact(key+value) = 2,033,610 bytes, ratio =  117.5%\n&gt; ( 1,441 .. 19,812): estimated = 1,179,750 bytes, exact(key+value) =   973,663 bytes, ratio =  121.2%\n&gt; (35,957 .. 40,191): estimated =   211,750 bytes, exact(key+value) =   224,402 bytes, ratio =   94.4%\n&gt; ( 6,140 .. 41,101): estimated = 2,268,750 bytes, exact(key+value) = 1,852,933 bytes, ratio =  122.4%\n&gt; ( 6,074 .. 36,519): estimated = 1,936,000 bytes, exact(key+value) = 1,613,585 bytes, ratio =  120.0%\n&gt; (30,186 .. 39,220): estimated =   605,000 bytes, exact(key+value) =   478,802 bytes, ratio =  126.4%\n&gt; (24,372 .. 30,789): estimated =   393,250 bytes, exact(key+value) =   340,101 bytes, ratio =  115.6%\n&gt; (18,989 .. 47,952): estimated = 1,905,750 bytes, exact(key+value) = 1,535,039 bytes, ratio =  124.1%\n&gt; ( 1,019 .. 10,664): estimated =   574,750 bytes, exact(key+value) =   511,185 bytes, ratio =  112.4%\n&gt; ( 6,698 .. 31,605): estimated = 1,512,500 bytes, exact(key+value) = 1,320,071 bytes, ratio =  114.6%\n&gt; ( 3,708 .. 46,378): estimated = 2,783,000 bytes, exact(key+value) = 2,261,510 bytes, ratio =  123.1%\n&gt; (23,276 .. 45,438): estimated = 1,452,000 bytes, exact(key+value) = 1,174,586 bytes, ratio =  123.6%\n&gt; ( 4,330 ..  6,747): estimated =   151,250 bytes, exact(key+value) =   128,101 bytes, ratio =  118.1%\n&gt; (21,174 .. 29,904): estimated =   423,500 bytes, exact(key+value) =   462,690 bytes, ratio =   91.5%\n&gt; (20,870 .. 29,821): estimated =   423,500 bytes, exact(key+value) =   474,403 bytes, ratio =   89.3%\n&gt; (44,970 .. 45,813): estimated =    30,250 bytes, exact(key+value) =    44,679 bytes, ratio =   67.7%\n&gt; ( 3,309 .. 35,273): estimated = 2,026,750 bytes, exact(key+value) = 1,694,092 bytes, ratio =  119.6%\n&gt; (32,551 .. 44,985): estimated =   847,000 bytes, exact(key+value) =   659,002 bytes, ratio =  128.5%\n&gt; ( 7,638 .. 11,921): estimated =   332,750 bytes, exact(key+value) =   226,999 bytes, ratio =  146.6%\n&gt; (24,517 .. 25,982): estimated =    60,500 bytes, exact(key+value) =    77,645 bytes, ratio =   77.9%\n&gt; ( 6,762 .. 47,282): estimated = 2,692,250 bytes, exact(key+value) = 2,147,560 bytes, ratio =  125.4%\n&gt; (10,521 .. 27,037): estimated =   937,750 bytes, exact(key+value) =   875,348 bytes, ratio =  107.1%\n&gt; (32,231 .. 38,835): estimated =   514,250 bytes, exact(key+value) =   350,012 bytes, ratio =  146.9%\n&gt; (19,680 .. 35,887): estimated =   937,750 bytes, exact(key+value) =   858,971 bytes, ratio =  109.2%\n&gt; (   776 .. 14,430): estimated =   847,000 bytes, exact(key+value) =   723,662 bytes, ratio =  117.0%\n&gt; (46,097 .. 49,589): estimated =   302,500 bytes, exact(key+value) =   185,076 bytes, ratio =  163.4%\n&gt; ( 5,597 .. 15,011): estimated =   695,750 bytes, exact(key+value) =   498,942 bytes, ratio =  139.4%\n&gt; (46,170 .. 46,321): estimated =         0 bytes, exact(key+value) =     8,003 bytes, ratio =    0.0%\n&gt; ( 8,740 .. 46,536): estimated = 2,329,250 bytes, exact(key+value) = 2,003,188 bytes, ratio =  116.3%\n&gt; (29,209 .. 47,111): estimated = 1,361,250 bytes, exact(key+value) =   948,806 bytes, ratio =  143.5%\n&gt; (10,287 .. 19,926): estimated =   635,250 bytes, exact(key+value) =   510,867 bytes, ratio =  124.3%\n&gt; (26,253 .. 35,270): estimated =   665,500 bytes, exact(key+value) =   477,901 bytes, ratio =  139.3%\n&gt; (34,372 .. 41,549): estimated =   514,250 bytes, exact(key+value) =   380,381 bytes, ratio =  135.2%\n&gt; ( 3,947 .. 21,063): estimated = 1,179,750 bytes, exact(key+value) =   907,148 bytes, ratio =  130.1%\n&gt; (35,804 .. 36,437): estimated =    30,250 bytes, exact(key+value) =    33,549 bytes, ratio =   90.2%\n&gt; (40,314 .. 48,743): estimated =   756,250 bytes, exact(key+value) =   446,737 bytes, ratio =  169.3%\n&gt; (25,037 .. 32,180): estimated =   393,250 bytes, exact(key+value) =   378,579 bytes, ratio =  103.9%\n&gt; ( 6,425 .. 24,843): estimated = 1,119,250 bytes, exact(key+value) =   976,154 bytes, ratio =  114.7%\n&gt; (18,401 .. 35,856): estimated = 1,028,500 bytes, exact(key+value) =   925,115 bytes, ratio =  111.2%\n&gt; (22,099 .. 34,440): estimated =   786,500 bytes, exact(key+value) =   654,073 bytes, ratio =  120.2%\n&gt; (10,224 .. 20,860): estimated =   665,500 bytes, exact(key+value) =   563,708 bytes, ratio =  118.1%\n&gt; ( 6,440 .. 20,398): estimated =   968,000 bytes, exact(key+value) =   739,774 bytes, ratio =  130.9%\n&gt; (30,232 .. 48,873): estimated = 1,361,250 bytes, exact(key+value) =   987,973 bytes, ratio =  137.8%\n&gt; (20,261 .. 40,215): estimated = 1,119,250 bytes, exact(key+value) = 1,057,562 bytes, ratio =  105.8%\n&gt; ( 6,987 .. 48,815): estimated = 2,783,000 bytes, exact(key+value) = 2,216,884 bytes, ratio =  125.5%\n&gt; (11,102 .. 23,811): estimated =   695,750 bytes, exact(key+value) =   673,577 bytes, ratio =  103.3%\n&gt; (14,809 .. 46,772): estimated = 2,026,750 bytes, exact(key+value) = 1,694,039 bytes, ratio =  119.6%\n&gt; (14,230 .. 36,835): estimated = 1,361,250 bytes, exact(key+value) = 1,198,065 bytes, ratio =  113.6%\n&gt; (12,012 .. 34,268): estimated = 1,300,750 bytes, exact(key+value) = 1,179,568 bytes, ratio =  110.3%\n&gt; ( 4,462 .. 35,487): estimated = 1,966,250 bytes, exact(key+value) = 1,644,325 bytes, ratio =  119.6%\n&gt; (14,824 .. 28,283): estimated =   756,250 bytes, exact(key+value) =   713,327 bytes, ratio =  106.0%\n&gt; (14,338 .. 33,875): estimated = 1,179,750 bytes, exact(key+value) = 1,035,461 bytes, ratio =  113.9%\n&gt; (   846 .. 24,116): estimated = 1,331,000 bytes, exact(key+value) = 1,233,310 bytes, ratio =  107.9%\n&gt; (21,060 .. 23,417): estimated =    60,500 bytes, exact(key+value) =   124,921 bytes, ratio =   48.4%\n&gt; (39,896 .. 40,167): estimated =         0 bytes, exact(key+value) =    14,363 bytes, ratio =    0.0%\n&gt; (10,313 .. 40,338): estimated = 1,754,500 bytes, exact(key+value) = 1,591,325 bytes, ratio =  110.3%\n&gt; (12,095 .. 25,011): estimated =   726,000 bytes, exact(key+value) =   684,548 bytes, ratio =  106.1%\n&gt; (    62 ..  8,349): estimated =   544,500 bytes, exact(key+value) =   439,017 bytes, ratio =  124.0%\n&gt; (28,830 .. 49,528): estimated = 1,512,500 bytes, exact(key+value) = 1,096,994 bytes, ratio =  137.9%\n&gt; (42,675 .. 46,020): estimated =   302,500 bytes, exact(key+value) =   177,285 bytes, ratio =  170.6%\n&gt; (33,685 .. 44,157): estimated =   726,000 bytes, exact(key+value) =   555,016 bytes, ratio =  130.8%\n&gt; (14,075 .. 36,989): estimated = 1,361,250 bytes, exact(key+value) = 1,214,442 bytes, ratio =  112.1%\n&gt; (12,626 .. 29,211): estimated =   907,500 bytes, exact(key+value) =   879,005 bytes, ratio =  103.2%\n&gt; (28,264 .. 33,933): estimated =   363,000 bytes, exact(key+value) =   300,457 bytes, ratio =  120.8%\n&gt; (17,950 .. 38,008): estimated = 1,149,500 bytes, exact(key+value) = 1,063,074 bytes, ratio =  108.1%\n&gt; ( 1,587 .. 44,412): estimated = 2,692,250 bytes, exact(key+value) = 2,269,725 bytes, ratio =  118.6%\n&gt; (29,978 .. 32,913): estimated =   211,750 bytes, exact(key+value) =   155,555 bytes, ratio =  136.1%\n&gt; ( 6,036 .. 43,815): estimated = 2,420,000 bytes, exact(key+value) = 2,002,287 bytes, ratio =  120.9%\n&gt; ( 6,059 .. 26,348): estimated = 1,210,000 bytes, exact(key+value) = 1,075,317 bytes, ratio =  112.5%\n&gt; (29,385 .. 32,323): estimated =   211,750 bytes, exact(key+value) =   155,714 bytes, ratio =  136.0%\n&gt; (16,798 .. 27,813): estimated =   574,750 bytes, exact(key+value) =   583,795 bytes, ratio =   98.5%\n&gt; (17,090 .. 30,094): estimated =   695,750 bytes, exact(key+value) =   689,212 bytes, ratio =  100.9%\n&gt; (33,472 .. 38,501): estimated =   363,000 bytes, exact(key+value) =   266,537 bytes, ratio =  136.2%\n&gt; (39,797 .. 49,007): estimated =   756,250 bytes, exact(key+value) =   488,130 bytes, ratio =  154.9%\n&gt; (14,167 .. 38,423): estimated = 1,512,500 bytes, exact(key+value) = 1,285,568 bytes, ratio =  117.7%\n&gt; (33,182 .. 37,306): estimated =   211,750 bytes, exact(key+value) =   218,572 bytes, ratio =   96.9%\n&gt; (38,247 .. 42,811): estimated =   302,500 bytes, exact(key+value) =   241,892 bytes, ratio =  125.1%\n&gt; (10,305 .. 44,597): estimated = 2,147,750 bytes, exact(key+value) = 1,817,476 bytes, ratio =  118.2%\n&gt; (   748 .. 46,886): estimated = 2,873,750 bytes, exact(key+value) = 2,445,314 bytes, ratio =  117.5%\n&gt; ( 1,711 .. 44,905): estimated = 2,692,250 bytes, exact(key+value) = 2,289,282 bytes, ratio =  117.6%\n&gt; (16,912 .. 42,795): estimated = 1,573,000 bytes, exact(key+value) = 1,371,799 bytes, ratio =  114.7%\n&gt; ( 2,158 ..  5,466): estimated =   151,250 bytes, exact(key+value) =   175,324 bytes, ratio =   86.3%\n&gt; ( 8,725 .. 45,484): estimated = 2,268,750 bytes, exact(key+value) = 1,948,227 bytes, ratio =  116.5%\n&gt; ( 7,425 .. 32,117): estimated = 1,452,000 bytes, exact(key+value) = 1,308,676 bytes, ratio =  111.0%\n&gt; ( 2,312 .. 31,195): estimated = 1,754,500 bytes, exact(key+value) = 1,530,799 bytes, ratio =  114.6%\n&gt; (23,713 .. 43,468): estimated = 1,300,750 bytes, exact(key+value) = 1,047,015 bytes, ratio =  124.2%\n&gt; (16,635 .. 46,506): estimated = 1,875,500 bytes, exact(key+value) = 1,583,163 bytes, ratio =  118.5%\n&gt; (14,862 .. 27,358): estimated =   695,750 bytes, exact(key+value) =   662,288 bytes, ratio =  105.1%\n&gt; ( 3,591 .. 46,984): estimated = 2,873,750 bytes, exact(key+value) = 2,299,829 bytes, ratio =  125.0%\n&gt; (29,154 .. 48,487): estimated = 1,421,750 bytes, exact(key+value) = 1,024,649 bytes, ratio =  138.8%\n&gt; (30,204 .. 44,135): estimated =   968,000 bytes, exact(key+value) =   738,343 bytes, ratio =  131.1%\n&gt; ( 3,783 .. 39,840): estimated = 2,268,750 bytes, exact(key+value) = 1,911,021 bytes, ratio =  118.7%\n&gt; (   702 .. 11,229): estimated =   635,250 bytes, exact(key+value) =   557,931 bytes, ratio =  113.9%\n&gt; (13,340 .. 40,101): estimated = 1,603,250 bytes, exact(key+value) = 1,418,333 bytes, ratio =  113.0%\n&gt; (19,672 .. 49,218): estimated = 1,905,750 bytes, exact(key+value) = 1,565,938 bytes, ratio =  121.7%\n&gt; ( 5,288 .. 29,462): estimated = 1,452,000 bytes, exact(key+value) = 1,281,222 bytes, ratio =  113.3%\n&gt; ( 4,348 .. 37,418): estimated = 2,026,750 bytes, exact(key+value) = 1,752,710 bytes, ratio =  115.6%\n&gt; (12,473 .. 35,017): estimated = 1,361,250 bytes, exact(key+value) = 1,194,832 bytes, ratio =  113.9%\n</code></pre>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 2,
        "updated_at": "2023-05-17T15:59:18.677Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 18,
        "readers_count": 17,
        "score": 3.6,
        "yours": false,
        "topic_id": 3969,
        "topic_slug": "issues-with-get-range-split-points-returning-chunks-of-very-uneven-size",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/issues-with-get-range-split-points-returning-chunks-of-very-uneven-size/3969/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      12853,
      12855
    ]
  },
  "timeline_lookup": [
    [
      1,
      888
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings",
    "performance"
  ],
  "tags_descriptions": {},
  "fancy_title": "Issues with get_range_split_points returning chunks of very uneven size",
  "id": 3969,
  "title": "Issues with get_range_split_points returning chunks of very uneven size",
  "posts_count": 2,
  "created_at": "2023-05-17T13:31:18.385Z",
  "views": 299,
  "reply_count": 0,
  "like_count": 0,
  "last_posted_at": "2023-05-17T15:59:18.677Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "issues-with-get-range-split-points-returning-chunks-of-very-uneven-size",
  "category_id": 7,
  "word_count": 3486,
  "deleted_at": null,
  "user_id": 53,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_3969",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 2,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 1,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Missing API for getting just the count of a key range?",
      "id": 444,
      "title": "Missing API for getting just the count of a key range?",
      "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
      "posts_count": 14,
      "reply_count": 9,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-21T09:23:36.938Z",
      "last_posted_at": "2018-09-10T16:25:03.060Z",
      "bumped": true,
      "bumped_at": "2018-09-10T16:25:03.060Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 3599,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Slicing a key range to work with analytical engines (e.g. Spark)",
      "id": 2231,
      "title": "Slicing a key range to work with analytical engines (e.g. Spark)",
      "slug": "slicing-a-key-range-to-work-with-analytical-engines-e-g-spark",
      "posts_count": 5,
      "reply_count": 3,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2020-07-07T03:50:38.512Z",
      "last_posted_at": "2020-07-07T17:22:47.565Z",
      "bumped": true,
      "bumped_at": "2020-07-07T17:22:47.565Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 643,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 782,
            "username": "omidb",
            "name": "Omid Bakhshandeh",
            "avatar_template": "/user_avatar/forums.foundationdb.org/omidb/{size}/925_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Recommended usage of get_range_split_points or GetRangeSplitPoints",
      "id": 2593,
      "title": "Recommended usage of get_range_split_points or GetRangeSplitPoints",
      "slug": "recommended-usage-of-get-range-split-points-or-getrangesplitpoints",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2021-03-02T06:16:20.015Z",
      "last_posted_at": "2023-02-14T03:52:41.531Z",
      "bumped": true,
      "bumped_at": "2023-02-14T03:52:41.531Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 750,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 405,
            "username": "harikb",
            "name": "Hari B",
            "avatar_template": "/user_avatar/forums.foundationdb.org/harikb/{size}/1033_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 1181,
            "username": "mdianjun",
            "name": "madianjun",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mdianjun/{size}/1456_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Keyspace partitions &amp; performance",
      "id": 168,
      "title": "Keyspace partitions & performance",
      "slug": "keyspace-partitions-performance",
      "posts_count": 9,
      "reply_count": 5,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-04-21T05:03:54.670Z",
      "last_posted_at": "2018-04-22T03:29:31.049Z",
      "bumped": true,
      "bumped_at": "2018-04-22T03:29:31.049Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 5,
      "views": 5892,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 113,
            "username": "pH14",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ph14/{size}/92_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 9,
            "username": "mbhaskar",
            "name": "Bhaskar Muppana",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Scanning a large range with Locality API hangs",
      "id": 2183,
      "title": "Scanning a large range with Locality API hangs",
      "slug": "scanning-a-large-range-with-locality-api-hangs",
      "posts_count": 13,
      "reply_count": 10,
      "highest_post_number": 13,
      "image_url": null,
      "created_at": "2020-06-15T13:08:44.375Z",
      "last_posted_at": "2020-08-12T17:02:10.244Z",
      "bumped": true,
      "bumped_at": "2020-08-12T17:02:10.244Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1961,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 799,
            "username": "SarthakGhosh16",
            "name": "Sarthak Ghosh16",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/ba9def/{size}.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 53,
      "username": "KrzysFR",
      "name": "Christophe Chevalier",
      "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
    },
    "last_poster": {
      "id": 53,
      "username": "KrzysFR",
      "name": "Christophe Chevalier",
      "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
    }
  },
  "bookmarks": []
}