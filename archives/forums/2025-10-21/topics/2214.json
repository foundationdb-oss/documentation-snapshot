{
  "post_stream": {
    "posts": [
      {
        "id": 7472,
        "name": "Daniel Smith",
        "username": "Daniel-B-Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "created_at": "2020-06-26T15:37:57.697Z",
        "cooked": "<p>Hi,</p>\n<p>I\u2019m wondering if there is currently any prefix compression in the format keys are returned from the storage server to the client? Assuming there is not, would there be interest in me adding such a feature? Perhaps behind a knob. For my use case, we have some large-ish queries (100s of MB) where on average something like 80% of the key is repeated in every single key returned.</p>\n<p>Thanks</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T15:37:57.697Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 336,
        "reads": 48,
        "readers_count": 47,
        "score": 1689.6,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "Daniel Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 679,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 7474,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-06-26T16:57:09.220Z",
        "cooked": "<p>There\u2019s no prefix compression in the serialized messages sent from storages to clients. There is an issue tracking this: <a href=\"https://github.com/apple/foundationdb/issues/2189\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/issues/2189</a>. I made an attempt at this once: here is my PR: <a href=\"https://github.com/apple/foundationdb/pull/3076\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/pull/3076</a>. It didn\u2019t seem to help. I think the overhead of computing common prefixes offset the gains of having smaller network messages, at least in that PR. I think computing the common prefixes could probably be done more efficiently, especially if you can push it down to the storage engine.</p>\n<p>I think what might be even better than prefix compression would be some kind of API where you can just remove common prefixes from the result entirely. For example, let\u2019s say you want to treat some subspace with a common prefix as its own little database. The client is going to ignore the prefix anyway, so why send those bytes over the network at all?</p>\n<p>I\u2019m imagining maybe a transaction option to set the prefix to be ignored. Then subsequent reads are done relative to that prefix.</p>\n<p>Something like</p>\n<pre><code class=\"lang-auto\">&gt;&gt;&gt; tr.options.set_common_key_prefix('/longCommonKeyForMySubspace/')\n&gt;&gt;&gt; list(tr[:])\n[('a',''), ('b',''), ('c','')]\n</code></pre>\n<p>If the actual data in the database were</p>\n<pre><code class=\"lang-auto\">/longCommonKeyForMySubspace/a -&gt; ''\n/longCommonKeyForMySubspace/b -&gt; ''\n/longCommonKeyForMySubspace/c -&gt; ''\n</code></pre>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T16:57:56.053Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 10,
        "reads": 46,
        "readers_count": 45,
        "score": 64.2,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/2189",
            "internal": false,
            "reflection": false,
            "title": "Prefix compress read range results \u00b7 Issue #2189 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 27
          },
          {
            "url": "https://github.com/apple/foundationdb/pull/3076",
            "internal": false,
            "reflection": false,
            "title": "Simple prefix compression for GetKeyValuesReply by atn34 \u00b7 Pull Request #3076 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 6
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7475,
        "name": "Daniel Smith",
        "username": "Daniel-B-Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "created_at": "2020-06-26T17:43:20.861Z",
        "cooked": "<p>Interesting. Ignoring the common prefix would work nearly as well for us and would indeed be a lot easier to implement and potentially push down all the way to the storage server. We\u2019re probably about a month away from being able to rigorously test this. How would I go about starting this? Should I create a GitHub issue first? Or get some proof this actually works before bringing it to the community.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T17:43:20.861Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 37,
        "readers_count": 36,
        "score": 7.4,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "Daniel Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 14,
          "username": "andrew.noyes",
          "name": "",
          "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 679,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7476,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-06-26T17:45:25.277Z",
        "cooked": "<p>This is something I\u2019ve wanted to do for a while.</p>\n<p><a class=\"mention\" href=\"/u/andrew.noyes\">@andrew.noyes</a> A full prefix check on every consecutive key pair of every set of keys costs too much CPU, but there are better ways.</p>\n<p>If a set of keys (or things containing keys) is sorted (and in most cases in FDB this is true), there is a very cheap way to get much of the benefit for very little send-side CPU.  You can compare the first key to the last key to get a common prefix to factor out, and the message format becomes roughly</p>\n<p><code>numItems | commonPrefixLen | commonPrefixBytes | [itemsWithKeySuffixes...]</code></p>\n<p>If the set is not sorted, then <code>CommonPrefixLen</code> is 0 by default, and on the decoding side that case can be shortcut to not do any concatenation to restore the keys when decompression is requested.</p>\n<p>If the creator of the set knows that although the set isn\u2019t sorted it does have a common prefix, then the common prefix could be initialized explicitly.</p>\n<p>For a sorted set, there is also a way to produce the full list of pair-wise prefix lengths by starting with the first-last common prefix and bisecting the set recursively, passing each enclosing set\u2019s common prefix as a starting point for prefix detection in its subsets.  Redwood essentially does this to generate its prefix compressed binary trees.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T17:45:25.277Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 35,
        "readers_count": 34,
        "score": 12.0,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7477,
        "name": "Daniel Smith",
        "username": "Daniel-B-Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "created_at": "2020-06-26T19:25:48.689Z",
        "cooked": "<p>I\u2019m not sure how much CPU benefit there would be, but we could save some memcopies inside the storage engine by not copying a prefix known in advance. That could be implemented by simply not copying the shared prefix between the range request begin and end keys. If adding an extra seek to the last key before copying all the keys were cheap enough, we could even do that.</p>\n<p>If we use <a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a>\u2019 compressed format, that is easily compatible for storage servers that do no prefix compression. We could pretty easily add a client-side API to only concatenate bytes after a known prefix to implement <a class=\"mention\" href=\"/u/andrew.noyes\">@andrew.noyes</a>\u2019 idea. For example, the data might be:</p>\n<pre><code class=\"lang-auto\">/longCommonKeyForMySubspace/aa -&gt; ''\n/longCommonKeyForMySubspace/ab -&gt; ''\n/longCommonKeyForMySubspace/ac -&gt; ''\n</code></pre>\n<p>The wire response would be <code>/longCommonKeyForMySubspace/a a b c</code>, and the client could request to ignore <code>/longCommonKeyForMySubspace/a a b c</code> so that the client receives <code>aa ab ac</code>.</p>\n<p><a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a> In what cases are keys not sorted in FDB?</p>\n<p>It seems like adapting <a class=\"mention\" href=\"/u/andrew.noyes\">@andrew.noyes</a>\u2019 PR to find the common prefix by checking first/last for sorted keys. I won\u2019t be able to get to that in the next couple of weeks, but I should be able to take a stab at it in the nearish future.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T19:25:48.689Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 32,
        "readers_count": 31,
        "score": 21.4,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "Daniel Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 679,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7478,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-06-26T19:45:00.539Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"Daniel-B-Smith\" data-post=\"5\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/daniel-b-smith/48/743_2.png\" class=\"avatar\"> Daniel-B-Smith:</div>\n<blockquote>\n<p>If adding an extra seek to the last key before copying all the keys were cheap enough, we could even do that.</p>\n</blockquote>\n</aside>\n<p>It\u2019s a little more complicated than that since usually (due to internally imposed byte limits), you can\u2019t know the end of your range without basically iterating from the beginning until you hit the byte limit.</p>\n<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"4\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>If a set of keys (or things containing keys) is sorted (and in most cases in FDB this is true), there is a very cheap way to get much of the benefit for very little send-side CPU. You can compare the first key to the last key to get a common prefix to factor out</p>\n</blockquote>\n</aside>\n<p>I like this idea</p>\n<aside class=\"quote no-group\" data-username=\"Daniel-B-Smith\" data-post=\"5\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/daniel-b-smith/48/743_2.png\" class=\"avatar\"> Daniel-B-Smith:</div>\n<blockquote>\n<p>It seems like adapting <a class=\"mention\" href=\"/u/andrew.noyes\">@andrew.noyes</a>\u2019 PR to find the common prefix by checking first/last for sorted keys.</p>\n</blockquote>\n</aside>\n<p>There\u2019s an existing concept of a \u201cVectorRefPreserializer\u201d, which tries to keep track of the serialized size of a VectorRef incrementally so that we don\u2019t need to iterate over the vector when serializing to figure out how much memory to allocate. I think we can remove this concept entirely when trying to implement <a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a> idea, since it won\u2019t really apply anymore, and was specifically introduced to try to help GetKeyValuesReply messages. I don\u2019t think we even hit the fast path anyway due to some use of non-const methods.</p>\n<p>I think we could instead try using serializing/deserializing hooks in GetKeyValuesReply::serialize in the style of the new MutationRef implementation: <a href=\"https://github.com/apple/foundationdb/blob/2efbe7443b8e984abcfd4642c9b84776d35aebb6/fdbclient/CommitTransaction.h#L109\" rel=\"noopener nofollow ugc\">https://github.com/apple/foundationdb/blob/2efbe7443b8e984abcfd4642c9b84776d35aebb6/fdbclient/CommitTransaction.h#L109</a>. This would be a protocol change so it\u2019d need to go into the master branch.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T19:45:00.539Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 2,
        "incoming_link_count": 2,
        "reads": 30,
        "readers_count": 29,
        "score": 21.0,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/2efbe7443b8e984abcfd4642c9b84776d35aebb6/fdbclient/CommitTransaction.h#L109",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/CommitTransaction.h at 2efbe7443b8e984abcfd4642c9b84776d35aebb6 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7479,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-06-26T19:53:35.163Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"Daniel-B-Smith\" data-post=\"5\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/daniel-b-smith/48/743_2.png\" class=\"avatar\"> Daniel-B-Smith:</div>\n<blockquote>\n<p>I\u2019m not sure how much CPU benefit there would be, but we could save some memcopies inside the storage engine by not copying a prefix known in advance. That could be implemented by simply not copying the shared prefix between the range request begin and end keys</p>\n</blockquote>\n</aside>\n<p>This would be an example of where the creator of the set of things knows there is a common prefix to all of them and can just initialize it directly.  The return data type for range read needs to be something that supports this, not just a vector of key value refs.</p>\n<aside class=\"quote no-group\" data-username=\"Daniel-B-Smith\" data-post=\"5\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/daniel-b-smith/48/743_2.png\" class=\"avatar\"> Daniel-B-Smith:</div>\n<blockquote>\n<p>If adding an extra seek to the last key before copying all the keys were cheap enough, we could even do that.</p>\n</blockquote>\n</aside>\n<p>Due to item count and response size limits, you can\u2019t seek directly to the last key that would be returned in most cases.</p>\n<aside class=\"quote no-group\" data-username=\"Daniel-B-Smith\" data-post=\"5\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/daniel-b-smith/48/743_2.png\" class=\"avatar\"> Daniel-B-Smith:</div>\n<blockquote>\n<p>The wire response would be <code>/longCommonKeyForMySubspace/a a b c</code> , and the client could request to ignore <code>/longCommonKeyForMySubspace/a a b c</code> so that the client receives <code>aa ab ac</code> .</p>\n</blockquote>\n</aside>\n<p>I like this, and I would also be OK with going a bit further to say that the wire protocol for RangeRead should explicitly exclude prefix bytes common to the begin and end of the range.</p>\n<aside class=\"quote no-group\" data-username=\"Daniel-B-Smith\" data-post=\"5\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/daniel-b-smith/48/743_2.png\" class=\"avatar\"> Daniel-B-Smith:</div>\n<blockquote>\n<p><a class=\"mention\" href=\"/u/steavedhams\">@SteavedHams</a> In what cases are keys not sorted in FDB?</p>\n</blockquote>\n</aside>\n<p>I\u2019m not actually sure.  Currently I don\u2019t think any interfaces require sorted input, I just suspect that as a side effect of the source data structures most things arrive sorted.  On the resolvers, if the key sets for each transaction ID are sent as separate objects then likely within each set the keys are sorted if they were sent in sorted order by the client, but otherwise they likely are not sorted.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T19:53:35.163Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 1,
        "incoming_link_count": 3,
        "reads": 30,
        "readers_count": 29,
        "score": 21.0,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7480,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-06-26T22:46:12.742Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"6\" data-topic=\"2214\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>I think we could instead try using serializing/deserializing hooks in GetKeyValuesReply::serialize in the style of the new MutationRef implementation: <a href=\"https://github.com/apple/foundationdb/blob/2efbe7443b8e984abcfd4642c9b84776d35aebb6/fdbclient/CommitTransaction.h#L109\" rel=\"noopener nofollow ugc\">https://github.com/apple/foundationdb/blob/2efbe7443b8e984abcfd4642c9b84776d35aebb6/fdbclient/CommitTransaction.h#L109 </a></p>\n</blockquote>\n</aside>\n<p>Actually this approach uses more copies than necessary. I think specializing <code>dynamic_size_traits</code> for a special type that\u2019s just like VectorRef but guaranteed to be sorted is better.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-26T22:46:12.742Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 1,
        "incoming_link_count": 3,
        "reads": 28,
        "readers_count": 27,
        "score": 25.6,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7482,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-06-29T16:43:52.628Z",
        "cooked": "<p>Here\u2019s a draft implementation: <a href=\"https://github.com/apple/foundationdb/pull/3429/files\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/pull/3429/files</a></p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2020-06-29T16:43:52.628Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 22,
        "readers_count": 21,
        "score": 24.4,
        "yours": false,
        "topic_id": 2214,
        "topic_slug": "prefix-compression-in-client-api",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/3429/files",
            "internal": false,
            "reflection": false,
            "clicks": 29
          }
        ],
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 14,
          "username": "andrew.noyes",
          "name": "",
          "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/prefix-compression-in-client-api/2214/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      7472,
      7474,
      7475,
      7476,
      7477,
      7478,
      7479,
      7480,
      7482
    ]
  },
  "timeline_lookup": [
    [
      1,
      1943
    ],
    [
      9,
      1940
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "performance"
  ],
  "tags_descriptions": {},
  "fancy_title": "Prefix compression in client API",
  "id": 2214,
  "title": "Prefix compression in client API",
  "posts_count": 9,
  "created_at": "2020-06-26T15:37:57.621Z",
  "views": 1261,
  "reply_count": 4,
  "like_count": 1,
  "last_posted_at": "2020-06-29T16:43:52.628Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "prefix-compression-in-client-api",
  "category_id": 5,
  "word_count": 1518,
  "deleted_at": null,
  "user_id": 679,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2214",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 9,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "How does FoundationDB store keys with duplicate prefixes?",
      "id": 1234,
      "title": "How does FoundationDB store keys with duplicate prefixes?",
      "slug": "how-does-foundationdb-store-keys-with-duplicate-prefixes",
      "posts_count": 4,
      "reply_count": 1,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2019-03-16T03:26:49.825Z",
      "last_posted_at": "2019-03-17T06:11:23.374Z",
      "bumped": true,
      "bumped_at": "2019-03-17T06:11:23.374Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1091,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 542,
            "username": "jonahwest",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/90db22/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 308,
            "username": "ananthakumaran",
            "name": "Anantha Kumaran",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Adding new APIs to specify keys as a list of chunks, allowing &ldquo;zero-copy&rdquo; serialization",
      "id": 859,
      "title": "Adding new APIs to specify keys as a list of chunks, allowing \"zero-copy\" serialization",
      "slug": "adding-new-apis-to-specify-keys-as-a-list-of-chunks-allowing-zero-copy-serialization",
      "posts_count": 4,
      "reply_count": 1,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2018-11-10T14:52:35.322Z",
      "last_posted_at": "2018-11-12T19:21:50.438Z",
      "bumped": true,
      "bumped_at": "2018-11-12T19:21:50.438Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 812,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "C API: How to get keys with matching prefix?",
      "id": 1448,
      "title": "C API: How to get keys with matching prefix?",
      "slug": "c-api-how-to-get-keys-with-matching-prefix",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2019-06-13T04:06:51.508Z",
      "last_posted_at": "2019-06-13T15:52:02.221Z",
      "bumped": true,
      "bumped_at": "2019-06-13T15:52:02.221Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1024,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 542,
            "username": "jonahwest",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/90db22/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Should I optimize for single reads?",
      "id": 1155,
      "title": "Should I optimize for single reads?",
      "slug": "should-i-optimize-for-single-reads",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-02-19T20:01:01.620Z",
      "last_posted_at": "2019-02-19T21:08:37.414Z",
      "bumped": true,
      "bumped_at": "2019-02-19T21:08:37.414Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 451,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 517,
            "username": "janderland",
            "name": "Jon Anderson",
            "avatar_template": "/user_avatar/forums.foundationdb.org/janderland/{size}/517_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Missing API for getting just the count of a key range?",
      "id": 444,
      "title": "Missing API for getting just the count of a key range?",
      "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
      "posts_count": 14,
      "reply_count": 9,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-21T09:23:36.938Z",
      "last_posted_at": "2018-09-10T16:25:03.060Z",
      "bumped": true,
      "bumped_at": "2018-09-10T16:25:03.060Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 3599,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 14,
        "username": "andrew.noyes",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 679,
        "username": "Daniel-B-Smith",
        "name": "Daniel Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 7,
        "username": "SteavedHams",
        "name": "Steve Atherton",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 679,
      "username": "Daniel-B-Smith",
      "name": "Daniel Smith",
      "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png"
    },
    "last_poster": {
      "id": 14,
      "username": "andrew.noyes",
      "name": "",
      "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/pull/3429/files",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 29,
        "user_id": 14,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/issues/2189",
        "title": "Prefix compress read range results \u00b7 Issue #2189 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 27,
        "user_id": 14,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/3076",
        "title": "Simple prefix compression for GetKeyValuesReply by atn34 \u00b7 Pull Request #3076 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 14,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/2efbe7443b8e984abcfd4642c9b84776d35aebb6/fdbclient/CommitTransaction.h#L109",
        "title": "foundationdb/CommitTransaction.h at 2efbe7443b8e984abcfd4642c9b84776d35aebb6 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 14,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}