{
  "post_stream": {
    "posts": [
      {
        "id": 623,
        "name": "Kurtis Nusbaum",
        "username": "klnusbaum",
        "avatar_template": "/user_avatar/forums.foundationdb.org/klnusbaum/{size}/149_2.png",
        "created_at": "2018-04-26T14:05:31.719Z",
        "cooked": "<p>A few years ago I was using the tornado framework with python. It was really similar to Flow in that it tried to provide high performance on a single thread via asynchronous operations.</p>\n<p>The problem with tornado is that it used an event loop to simulate concurrency. Functions could \u201cyield\u201d to the event loop when ever they we\u2019re about to do something like I/O, which was akin to saying \u201cok, peempt me now and then come back to this spot in the function when the long running I/O is done. But in the mean time let someone else run their code while I\u2019m waiting\u201d.</p>\n<p>The problem with this was always \u201cwhat happens if I forget to yield\u201d? Say I start doing some CPU intensive calculation and it takes me half a second to finish this calculation. During that time, I\u2019ve grabbed the single thread of execution and no one else can make any progress.</p>\n<p>I\u2019m not sure if Flow uses an event loop model, but it must have to deal with this problem of long running tasks hogging the single thread of execution. Does Flow have some sort of task/green thread preemption built into it?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-26T14:05:31.719Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 133,
        "reads": 67,
        "readers_count": 66,
        "score": 668.4,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "Kurtis Nusbaum",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 189,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 625,
        "name": "Ian Peters",
        "username": "itp",
        "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
        "created_at": "2018-04-26T16:14:31.817Z",
        "cooked": "<p>(Disclaimer: it\u2019s been over three years since I worked on FoundationDB, and obviously some things have changed! Hopefully someone will correct me where I am either wrong or out of date.)</p>\n<p>Your intuition that Flow also uses an event loop model is correct, as is the sense that blocking the single thread of execution(*) would be bad.</p>\n<p>Every actor implicitly yields execution whenever it is waiting for a future value to be ready. Because all I/O should be performed through the <code>IAsyncFile</code> interface, which is fully asynchronous and returns futures, long-running I/O shouldn\u2019t be an issue. The mechanism for obtaining an instance of an async file appears to have changed since I was last here; it looks like <code>IAsyncFileSystem::filesystem()-&gt;open()</code> will get you started.</p>\n<p>But that won\u2019t save you from CPU intensive calculations! For this purpose, you will see calls sprinkled throughout the codebase that look like <code>Void _ = wait(yield());</code> or <code>Void _ = wait(yield(somePriority));</code>. This introduces an explicit yield in the case that there are other (or other higher priority) tasks waiting to run.</p>\n<p>The main loop is (or was, last time I checked!) in <code>flow/Net2.actor.cpp</code> in <code>Net2::run()</code>. There you will see trace events that will log when there are long delays in the event loop, from which you can determine where you may need to introduce explicit yields in long-running operations so as to keep things humming along.</p>\n<p>(*) Single thread of execution isn\u2019t quite strictly true; I recall at least that log flushing happened on its own thread. And the event loop isn\u2019t the only form of (pseudo)concurrency, as the storage engine also uses coroutines to keep disk queues full.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-26T16:14:31.817Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 64,
        "readers_count": 63,
        "score": 87.8,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "Ian Peters",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 4
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 190,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 626,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-04-26T17:39:35.565Z",
        "cooked": "<p>Besides the ability to yield and explicit prioritization that Ian mentions, the database is designed as far as possible to not have large tasks to do (especially at high priorities).  For example, if you are reading a long range of data from the client the actual requests sent to the server are more or less of the form \u201cplease give me another 100KB of data starting from here\u201d, trading some single-client performance to avoid various possible head-of-line blocking performance problems.  It\u2019s also largely designed with data structures and algorithms with bounded worst case performance (rather than merely amortized performance) in order to keep latencies low.  For example, if you quickly delete every value in a range and then read the now-empty range over and over (while those deletes are still in the MVCC window) we go to a lot of trouble to ensure that those reads are still fast.</p>\n<p>But nevertheless, this is a type of performance problem that we can have, and there\u2019s monitoring and debugging infrastructure to detect and fix these problems.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-26T17:39:35.565Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 58,
        "readers_count": 57,
        "score": 41.6,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 190,
          "username": "itp",
          "name": "Ian Peters",
          "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 633,
        "name": "Evan Tschannen",
        "username": "Evan",
        "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
        "created_at": "2018-04-26T20:04:19.582Z",
        "cooked": "<p>In terms of monitoring, we log a \u201cSlowTask\u201d trace event for CPU intensive tasks that take more than around 250ms.</p>\n<p>We also periodically log \u201cNet2SlowTaskTrace\u201d trace events during a slow task that contain backtraces which help us determine what code is blocking the run loop.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-26T20:04:19.582Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 55,
        "readers_count": 54,
        "score": 46.0,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "Evan Tschannen",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": true,
        "admin": false,
        "staff": true,
        "user_id": 54,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 636,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-04-26T20:24:23.894Z",
        "cooked": "<p>We actually log SlowTask events for much shorter events than that, though at a certain threshold we start sampling the events. If the slow task profiler is on (which produces Net2SlowTaskTrace events), this threshold is at most 125ms.</p>\n<p>Besides the 125ms one, the thresholds for these aren\u2019t a fixed duration of time, but are based on the number of clock cycles that have elapsed. It looks like we currently start logging sampled events at 1,000,000 cycles. We start logging all events at 125ms if the slow task profiler is on, and otherwise we do so at 500,000,000 cycles. At 500,000,000 cycles, we also log the event at a higher severity (SevWarnAlways=30). See:</p>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/foundationdb/blob/cadb4692e27e63286e99f2946ca78b80f5bb0203/flow/Net2.actor.cpp#L719\" target=\"_blank\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/foundationdb/blob/cadb4692e27e63286e99f2946ca78b80f5bb0203/flow/Net2.actor.cpp#L719\" target=\"_blank\">apple/foundationdb/blob/cadb4692e27e63286e99f2946ca78b80f5bb0203/flow/Net2.actor.cpp#L719</a></h4>\n<pre class=\"onebox\"><code class=\"lang-cpp\"><ol class=\"start lines\" start=\"709\" style=\"counter-reset: li-counter 708 ;\">\n<li>void Net2::processThreadReady() {</li>\n<li>\twhile (true) {</li>\n<li>\t\tOptional&lt;OrderedTask&gt; t = threadReady.pop();</li>\n<li>\t\tif (!t.present()) break;</li>\n<li>\t\tt.get().priority -= ++tasksIssued;</li>\n<li>\t\tASSERT( t.get().task != 0 );</li>\n<li>\t\tready.push( t.get() );</li>\n<li>\t}</li>\n<li>}</li>\n<li>\n</li>\n<li class=\"selected\">void Net2::checkForSlowTask(int64_t tscBegin, int64_t tscEnd, double duration, int64_t priority) {</li>\n<li>\tint64_t elapsed = tscEnd-tscBegin;</li>\n<li>\tif (elapsed &gt; FLOW_KNOBS-&gt;TSC_YIELD_TIME &amp;&amp; tscBegin &gt; 0) {</li>\n<li>\t\tint i = std::min&lt;double&gt;(NetworkMetrics::SLOW_EVENT_BINS-1, log( elapsed/1e6 ) / log(2.));</li>\n<li>\t\tint s = ++networkMetrics.countSlowEvents[i];</li>\n<li>\t\tuint64_t warnThreshold = g_network-&gt;isSimulated() ? 10e9 : 500e6;</li>\n<li>\n</li>\n<li>\t\t//printf(\"SlowTask: %d, %d yields\\n\", (int)(elapsed/1e6), numYields);</li>\n<li>\n</li>\n<li>\t\tslowTaskMetric-&gt;clocks = elapsed;</li>\n<li>\t\tslowTaskMetric-&gt;duration = (int64_t)(duration*1e9);</li>\n</ol></code></pre>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-26T20:24:23.894Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 53,
        "readers_count": 52,
        "score": 35.6,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/cadb4692e27e63286e99f2946ca78b80f5bb0203/flow/Net2.actor.cpp#L719",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/Net2.actor.cpp at cadb4692e27e63286e99f2946ca78b80f5bb0203 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 54,
          "username": "Evan",
          "name": "Evan Tschannen",
          "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 702,
        "name": "Mark Papadakis",
        "username": "markpapadakis",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markpapadakis/{size}/159_2.png",
        "created_at": "2018-04-29T07:35:11.987Z",
        "cooked": "<p>I am not affiliated with FoundationDB; I am studying the codebase though, and I have been interested in concurrency/non-blocking designs for some time now (mostly using coroutines/fibers, and future/promises continuations), and I really like what the FoundationDB folks have accomplished.</p>\n<p>Specifically for fair-scheduling, you need a way to essentially support cooperative multitasking semantics, via some scheduler, or by introducing yield-points where it makes sense, where you yield to another ready/runnable task depending on priority semantics(that should take into account the time the task has been waiting for its turn \u2013 see the various LK scheduler algorithms, for example). To accomplish that though, you either need to only be able to yield at predefined/specific code paths, otherwise you 'd need coroutines, each with its own stack, where you can save/restore registers (including stack pointer, EIP, etc), which means you can yield from anywhere as opposed to only where you have a continuation that can be used for that purpose. In other words, if you have a loop with N iterations, and you want to interface with some scheduler to determine if you need to yield to another ready task anywhere within that loop code-block, it won\u2019t work without \u201creal\u201d coroutines, unless you otherwise \u201cabuse\u201d the continuations facilities, so to speak.</p>\n<p>There are trade-offs with every choice we make of course. Coroutines require their own stack (well, there are stackless coroutines but those are different constructs with all kinds of limitations), and context-switching (which against involves storing and restoring CPU registers) is far, far more expensive than an indirect call (which is what FDB does).</p>\n<p>I think the FDB design is brilliant and I am looking forward to spending more time studying the codebase <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-29T07:35:11.987Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 45,
        "readers_count": 44,
        "score": 29.0,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "Mark Papadakis",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 202,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 708,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-04-29T13:56:15.683Z",
        "cooked": "<p>Relative to implementations of async/await in other languages, a very nice feature of flow is automatic cancellation when the future returned by an actor is discarded. This is easy for us to do because C++, not being garbage collected, runs destructors in a predictable way. When an actor is cancelled, the wait statement it is executing throws an exception and the call stack of the actor unwinds, destroying and canceling futures it is holding in turn. So the common case of recursively canceling a \u201ccall tree\u201d of actors, and indeed many other cases, work effortlessly and correctly. There is so little code dealing explicitly with cancellation that you could miss that it is a feature!</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-04-29T13:56:15.683Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 44,
        "readers_count": 43,
        "score": 98.8,
        "yours": false,
        "topic_id": 282,
        "topic_slug": "how-does-flow-handle-long-operations",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 6
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-flow-handle-long-operations/282/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      623,
      625,
      626,
      633,
      636,
      702,
      708
    ]
  },
  "timeline_lookup": [
    [
      1,
      2735
    ],
    [
      6,
      2733
    ],
    [
      7,
      2732
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "How does Flow handle long operations?",
  "id": 282,
  "title": "How does Flow handle long operations?",
  "posts_count": 7,
  "created_at": "2018-04-26T14:05:31.598Z",
  "views": 1264,
  "reply_count": 2,
  "like_count": 16,
  "last_posted_at": "2018-04-29T13:56:15.683Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "how-does-flow-handle-long-operations",
  "category_id": 8,
  "word_count": 1259,
  "deleted_at": null,
  "user_id": 189,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_282",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 6,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Why was Flow developed?",
      "id": 1711,
      "title": "Why was Flow developed?",
      "slug": "why-was-flow-developed",
      "posts_count": 6,
      "reply_count": 3,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2019-11-01T19:26:13.831Z",
      "last_posted_at": "2019-11-03T17:53:49.300Z",
      "bumped": true,
      "bumped_at": "2019-11-03T17:53:49.300Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 12,
      "views": 3689,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 517,
            "username": "janderland",
            "name": "Jon Anderson",
            "avatar_template": "/user_avatar/forums.foundationdb.org/janderland/{size}/517_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 454,
            "username": "jzhou",
            "name": "Jingyu Zhou",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
            "admin": true,
            "moderator": true,
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Java: concurrency questions",
      "id": 1571,
      "title": "Java: concurrency questions",
      "slug": "java-concurrency-questions",
      "posts_count": 7,
      "reply_count": 5,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-08-07T19:22:14.348Z",
      "last_posted_at": "2020-06-18T15:02:27.357Z",
      "bumped": true,
      "bumped_at": "2020-06-18T15:02:27.357Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1793,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 307,
            "username": "jwr",
            "name": "Jan Rychter",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Flow is tied to the fdbclient",
      "id": 842,
      "title": "Flow is tied to the fdbclient",
      "slug": "flow-is-tied-to-the-fdbclient",
      "posts_count": 6,
      "reply_count": 3,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2018-11-04T18:05:35.724Z",
      "last_posted_at": "2018-11-06T14:43:01.769Z",
      "bumped": true,
      "bumped_at": "2018-11-06T14:43:01.769Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 1097,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 416,
            "username": "zzj1213",
            "name": "John",
            "avatar_template": "/user_avatar/forums.foundationdb.org/zzj1213/{size}/402_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 55,
            "username": "bowlofstew",
            "name": "Stewart Henderson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/b/aca169/{size}.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "[Java] FoundationDB client thread related question",
      "id": 599,
      "title": "[Java] FoundationDB client thread related question",
      "slug": "java-foundationdb-client-thread-related-question",
      "posts_count": 3,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-07-29T10:57:29.288Z",
      "last_posted_at": "2018-08-08T16:45:45.782Z",
      "bumped": true,
      "bumped_at": "2018-08-08T16:45:45.782Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 9111,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 38,
            "username": "panghy",
            "name": "Clement Pang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Throughput of a Queue/Set like data structure",
      "id": 205,
      "title": "Throughput of a Queue/Set like data structure",
      "slug": "throughput-of-a-queue-set-like-data-structure",
      "posts_count": 8,
      "reply_count": 2,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2018-04-22T17:16:09.148Z",
      "last_posted_at": "2018-04-22T19:42:40.040Z",
      "bumped": true,
      "bumped_at": "2018-04-22T19:42:40.040Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1829,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 142,
            "username": "biturbo",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/b/43a26b/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 54,
        "username": "Evan",
        "name": "Evan Tschannen",
        "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "moderator": true,
        "trust_level": 1
      },
      {
        "id": 189,
        "username": "klnusbaum",
        "name": "Kurtis Nusbaum",
        "avatar_template": "/user_avatar/forums.foundationdb.org/klnusbaum/{size}/149_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      },
      {
        "id": 190,
        "username": "itp",
        "name": "Ian Peters",
        "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 202,
        "username": "markpapadakis",
        "name": "Mark Papadakis",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markpapadakis/{size}/159_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      }
    ],
    "created_by": {
      "id": 189,
      "username": "klnusbaum",
      "name": "Kurtis Nusbaum",
      "avatar_template": "/user_avatar/forums.foundationdb.org/klnusbaum/{size}/149_2.png"
    },
    "last_poster": {
      "id": 22,
      "username": "dave",
      "name": "David Scherer",
      "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/blob/cadb4692e27e63286e99f2946ca78b80f5bb0203/flow/Net2.actor.cpp#L719",
        "title": "foundationdb/Net2.actor.cpp at cadb4692e27e63286e99f2946ca78b80f5bb0203 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 12,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}