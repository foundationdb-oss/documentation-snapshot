{
  "post_stream": {
    "posts": [
      {
        "id": 3141,
        "name": "gaurav",
        "username": "gaurav",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
        "created_at": "2019-01-26T13:26:56.766Z",
        "cooked": "<p>Hi,</p>\n<p>I have a scenario where I have a range of keys <code>k1, k2, ... kn</code>, and a transaction selects a key from this range arbitrarily (say <code>kx</code>), reads the value of <code>kx</code>, and then write some value back at <code>kx</code>.</p>\n<p>There is an additional constraint - that only one transaction could be modifying this entire range at a given time (i.e. concurrent modifications in this range, even if on different keys, are disallowed). To achieve this, each of the above transactions could either add an explicit <code>ReadConflcit</code>, or a <code>WriteConflict</code> on the entire range of keys (<code>k*</code>).</p>\n<p>Should I prefer using explicit <code>ReadConflcits</code> or <code>WriteConflict</code> for achieving the above \u201clocking\u201d semantics? Are there any performance, correctness, or any other kinds of considerations when choosing between the two, for above kind of situations (where each <code>tr</code> is doing a Read as well as a Write on a key, and we want to <code>lock</code> an entire key range)?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-01-26T13:29:41.912Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 303,
        "reads": 62,
        "readers_count": 61,
        "score": 1527.4,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "gaurav",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 166,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 3144,
        "name": "Anantha Kumaran",
        "username": "ananthakumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "created_at": "2019-01-26T15:27:22.961Z",
        "cooked": "<p>Somebody else could correct me if my reasoning is wrong.</p>\n<p>Serializable isolation roughly means there is a global order across all transactions. The database is at state x, Let\u2019s say there are 3 transactions A, B, C that happen concurrently and the database allows all of them to commit, it basically means there is at least one order and if you apply transactions one by one in that order, you will get the new database state y.</p>\n<ol>\n<li>if all of them read/write different set of keys, then the database can order them in anyway and the final state would be same.</li>\n</ol>\n<p>assume key k1 is 1</p>\n<ol start=\"2\">\n<li>let\u2019s say A reads key k1 and sets it to 2 and B reads key k2 and sets it to 3. Now, there is no way we can allow both of the transactions, because once we apply A the value of k1 will be changed, we can no longer allow B (because k1 value is no longer 1, which invalidates one of the reads done by B) and vice versa</li>\n</ol>\n<p>assume key k1 is 1</p>\n<ol start=\"3\">\n<li>let\u2019s say A writes k1 as 2 and B writes k1 as 3. Database is still free to allow both of them. it can either select AB or BA as order.</li>\n</ol>\n<p>To answer your question,</p>\n<p>setting only write conflict will cause the issue I have outlined in 3</p>\n<p>you have to set read conflict on the whole range.</p>\n<p>as for write conflict,</p>\n<ol>\n<li>\n<p>you can set it on single key you modify (this is done by default, so no need to do it explicitly), this will still allow concurrent reads on the range (except the single key you modify), concurrent writes are not allowed for any key in the range</p>\n</li>\n<li>\n<p>you can set it on the whole range, this will not allow any concurrent reads or writes on the range</p>\n</li>\n</ol>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-01-26T16:04:08.670Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 61,
        "readers_count": 60,
        "score": 32.2,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "Anantha Kumaran",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 3,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 308,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3145,
        "name": "gaurav",
        "username": "gaurav",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
        "created_at": "2019-01-26T15:51:27.278Z",
        "cooked": "<p>Hi <a class=\"mention\" href=\"/u/ananthakumaran\">@ananthakumaran</a>, thanks for your post.</p>\n<p>If you consider the scenario I described, I need to lock the entire \u201ckey range\u201d, and not just the specific key (and under the specific scenario where the transaction is doing both a read and a write on a key from that range). Under that requirement, I believe, that both the options I described will lead to desired results in a consistent manner (no anomalies).</p>\n<p>I am looking for opinions on whether there should be a preference given to one of the two options (Read/Write Conflict Ranges), or are they equivalent in all aspects?</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-01-26T15:51:27.278Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 57,
        "readers_count": 56,
        "score": 26.4,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "gaurav",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 308,
          "username": "ananthakumaran",
          "name": "Anantha Kumaran",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 166,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3146,
        "name": "Jay Kominek",
        "username": "jkominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "created_at": "2019-01-26T22:46:08.606Z",
        "cooked": "<blockquote>\n<p>I have a scenario where I have a range of keys k1, k2, \u2026 kn, and a transaction selects a key from this range arbitrarily (say kx), reads the value of kx, and then write some value back at kx.</p>\n</blockquote>\n<p>You might want to elaborate a bit more on what else you\u2019re doing.</p>\n<p>It isn\u2019t clear that having a range-wide conflict (of any kind!) will affect the semantics of the system. If you\u2019re just reading kx, running some <a href=\"https://en.wikipedia.org/wiki/Pure_function\" rel=\"noopener nofollow ugc\">pure function</a> on it, and writing the result back to the database, then there would be no way to ever tell what order you processed the keys in. You could turn off all conflicts.</p>\n<p>If there are any other processes active in this key range, then what they want to do will have an impact on what conflict you\u2019d want to use. If this key range is heavily read, then you would want to avoid unnecessary write conflicts.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-01-26T22:46:08.606Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 55,
        "readers_count": 54,
        "score": 16.0,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "Jay Kominek",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://en.wikipedia.org/wiki/Pure_function",
            "internal": false,
            "reflection": false,
            "title": "Pure function - Wikipedia",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 173,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3149,
        "name": "gaurav",
        "username": "gaurav",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
        "created_at": "2019-01-27T03:10:00.915Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jkominek\" data-post=\"4\" data-topic=\"1070\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jkominek/48/140_2.png\" class=\"avatar\"> jkominek:</div>\n<blockquote>\n<p>It isn\u2019t clear that having a range-wide conflict (of any kind!) will affect the semantics of the system. If you\u2019re just reading kx, running some <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a> on it, and writing the result back to the database, then there would be no way to ever tell what order you processed the keys in. You could turn off all conflicts.</p>\n</blockquote>\n</aside>\n<p>I tried to keep the application details abstract, to not get distracted by it; here are more details that should clarify the scenario:</p>\n<p>There are two types of transactions on this range (a) <em>Update Transactions</em> : that &lt;read, modify, write&gt; a set of keys in each tr; and (b) <em>Read Only Transactions</em>: that only perform read operations on one more more keys from this range.</p>\n<p>Additionally, there are some range-wide invariants that need to be maintained by each <em>Update Transactions</em>. So, I am fine to give up concurrency when updating any key in this range (<em>there could be smarter ways to lock only a smaller subrange of this entire range, but at the moment we could assume that to be an independent optimization</em>).</p>\n<p>However, I do not want to block the <em>Read Only Transactions</em> (<em>of type (b)</em>). These should read a consistent view of the database.</p>\n<aside class=\"quote no-group\" data-username=\"jkominek\" data-post=\"4\" data-topic=\"1070\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jkominek/48/140_2.png\" class=\"avatar\"> jkominek:</div>\n<blockquote>\n<p>If there are any other processes active in this key range, then what they want to do will have an impact on what conflict you\u2019d want to use. If this key range is heavily read, then you would want to avoid unnecessary write conflicts.</p>\n</blockquote>\n</aside>\n<p>I too earlier considered this to be a potential factor - namely <em>WriteConflicts conflicting other read-only operations</em>. But, <code>Read-only Transactions</code> do not perform conflict-checks at commit time (or rather, commit() is a no-op for them, unless one adds explicit conflictranges to them), and hence will not be conflicted by <code>WriteConflicts</code> added by <code>Update Transactions</code></p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-01-27T06:43:28.969Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 7,
        "reads": 53,
        "readers_count": 52,
        "score": 50.6,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "gaurav",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 5,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 166,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3151,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2019-01-27T19:00:31.520Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"gaurav\" data-post=\"3\" data-topic=\"1070\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/g/b487fb/48.png\" class=\"avatar\"> gaurav:</div>\n<blockquote>\n<p>I am looking for opinions on whether there should be a preference given to one of the two options (Read/Write Conflict Ranges), or are they equivalent in all aspects?</p>\n</blockquote>\n</aside>\n<p>From a performance point of view, they are\u2026roughly equivalent. The way they are implemented, adding a read conflict range or write conflict range to a transaction first just serializes the endpoints of the ranges and includes them in the commit message. This is sent to the resolver (through a proxy), and each read conflict range is checked against the write history, then (if the transaction doesn\u2019t have any conflicting ranges) each write conflict range is added to the resolver\u2019s in-memory history of cluster writes. So the low-level details are <em>slightly</em> different\u2026but not much.</p>\n<p>I think the bigger concern would be what effect this will have on other operations. If one uses a write conflict range, then that means that all outstanding read-write transactions that read a key in the range will be failed even if the actual key they read didn\u2019t change. This may or may not be a problem depending on your application\u2019s write patterns. But if you used a read conflict range, then it means that the operation this transaction is performing is more likely to fail.</p>\n<p>Thinking it over, I think I would go with a read conflict range for the whole range and write conflicts only for the keys that are actually being modified. For this specific read/write pattern (where <em>every</em> modifier  homogeneously adds the appropriate conflict ranges), I don\u2019t think it matters from either a correctness or performance point of view, but I think using a read conflict range is more natural for the following reasons. Your read conflict set should, in some sense, be the set of things whose values you need to be kept constant between transaction start time and commit time for your invariants to hold. The write conflict set is then the set of things whose values are updated as a result of the current values in the read conflict set. Hearing about this model, it seems like the things that need to be constant are the values in the range, and the things that are updated are the key within the range and the other keys that are updated as part of keeping the invariants constant.</p>\n<aside class=\"quote no-group\" data-username=\"gaurav\" data-post=\"5\" data-topic=\"1070\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/g/b487fb/48.png\" class=\"avatar\"> gaurav:</div>\n<blockquote>\n<p>Additionally, there are some range-wide invariants that need to be maintained by each <em>Update Transactions</em> . So, I am fine to give up concurrency when updating any key in this range ( <em>there could be smarter ways to lock only a smaller subrange of this entire range, but at the moment we could assume that to be an independent optimization</em> ).</p>\n</blockquote>\n</aside>\n<p>Depending on the nature of these invariants, it might actually be unnecessary to add either a read conflict or write conflict range over the whole range. I\u2019m not sure what these invariants are, but I would check to see if they can be maintained with something like an <a href=\"https://apple.github.io/foundationdb/developer-guide.html#atomic-operations\">atomic operation</a> which allows for multiple clients to update the same key concurrently without conflict. If not, it\u2019s also possible that you could rely on the read-modify-write pattern on these range-wide keys instead of explicit read and write conflict ranges on the keys themselves. The benefit there is that if one day, one figures out how to update those keys without conflict, then you get concurrency \u201cfor free\u201d without having to also modify your reads and writes to stop adding manual ranges.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-01-27T19:00:31.520Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 2,
        "incoming_link_count": 2,
        "reads": 47,
        "readers_count": 46,
        "score": 19.4,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#atomic-operations",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 6.0",
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3255,
        "name": "gaurav",
        "username": "gaurav",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
        "created_at": "2019-02-02T05:07:53.900Z",
        "cooked": "<p>Thank you for the detailed explanation, <a class=\"mention\" href=\"/u/alloc\">@alloc</a>!</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2019-02-02T05:07:53.900Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 39,
        "readers_count": 38,
        "score": 27.8,
        "yours": false,
        "topic_id": 1070,
        "topic_slug": "readconflict-vs-writeconflict-for-locking-a-range",
        "display_username": "gaurav",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 166,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/readconflict-vs-writeconflict-for-locking-a-range/1070/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      3141,
      3144,
      3145,
      3146,
      3149,
      3151,
      3255
    ]
  },
  "timeline_lookup": [
    [
      1,
      2460
    ],
    [
      6,
      2459
    ],
    [
      7,
      2454
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "ReadConflict vs WriteConflict for locking a range?",
  "id": 1070,
  "title": "ReadConflict vs WriteConflict for locking a range?",
  "posts_count": 7,
  "created_at": "2019-01-26T13:26:56.674Z",
  "views": 1354,
  "reply_count": 3,
  "like_count": 0,
  "last_posted_at": "2019-02-02T05:07:53.900Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "readconflict-vs-writeconflict-for-locking-a-range",
  "category_id": 7,
  "word_count": 1695,
  "deleted_at": null,
  "user_id": 166,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1070",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Reading your own write conflict range",
      "id": 2097,
      "title": "Reading your own write conflict range",
      "slug": "reading-your-own-write-conflict-range",
      "posts_count": 6,
      "reply_count": 4,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2020-05-01T17:01:26.015Z",
      "last_posted_at": "2020-05-04T16:53:08.629Z",
      "bumped": true,
      "bumped_at": "2020-05-04T16:53:08.629Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1180,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Questions regarding FDB transaction conflict on two concurrent transactions",
      "id": 2913,
      "title": "Questions regarding FDB transaction conflict on two concurrent transactions",
      "slug": "questions-regarding-fdb-transaction-conflict-on-two-concurrent-transactions",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2021-09-28T06:26:34.642Z",
      "last_posted_at": "2021-10-28T08:17:02.264Z",
      "bumped": true,
      "bumped_at": "2021-10-28T09:13:59.130Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 2185,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 550,
            "username": "ntrhieu89",
            "name": "Hieu Nguyen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ntrhieu89/{size}/587_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Go lang AddReadConflictKey AddWriteConflictKey",
      "id": 1842,
      "title": "Go lang AddReadConflictKey AddWriteConflictKey",
      "slug": "go-lang-addreadconflictkey-addwriteconflictkey",
      "posts_count": 4,
      "reply_count": 0,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2019-12-16T07:17:17.187Z",
      "last_posted_at": "2019-12-16T21:07:59.763Z",
      "bumped": true,
      "bumped_at": "2019-12-16T21:07:59.763Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 851,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 538,
            "username": "ravilution",
            "name": "Ravilution",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ravilution/{size}/728_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "C api add_conflict_range seems not work",
      "id": 4492,
      "title": "C api add_conflict_range seems not work",
      "slug": "c-api-add-conflict-range-seems-not-work",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2024-05-27T11:49:05.182Z",
      "last_posted_at": "2024-05-29T04:12:47.638Z",
      "bumped": true,
      "bumped_at": "2024-05-29T04:12:47.638Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 153,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 1308,
            "username": "gripleaf",
            "name": "gripleaf",
            "avatar_template": "/user_avatar/forums.foundationdb.org/gripleaf/{size}/1642_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 166,
        "username": "gaurav",
        "name": "gaurav",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 173,
        "username": "jkominek",
        "name": "Jay Kominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 308,
        "username": "ananthakumaran",
        "name": "Anantha Kumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 166,
      "username": "gaurav",
      "name": "gaurav",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png"
    },
    "last_poster": {
      "id": 166,
      "username": "gaurav",
      "name": "gaurav",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#atomic-operations",
        "title": "Developer Guide \u2014 FoundationDB 6.0",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://en.wikipedia.org/wiki/Pure_function",
        "title": "Pure function - Wikipedia",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 173,
        "domain": "en.wikipedia.org",
        "root_domain": "wikipedia.org"
      }
    ]
  },
  "bookmarks": []
}