{
  "post_stream": {
    "posts": [
      {
        "id": 1293,
        "name": "Rowan Goemans",
        "username": "rowanG",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png",
        "created_at": "2018-05-25T13:29:22.243Z",
        "cooked": "<p>Hello everyone,</p>\n<p>I\u2019m considering FoundationDB as one of the key features that I need is the watches functionality. I have multiple servers that are watching for a change and then need to do something. According tot he documentation I read here: <a href=\"https://apple.github.io/foundationdb/developer-guide.html#watches\" rel=\"nofollow noopener\">https://apple.github.io/foundationdb/developer-guide.html#watches</a> The watches may not be fired for each change that has occured which is fine for my application. However the code suggest that it is possible to not have the latest version of a value when watching because this can occur.</p>\n<ol>\n<li>Start watching key</li>\n<li>Someone makes a change</li>\n<li>Watcher is notified and watcher reads the value</li>\n<li>Someone makes another change</li>\n<li>Start watching key</li>\n</ol>\n<p>There is a gap between watching a key, reading the change then starting a watcher again and if a change occurs between those points I don\u2019t think it is caught.</p>\n<p>Am I correct in this assesment or does the client perform some magic that it knows the last watched value?</p>\n<p>Regards</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T13:29:22.243Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 233,
        "reads": 58,
        "readers_count": 57,
        "score": 1191.6,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Rowan Goemans",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#watches",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 5.1",
            "clicks": 40
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 289,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1294,
        "name": "Justin Lowery",
        "username": "umpc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/umpc/{size}/203_2.png",
        "created_at": "2018-05-25T15:01:11.483Z",
        "cooked": "<p>Yes, that is correct. That condition is essentially what the note in that section is describing.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T15:01:11.483Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 57,
        "readers_count": 56,
        "score": 11.4,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Justin Lowery",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 230,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1298,
        "name": "Rowan Goemans",
        "username": "rowanG",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png",
        "created_at": "2018-05-25T17:56:54.921Z",
        "cooked": "<p>Then what is the use case then for watchers. You can\u2019t really build anything on top of it since you can\u2019t ever say you have the most recent version of a variable which quickly becomes a huge problem for bursty changes where a client could have an old version of a variable for days or weeks.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T18:00:25.836Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 55,
        "readers_count": 54,
        "score": 31.0,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Rowan Goemans",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 289,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1299,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-05-25T18:21:10.599Z",
        "cooked": "<p>There is probably a better idea than this for implementing what you\u2019re looking for, but if all you\u2019re after is making sure a watcher can read every change on a specified key, you can create a watch on a \u201csignal\u201d key which is changed with <code>SET_VERSIONSTAMPED_VALUE</code> and sort the individual changes in a range of keys which are ordered using <code>SET_VERSIONSTAMPED_KEY</code> with a value of the change you need your clients to observe. Those two operations are done within a transaction so they are atomic.</p>\n<p>This way you don\u2019t have to do polling (which I think is the point of watches in the first place given the example code in Python), but you also have the benefit of reading each change individually if you need it.</p>\n<p>You\u2019ll also need to garbage collect the old values when you\u2019re finished.</p>\n<p>The key space will look something like this:</p>\n<p>TARGET_KEY =&gt; versionstamp_0<br>\nTARGET_KEY/versionstamp_0 =&gt; change_0</p>\n<p>TARGET_KEY =&gt; versionstamp_1<br>\nTARGET_KEY/versionstamp_1 =&gt; change_1</p>\n<p>You use the watch to know when the key has changed, but you only do a range read on the versionstamped portion to know what the actual change was.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T18:22:55.360Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 54,
        "readers_count": 53,
        "score": 17.8,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1300,
        "name": "Rowan Goemans",
        "username": "rowanG",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png",
        "created_at": "2018-05-25T18:52:11.476Z",
        "cooked": "<p>Like illustrated in the my original post, I don\u2019t need every change I simply can\u2019t deal with the fact that a change is never observed. This is what would be broken for my application.</p>\n<p>Client A watches value<br>\nClient B sets value<br>\nClient A gets notified</p>\n<ol>\n<li>Client A reads value</li>\n<li>Client B sets value</li>\n<li>Client A watches value</li>\n</ol>\n<p>I have marked the problematic section with numbers. The value that is set in 2. is never observed. I don\u2019t need every change. Client B can change the value 1000x and that Client A only get\u2019s notified once is fine. What is not fine is that an unobserved change slips through the system. For instance let\u2019s say I have a device which saves bursty data every 10 minutes and another client that watches. This means I might have possibly stale data for 10 minutes.</p>\n<p>Watching on a signal key doesn\u2019t solve this problem.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T18:54:06.476Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 50,
        "readers_count": 49,
        "score": 20.0,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Rowan Goemans",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 289,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1301,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-25T19:04:37.225Z",
        "cooked": "<p>You are supposed to read the value and set the watch in the <em>same</em> transaction, so:</p>\n<ol>\n<li>Client A reads value and watches value</li>\n<li>Client B sets value</li>\n<li>Client A is notified.</li>\n</ol>\n<p>The issue that stamps &amp; atomic ops help solve is:</p>\n<ol>\n<li>Client A reads value (=1) and watches value</li>\n<li>Client B sets value to 2</li>\n<li>Client C sets value to 1</li>\n<li>Client A is notified (and reads either 1 or 2 depending on timing)</li>\n</ol>\n<p>That\u2019s why you need another key to detect this ABA scenario if this breaks your invariants.</p>\n<p>But in both cases, your trigger should be called.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T19:11:02.757Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 50,
        "readers_count": 49,
        "score": 45.0,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 289,
          "username": "rowanG",
          "name": "Rowan Goemans",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1319,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-25T22:36:07.547Z",
        "cooked": "<p>Christophe\u2019s suggestion to read and watch the value in the same transaction is the way to accomplish what you\u2019re after. Basically, the contract behind a watch is that it will notify you eventually if the value becomes and stays different than the value at the read version of your transaction. If you\u2019ve set the value in your transaction already, then it will instead notify you if the value becomes different than what you\u2019ve set it to.</p>\n<p>One important thing to note here, though, is that you may not actually be notified of a change in an ABA scenario. If the value is changed back to the same value that it was at the time the watch was created and the watch hasn\u2019t yet fired, then it won\u2019t fire until it\u2019s changed to a different value again. See the API documentation (e.g. <a href=\"https://apple.github.io/foundationdb/api-python.html#watches\">Python</a>) for a more thorough explanation.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-25T22:36:07.547Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 48,
        "readers_count": 47,
        "score": 24.6,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-python.html#watches",
            "internal": false,
            "reflection": false,
            "title": "Python API \u2014 FoundationDB 5.1",
            "clicks": 3
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1323,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-26T11:18:37.800Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"7\" data-topic=\"474\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>f the value is changed back to the same value that it was at the time the watch was created and the watch hasn\u2019t yet fired, then it won\u2019t fire until it\u2019s changed to a different value again</p>\n</blockquote>\n</aside>\n<p>I\u2019m surprised about that, because I don\u2019t see anything in storageserver.actor.cpp that would make the watch not fire when a key is mutated? I see that it checks if the value is already changed in watchValue_impl when the watch request arrives, but then the AsyncMap only contains the keys (not the value) and is unconditionally checked when a mutation is applied. Is this behavior coming from before the watch reach the storage actor ?</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-26T11:18:37.800Z",
        "reply_count": 2,
        "reply_to_post_number": 7,
        "quote_count": 1,
        "incoming_link_count": 5,
        "reads": 47,
        "readers_count": 46,
        "score": 44.4,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1325,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-26T14:37:15.293Z",
        "cooked": "<p>I\u2019m not sure what all the cases are that could lead to this behavior, but there\u2019s the fallback polling mechanism, for example, if there are too many watches. <code>watchValue_impl</code> is running a loop that checks the value both at the beginning and every time the key is updated, not returning until the value has changed, and it might be possible for multiple updates to appear between when the key is updated and when the value is checked. Also, data movement will cause relevant watches to be cancelled on the storage server and moved to a different one, during which time multiple updates could happen.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-26T14:37:15.293Z",
        "reply_count": 1,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 43,
        "readers_count": 42,
        "score": 13.6,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1326,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-26T15:42:36.713Z",
        "cooked": "<p>Oh right, I remember seeing something about polling. Looks like this is another reason why watches should probably only be used with atomic operations, or values that can only go up.</p>\n<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"9\" data-topic=\"474\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>Also, data movement will cause relevant watches to be cancelled on the storage server and moved to a different one, during which time multiple updates could happen.</p>\n</blockquote>\n</aside>\n<p>But we are still assured they would fire if the updates are atomic adds or versionstamped values? (ie: we are not in a situation where ABA is not possible).</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-26T15:42:36.713Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 43,
        "readers_count": 42,
        "score": 28.6,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1327,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-26T15:57:55.687Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"10\" data-topic=\"474\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>But we are still assured they would fire if the updates are atomic adds or versionstamped values? (ie: we are not in a situation where ABA is not possible).</p>\n</blockquote>\n</aside>\n<p>Yes, when the watch is moved due to data movement, an error goes back to the FDB client which automatically issues it to a new storage server with the same value as before. Of course there are other types of errors which would bounce all the way back to your client code, and to not miss an update in that case you would need to have remembered the value when you set the watch, read the now current value to compare it, and then set a new watch.</p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-26T15:57:55.687Z",
        "reply_count": 1,
        "reply_to_post_number": 10,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 43,
        "readers_count": 42,
        "score": 23.6,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1328,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-05-26T18:15:20.667Z",
        "cooked": "<p>The watch only fires <a href=\"https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbserver/storageserver.actor.cpp#L783\">when a key is changed</a>.  The <code>onChange</code> future only causes the loop to resume, as there\u2019s no <code>reply.send</code> after the <a href=\"https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbserver/storageserver.actor.cpp#L796\">wait(watchFuture)</a> call.  I honestly did find this surprising when reading through the code.</p>\n<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"11\" data-topic=\"474\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>to not miss an update in that case you would need to have remembered the value when you set the watch, read the now current value to compare it, and then set a new watch</p>\n</blockquote>\n</aside>\n<p>The underlying <a href=\"https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbclient/NativeAPI.actor.cpp#L1300\">NativeAPI implementation of watches</a> has support for providing an initial value, that would make doing a read-compare-watch transaction unnecessary.  However, the ability to provide the initial value appears to be not <a href=\"https://github.com/apple/foundationdb/blob/a799d2a08c9b3d9227f67adfd74a210cc4176c89/bindings/c/fdb_c.cpp#L552\">exposed though bindings</a>?  Was there a reason for this?</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"10\" data-topic=\"474\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Looks like this is another reason why watches should probably only be used with atomic operations, or values that can only go up.</p>\n</blockquote>\n</aside>\n<p>This is what I got the feeling of after thinking about how the code works.  It looks like one should either trigger watches with an increment and always supply the last known value to the watch, or clear the key and set a watch on it transactionally.</p>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-26T18:15:20.667Z",
        "reply_count": 1,
        "reply_to_post_number": 8,
        "quote_count": 2,
        "incoming_link_count": 2,
        "reads": 44,
        "readers_count": 43,
        "score": 23.8,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbserver/storageserver.actor.cpp#L783",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/storageserver.actor.cpp at 8472f1046957849a97538abb2f47b299e0ae2b2d \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 7
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbclient/NativeAPI.actor.cpp#L1300",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/NativeAPI.actor.cpp at 8472f1046957849a97538abb2f47b299e0ae2b2d \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 3
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbserver/storageserver.actor.cpp#L796",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/storageserver.actor.cpp at 8472f1046957849a97538abb2f47b299e0ae2b2d \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/a799d2a08c9b3d9227f67adfd74a210cc4176c89/bindings/c/fdb_c.cpp#L552",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/fdb_c.cpp at a799d2a08c9b3d9227f67adfd74a210cc4176c89 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 53,
          "username": "KrzysFR",
          "name": "Christophe Chevalier",
          "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1329,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-05-26T18:51:28.335Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"12\" data-topic=\"474\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>The underlying <a href=\"https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbclient/NativeAPI.actor.cpp#L1300\">NativeAPI implementation of watches</a> has support for providing an initial value, that would make doing a read-compare-watch transaction unnecessary. However, the ability to provide the initial value appears to be not <a href=\"https://github.com/apple/foundationdb/blob/a799d2a08c9b3d9227f67adfd74a210cc4176c89/bindings/c/fdb_c.cpp#L552\">exposed though bindings</a>? Was there a reason for this?</p>\n</blockquote>\n</aside>\n<p>This API is used by ReadYourWrites because it needs to be able to supply a value that could be the result of a mutation in the same transaction. In some cases NativeAPI does use the remembered value to reissue a request, but in others it propogates errors back out to let the client decide what to do. You could potentially avoid doing another read on client retries by letting the client specify the value it remembered, and I can\u2019t recall if that was consciously considered as an option. If so, I don\u2019t know if there were any objections to it, but I can\u2019t think of any now.</p>",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-05-26T18:51:28.335Z",
        "reply_count": 0,
        "reply_to_post_number": 12,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 43,
        "readers_count": 42,
        "score": 8.6,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1395,
        "name": "Geo",
        "username": "gwillis12",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png",
        "created_at": "2018-06-05T23:23:48.371Z",
        "cooked": "<p>I  feel like we have somehow thrown out the baby with the bathwater here \u2013 the baby being \u201cEvent-Driven Architecture\u201d</p>\n<p>You know, all that Kafka mindshare and Congruent Professional Service contracts \u2013 that Event-Driven Architecture.   The same \u201cEvent Thinking\u201d that Gartner is jumping up and down about.  Why do I feel like Jeff Goldbloom in Jurassic Park asking \u201cHello?   There are going to be some Dinosaurs on the Dinosaur tour??\u201d</p>\n<p>I want my Event Sourcing model to actually allow me to listen and react to Events \u2013 and in case you have not realized what you really have, I\u2019ll tell you \u2013 God\u2019s gift the \u201cEvent Thinking\u201d.</p>\n<p>I don\u2019t wanna hear about jumping through hoops to do events right, so let me delineate the hoops.</p>\n<p>The constructs we need are actors, agents, and \u201cthe fabric\u201d.  Agents handle the listening and dispatching to Actors.  Agents declaratively specify the \u201cpattern match\u201d on a particular topic.  Agents allow Actors to practice the Hollywood Principle and provide implicit invocation.</p>\n<p>Actors are pampered.  They are spoon fed an event, take the stage, do their work, and wait for the next gig.  If they need data not contained in previous events (or discarded), it can \u201cQuery\u201d an assistant to get the lines \u2013 \u201cLine please\u201d.  The Data Fabric is like a Concierge at the Actor\u2019s Guild \u2013 handling the \u201coff topic\u201d information needs (since events are always the minimal expression of \u201con topic\u201d information).</p>\n<p>Agents ingest events and invoke Actors.  It\u2019s a simple job of dispatching, so a Declarative DSL is indicated.</p>\n<p>Actors ingest events, process something, and emit an event.  Said another way, Actors transform Events \u2013 like ETL.  That\u2019s what streaming is.  Some actors transform from the event log to a data model.  This is how the data fabric gets populated.  It\u2019s all Actor based, and you must have events exposed.</p>\n<p>To reap CQRS benefits, commands and queries are separated, which means writing and reading from possibly different data models.  This write to the log, then listen to the log and write to the SQL DB historically has led to eventual consistency since ACID was not supported.  You\u2019ve blown the doors of Polyglot Persistence with not only ACID across the layers separating commands from queries, but the ability to write to/through a \u201cprojection\u201d to achieve cross model consistency, and I\u2019m not sure even Kleppmann has thought about this use of the term.  Writing to the metadata storage layer as a common event log would be the fastest, but writing through a layer to affect the same transitive impacts on the layers is just a hop away.  Suddenly, Polymorphic Persistence with ACID transaction is blooming.</p>\n<p>Other DBs run into issues when writes are implicitly followed by a read.  Traditionally, you write, and then at some future time, somebody queries the info.  In EDA, there is/are one or more immediate listeners (agents) hooking each event.</p>\n<p>It\u2019s called \u201cEvent-Driven\u201d for a reason.  We have to get to the events in order to process them \u2013 which means replication to scale topics and triggers, not polling.</p>\n<p>If we call that \u201cwatches\u201d in this parlance, that\u2019s cool.  A rose\u2026  But when I hear \"you gotta code it this way because if you code it he other way events can get \u201cinconsistent\u201d, then I have have to say that in the kingdom of Polyglot ACID Persistence, this emperor is naked!  Events are used to drive replication and transactional locks for consistency \u2013 so somehow you through the baby out with the bath water.</p>\n<p>Solve EDA, and you have the \u201cKiller App\u201d for Linearized, Stateful Replication at the most fundamental level.</p>\n<p>Hope somebody can \u201cunderstand the words that are coming out of my mouth.\u201d <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>\n<p>Respectfully,<br>\nGeorge Willis<br>\nDuke Energy Modern Architecture</p>",
        "post_number": 14,
        "post_type": 1,
        "posts_count": 14,
        "updated_at": "2018-06-05T23:23:48.371Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 5,
        "reads": 37,
        "readers_count": 36,
        "score": 32.4,
        "yours": false,
        "topic_id": 474,
        "topic_slug": "watchers-and-not-missing-changes",
        "display_username": "Geo",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 298,
        "hidden": false,
        "trust_level": 0,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/watchers-and-not-missing-changes/474/14",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1293,
      1294,
      1298,
      1299,
      1300,
      1301,
      1319,
      1323,
      1325,
      1326,
      1327,
      1328,
      1329,
      1395
    ]
  },
  "timeline_lookup": [
    [
      1,
      2706
    ],
    [
      8,
      2705
    ],
    [
      14,
      2695
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Watchers and not missing changes",
  "id": 474,
  "title": "Watchers and not missing changes",
  "posts_count": 14,
  "created_at": "2018-05-25T13:29:22.034Z",
  "views": 1999,
  "reply_count": 6,
  "like_count": 3,
  "last_posted_at": "2018-06-05T23:23:48.371Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "watchers-and-not-missing-changes",
  "category_id": 7,
  "word_count": 2378,
  "deleted_at": null,
  "user_id": 289,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_474",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 14,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 7,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Changefeeds (watching and getting updates on ranges of keys)",
      "id": 511,
      "title": "Changefeeds (watching and getting updates on ranges of keys)",
      "slug": "changefeeds-watching-and-getting-updates-on-ranges-of-keys",
      "posts_count": 9,
      "reply_count": 7,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-06-16T12:26:34.710Z",
      "last_posted_at": "2018-07-06T14:46:54.646Z",
      "bumped": true,
      "bumped_at": "2018-07-06T14:46:54.646Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 4221,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 307,
            "username": "jwr",
            "name": "Jan Rychter",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Transaction.Watch Examples?",
      "id": 257,
      "title": "Transaction.Watch Examples?",
      "slug": "transaction-watch-examples",
      "posts_count": 6,
      "reply_count": 2,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2018-04-25T03:34:54.216Z",
      "last_posted_at": "2018-10-23T12:05:15.737Z",
      "bumped": true,
      "bumped_at": "2018-10-23T12:05:15.737Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 2822,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 174,
            "username": "seddonm1",
            "name": "seddonm1",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/e274bd/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 265,
            "username": "brainfucker",
            "name": "Illarionov Oleg",
            "avatar_template": "/user_avatar/forums.foundationdb.org/brainfucker/{size}/237_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Understanding &ldquo;Watches&rdquo;",
      "id": 903,
      "title": "Understanding \"Watches\"",
      "slug": "understanding-watches",
      "posts_count": 10,
      "reply_count": 4,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2018-11-26T17:28:09.202Z",
      "last_posted_at": "2018-11-27T17:28:33.763Z",
      "bumped": true,
      "bumped_at": "2018-11-27T17:28:33.763Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 3295,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 437,
            "username": "MansurAshraf",
            "name": "Mansur Ashraf",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/b9bd4f/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 435,
            "username": "ArchDev",
            "name": "Arthur Kushka",
            "avatar_template": "/user_avatar/forums.foundationdb.org/archdev/{size}/425_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Changes feed without hot keys",
      "id": 1057,
      "title": "Changes feed without hot keys",
      "slug": "changes-feed-without-hot-keys",
      "posts_count": 8,
      "reply_count": 4,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2019-01-24T21:54:58.266Z",
      "last_posted_at": "2019-01-25T20:22:00.709Z",
      "bumped": true,
      "bumped_at": "2019-01-25T20:22:00.709Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1474,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 491,
            "username": "iilyak",
            "name": "Iilyak",
            "avatar_template": "/user_avatar/forums.foundationdb.org/iilyak/{size}/1073_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 308,
            "username": "ananthakumaran",
            "name": "Anantha Kumaran",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 423,
            "username": "kocolosk",
            "name": "Adam Kocoloski",
            "avatar_template": "/user_avatar/forums.foundationdb.org/kocolosk/{size}/412_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Where do watches register themselves?",
      "id": 827,
      "title": "Where do watches register themselves?",
      "slug": "where-do-watches-register-themselves",
      "posts_count": 5,
      "reply_count": 3,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-10-31T13:07:10.136Z",
      "last_posted_at": "2020-05-07T15:14:06.031Z",
      "bumped": true,
      "bumped_at": "2020-05-07T15:14:06.031Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1098,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 388,
            "username": "amarjeet000",
            "name": "Amarjeet",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/a/e19adc/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 289,
        "username": "rowanG",
        "name": "Rowan Goemans",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      },
      {
        "id": 298,
        "username": "gwillis12",
        "name": "Geo",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 0
      },
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 230,
        "username": "umpc",
        "name": "Justin Lowery",
        "avatar_template": "/user_avatar/forums.foundationdb.org/umpc/{size}/203_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 289,
      "username": "rowanG",
      "name": "Rowan Goemans",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/8baadc/{size}.png"
    },
    "last_poster": {
      "id": 298,
      "username": "gwillis12",
      "name": "Geo",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/ed655f/{size}.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#watches",
        "title": "Developer Guide \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 40,
        "user_id": 289,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbserver/storageserver.actor.cpp#L783",
        "title": "foundationdb/storageserver.actor.cpp at 8472f1046957849a97538abb2f47b299e0ae2b2d \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://apple.github.io/foundationdb/api-python.html#watches",
        "title": "Python API \u2014 FoundationDB 5.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 12,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/8472f1046957849a97538abb2f47b299e0ae2b2d/fdbclient/NativeAPI.actor.cpp#L1300",
        "title": "foundationdb/NativeAPI.actor.cpp at 8472f1046957849a97538abb2f47b299e0ae2b2d \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}