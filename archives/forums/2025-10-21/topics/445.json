{
  "post_stream": {
    "posts": [
      {
        "id": 1202,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-21T10:01:42.081Z",
        "cooked": "<p><a href=\"http://tylerstroud.com/2014/11/18/storing-and-querying-objects-in-redis/\" rel=\"nofollow noopener\">http://tylerstroud.com/2014/11/18/storing-and-querying-objects-in-redis/</a> is a short treatise on the query expressivity of Redis, a popular K-V store.</p>\n<p>For my purposes here, it convincingly argues for <strong>server-side Boolean operations</strong> over sorted keyrange results to allow efficient querying by multiple criteria.</p>\n<p><strong>Intersection</strong> is probably the most important such operation, followed by union and set difference.</p>\n<p>A query paraphrased as \u201cGive me all products under the Men\u2019s trousers subsection of the category index <strong>and/intersected</strong> with the price index ranging from 30 - 100 Euro\u201d might serve as a made-up e-commerce example to illustrate the utility of the idea.</p>\n<p>If we follow the \u2018simple indices\u2019 data modelling pattern of FDB, with keys like</p>\n<p>index/criterion1/object_id_1 = \u2018\u2019<br>\n\u2026<br>\nindex/criterionN/object_id_k = \u2018\u2019</p>\n<p>it seems we want some kind of intersectingIterator for the most important Boolean operation. Arguments would be an array of RangeResults and some way to specify a tuple position where the key subpart to use for set intersection can be found (e.g. the last position in the sketched index keys above).</p>\n<p>Or we make intersectingIterator self-composable: intersectingIterator(RangeResult, tuplePos) -&gt; RangeResult.</p>\n<p>The argument for doing this server-side would be to drastically reduce the number of intermediate results that need to be transmitted otherwise, i.e. when doing Boolean operations client-side.</p>\n<p>Underlyingly, something like <a href=\"https://roaringbitmap.org/\" rel=\"nofollow noopener\">https://roaringbitmap.org/</a> might be used to implement this efficiently.</p>\n<p>What do people think - is this truly needed, can it be efficiently emulated with the existing API, if not, what are the chances this will be added?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-21T10:01:42.081Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 215,
        "reads": 58,
        "readers_count": 57,
        "score": 1101.6,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "http://tylerstroud.com/2014/11/18/storing-and-querying-objects-in-redis/",
            "internal": false,
            "reflection": false,
            "title": "Storing and Querying Objects in Redis \u2013 \"I think it might work\"",
            "clicks": 16
          },
          {
            "url": "https://roaringbitmap.org/",
            "internal": false,
            "reflection": false,
            "title": "Roaring Bitmaps",
            "clicks": 7
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1208,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-21T14:33:02.593Z",
        "cooked": "<p>Addendum: Apache Accumulo turns out to have an \u2018intersecting iterator\u2019 with much of the same motivation, described here: <a href=\"https://accumulo.apache.org/docs/2.0/getting-started/table_design\" rel=\"nofollow noopener\">https://accumulo.apache.org/docs/2.0/getting-started/table_design</a>.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-21T14:33:02.593Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 54,
        "readers_count": 53,
        "score": 25.8,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://accumulo.apache.org/docs/2.0/getting-started/table_design",
            "internal": false,
            "reflection": false,
            "title": "Accumulo Documentation - Table Design",
            "clicks": 13
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1209,
        "name": "Richard Applebaum",
        "username": "dicklacara",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
        "created_at": "2018-05-21T15:53:05.512Z",
        "cooked": "<p>Doesn\u2019t the fact that the FDB database and any indexes that you create are <strong><em>ordered</em></strong> k/v pairs, largely mitigate the issue you describe?</p>\n<p>As to the boolean operations, couldn\u2019t they be implemented as FDB layers on the underlying db &amp; indexes, to provide the server-side efficiency you desire?</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-21T15:53:37.245Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 10,
        "reads": 55,
        "readers_count": 54,
        "score": 66.0,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Richard Applebaum",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 31,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1213,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-21T19:55:10.864Z",
        "cooked": "<p>Here is an experimental layer that uses compressed bitmap for indexes:</p>\n<ul>\n<li><a href=\"https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Layers.Experimental/Indexes\" rel=\"nofollow noopener\">https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Layers.Experimental/Indexes</a></li>\n</ul>\n<p>I think it uses some variations of a Word-Aligned Hybrid bitmap encoding to represent indexes. It hasn\u2019t been tested in production. <em>And looking back at the code it is not very efficient and could probably be optimized a lot!</em></p>\n<p>The bitmap format is <a href=\"https://github.com/Doxense/foundationdb-dotnet-client/blob/master/FoundationDB.Layers.Experimental/Indexes/Bitmaps/WordAlignHybridCoding.cs\" rel=\"nofollow noopener\">documented here</a> but any other encoding (CONCISE, Roaring, \u2026) would probably work the same.</p>\n<p>\u2013</p>\n<p>We also use a more traditional indexing solution like describe above, and use Merge Sort on multiple GetRange to perform union or intersection (easy to do with an already ordered k/v store). It works well but we only have up to a few tens of thousands of documents in the collections, so I\u2019m not sure it would scale to more (millions or billions) because you would probably have to read too many data.</p>\n<p>There are some gotchas when doing merge sort, when you do queries on range of values: (VALUE, ID) yields a list of sorted ids for a single value (ex: VALUE=42) but not for a range of values (40 &lt;= VALUE &lt; 50), so you will have to do an intermediate sort on the complete range read, before piping the results into a Merge Sort. This can be the limiting factor for a large number of documents.</p>\n<p>Compressed bitmaps can solve this to some degree\u2026 but I don\u2019t have enough experience with them to tell you.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-21T19:58:25.065Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 54,
        "readers_count": 53,
        "score": 110.8,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Layers.Experimental/Indexes",
            "internal": false,
            "reflection": false,
            "title": "foundationdb-dotnet-client/FoundationDB.Layers.Experimental/Indexes at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
            "clicks": 30
          },
          {
            "url": "https://github.com/Doxense/foundationdb-dotnet-client/blob/master/FoundationDB.Layers.Experimental/Indexes/Bitmaps/WordAlignHybridCoding.cs",
            "internal": false,
            "reflection": false,
            "title": "foundationdb-dotnet-client/WordAlignHybridCoding.cs at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
            "clicks": 14
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 3
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1219,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-05-22T07:10:34.130Z",
        "cooked": "<p>I think set intersection across multiple keys is probably outside the scope of the FDB key-value store, though it could very well be done (perhaps using a bit map, perhaps doing a merge operation across sorted lists) by a layer. Some of the other answers on this thread go into that a little more, but it seems to me like you would be heavily influenced by things like your data model when implementing that kind of thing, which is after the end of where the key-value store\u2019s API.</p>\n<p>I\u2019m fairly confident that this could be implemented in a way that is efficient enough for many use cases, but it would look something like issue iterators for the different ranges you want to combine, and then perform the combination (intersection, union, set difference, etc.) locally.</p>\n<p>If you needed something fancier, a not-so-unreasonable way to implement this might be some kind of generic server-side code execution API, though adding that would be quite a bit of work. It also wouldn\u2019t help you terribly much in the case that two key ranges exist on different shards. (For example, Redis, to my knowledge, requires that all data used by a single sever-side Lua script evaluation, live on a single host.) So I think you would want something that, for example, executes the join on the server if all of the data are on a single machine and executes it locally if some are on one server and some on another. You could get most of the way there by using the same execution engine locally as is used on the fdbserver instance, but some of the details get a little involved. (It might also require falling back to doing things locally in the presence of outstanding writes in your transaction if you want to maintain RYW.)</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-22T07:10:34.130Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 10,
        "reads": 50,
        "readers_count": 49,
        "score": 65.0,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1220,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-22T08:27:07.279Z",
        "cooked": "<p>One thing that could help and be somewhat easier to implement, is some logic that would allow get_range queries to only return <em>part</em> of a key and/or value, but using some conditional logic. Maybe even filter out the result if the part does not match some expected byte sequence.</p>\n<p>One use case would be to allow the equivalent of a TABLE SCAN to do ad-hoc indexing on documents stored with some sort of binary encoding (JSON, protobuf, JSONB, etc\u2026). Currently, the application must fetch the entire document, parse it and check a few bytes from the \u201cCity\u201d field (for example), to then discard the document if it does not match. Repeat this a few thousand/million times, and the query will timeout.</p>\n<p>If the get_range query can extract only part of the document, then we are returning less data on the on wire, and if it is able to also filter out results based on a comparison with a byte literal, we could probably make it even faster.</p>\n<p>Some encodings are maybe to complex to express, like parsing text JSON is probably too cpu intensive on a range query, but some binary formats (I\u2019m thinking of Postgresql\u2019s JSONB) allow fast random access to fields without parsing the entire document and could be a good match for this. There is also other formats like how most  SQL databases lay out records on the disk, that are very easy to consume (most fields, except for varchars or nullable entries, are at a fixed offset from the start of the row).</p>\n<p>Now the question is how to express such query?</p>\n<p>One extreme solution would be to teach the storage nodes about JSON, protobuf, JSONB, Cap\u2019n Proto, MessagePack, and so on\u2026</p>\n<ul>\n<li>This would be a huge task and there will always be new formats and variants that people will want to support.</li>\n<li>For the keys, the Tuple encoding seems to be frequently used, so this would be a safe bet, but nothing prevents you from using a different binary format which may use variable-length encoding.</li>\n</ul>\n<p>Another extreme solution would be to have some sort of virtual machine that can run bytecode and execute complex logic on the storage nodes.</p>\n<ul>\n<li>To avoid reinventing the wheel, we could reuse something like luaJIT, or even more complex JIT like .NET Core/RyuJit or any embeddable JVM ?</li>\n<li>I\u2019m not convinced this could be done easily, even for the fact that fdb process are single-threaded and having foreing user code running on this thread could completely stall the process (a simple \u201cwhile(true) { \u2026}\u201d with a borked exit condition would deadlock the process).</li>\n</ul>\n<p>I\u2019m not sure what would be the best solution to, at the same time, reduce the number of bytes sent over the wire for large reads, and also project some business logic closer to the data itself without impacting the safety of the storage nodes and deadlocking the single thread. Maybe having dedicated threads to execute user \u201cstored procedures\u201d outside the main event loop, but this would probably break a lot of invariants that the current code relies on (serialized execution, no locks, etc\u2026)</p>\n<p>Are there any similar features that have been implemented into other distributed database? I\u2019m sure they  would be faced with similar issues when executing foreign code without the database storage server itself, and had to take some measures to protect the integrity of data?</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-22T12:28:21.796Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 49,
        "readers_count": 48,
        "score": 9.8,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1221,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-22T12:51:52.238Z",
        "cooked": "<p>I don\u2019t see a logical connection between set cardinality and set orderedness. Besides, search engines and databases <em>have</em> use ordered data structures for intersection and related operations for decades, and still this is one of the dominant factors affecting performance.</p>\n<p>As to the second suggestion, I guess I don\u2019t quite follow: those layers are not server-side, as far as I can see, so the network bandwidth issue remains unsolved, or not?</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-22T12:51:52.238Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 43,
        "readers_count": 42,
        "score": 13.6,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 31,
          "username": "dicklacara",
          "name": "Richard Applebaum",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1222,
        "name": "Cloudspeech",
        "username": "cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "created_at": "2018-05-22T13:19:54.281Z",
        "cooked": "<p>Thanks for all the other explanations, pointers to implemented layers and suggestions here - a lot to think about!</p>\n<p>A gut reaction: if layers are an unavoidable part of an efficient solution here, but one also desires the nice generality of server-side programming a la Apache Accumulo - I for one would strongly prefer to see LuaJIT here - why not try to have both? Run additional client(s) in each machine of each FDB cluster, implement \u2018server-side\u2019 programming-as-layers there while profiting from data locality and machine-local network speed (e.g. Unix domain sockets), and use intra-cluster messaging between those clients to coordinate who does what. It\u2019s nothing but a hazy sketch at this point, of course.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-22T13:19:54.281Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 45,
        "readers_count": 44,
        "score": 19.0,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Cloudspeech",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 208,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1234,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2018-05-22T16:57:56.442Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"cloudspeech\" data-post=\"8\" data-topic=\"445\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/cloudspeech/48/330_2.png\" class=\"avatar\"> cloudspeech:</div>\n<blockquote>\n<p>Run additional client(s) in each machine of each FDB cluster, implement \u2018server-side\u2019 programming-as-layers there while profiting from data locality and machine-local network speed (e.g. Unix domain sockets), and use intra-cluster messaging between those clients to coordinate who does what.</p>\n</blockquote>\n</aside>\n<p>I think there are a few more details on what such a scheme would look like in this thread: <a href=\"https://forums.foundationdb.org/t/coprocessors-or-modules/183\" class=\"inline-onebox\">Coprocessors or modules</a></p>\n<p>It also sounds like as a constructive proof that you could do that that Wavefront already have such a system set up. It is probably the easiest way to do something like what you\u2019ve described without a new API to push down operations.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2018-05-22T16:57:56.442Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 44,
        "readers_count": 43,
        "score": 18.8,
        "yours": false,
        "topic_id": 445,
        "topic_slug": "any-chance-of-server-side-boolean-operations-like-intersection",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/coprocessors-or-modules/183",
            "internal": true,
            "reflection": false,
            "title": "Coprocessors or modules",
            "clicks": 45
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/any-chance-of-server-side-boolean-operations-like-intersection/445/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1202,
      1208,
      1209,
      1213,
      1219,
      1220,
      1221,
      1222,
      1234
    ]
  },
  "timeline_lookup": [
    [
      1,
      2711
    ],
    [
      2,
      2710
    ],
    [
      7,
      2709
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Any chance of server-side Boolean operations like intersection?",
  "id": 445,
  "title": "Any chance of server-side Boolean operations like intersection?",
  "posts_count": 9,
  "created_at": "2018-05-21T10:01:41.965Z",
  "views": 1706,
  "reply_count": 3,
  "like_count": 4,
  "last_posted_at": "2018-05-22T16:57:56.442Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "any-chance-of-server-side-boolean-operations-like-intersection",
  "category_id": 8,
  "word_count": 1812,
  "deleted_at": null,
  "user_id": 208,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_445",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 9,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Secondary indexing approaches",
      "id": 792,
      "title": "Secondary indexing approaches",
      "slug": "secondary-indexing-approaches",
      "posts_count": 7,
      "reply_count": 2,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2018-10-19T19:24:02.093Z",
      "last_posted_at": "2018-10-20T15:08:09.001Z",
      "bumped": true,
      "bumped_at": "2018-10-20T15:08:09.001Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2905,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 391,
            "username": "atombender",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Missing API for getting just the count of a key range?",
      "id": 444,
      "title": "Missing API for getting just the count of a key range?",
      "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
      "posts_count": 14,
      "reply_count": 9,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-21T09:23:36.938Z",
      "last_posted_at": "2018-09-10T16:25:03.060Z",
      "bumped": true,
      "bumped_at": "2018-09-10T16:25:03.060Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 3599,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Feature Request: Predicate pushdown",
      "id": 954,
      "title": "Feature Request: Predicate pushdown",
      "slug": "feature-request-predicate-pushdown",
      "posts_count": 8,
      "reply_count": 3,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2018-12-12T17:32:10.909Z",
      "last_posted_at": "2019-04-08T13:18:45.867Z",
      "bumped": true,
      "bumped_at": "2019-04-08T13:18:45.867Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1940,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 499,
            "username": "garrensmith",
            "name": "Garren Smith",
            "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Slides about FoundationDB",
      "id": 679,
      "title": "Slides about FoundationDB",
      "slug": "slides-about-foundationdb",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": "https://global.discourse-cdn.com/foundationdb/original/1X/3ae2505c58909054b96c29f2897c0c35362e218e.png",
      "created_at": "2018-09-04T11:55:37.480Z",
      "last_posted_at": "2018-09-04T11:55:37.545Z",
      "bumped": true,
      "bumped_at": "2018-09-04T17:28:04.864Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1176,
      "category_id": 10,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 41,
            "username": "amirouche",
            "name": "Amirouche",
            "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Reduce/aggregations with FoundationDB",
      "id": 1792,
      "title": "Reduce/aggregations with FoundationDB",
      "slug": "reduce-aggregations-with-foundationdb",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-12-02T14:30:57.557Z",
      "last_posted_at": "2019-12-03T06:14:58.142Z",
      "bumped": true,
      "bumped_at": "2019-12-03T06:14:58.142Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 630,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 499,
            "username": "garrensmith",
            "name": "Garren Smith",
            "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 208,
        "username": "cloudspeech",
        "name": "Cloudspeech",
        "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 31,
        "username": "dicklacara",
        "name": "Richard Applebaum",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 208,
      "username": "cloudspeech",
      "name": "Cloudspeech",
      "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png"
    },
    "last_poster": {
      "id": 8,
      "username": "alloc",
      "name": "Alec Grieser",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
    },
    "links": [
      {
        "url": "https://forums.foundationdb.org/t/coprocessors-or-modules/183",
        "title": "Coprocessors or modules",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 45,
        "user_id": 8,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Layers.Experimental/Indexes",
        "title": "foundationdb-dotnet-client/FoundationDB.Layers.Experimental/Indexes at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 30,
        "user_id": 53,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "http://tylerstroud.com/2014/11/18/storing-and-querying-objects-in-redis/",
        "title": "Storing and Querying Objects in Redis \u2013 \"I think it might work\"",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 16,
        "user_id": 208,
        "domain": "tylerstroud.com",
        "root_domain": "tylerstroud.com"
      },
      {
        "url": "https://github.com/Doxense/foundationdb-dotnet-client/blob/master/FoundationDB.Layers.Experimental/Indexes/Bitmaps/WordAlignHybridCoding.cs",
        "title": "foundationdb-dotnet-client/WordAlignHybridCoding.cs at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 14,
        "user_id": 53,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://accumulo.apache.org/docs/2.0/getting-started/table_design",
        "title": "Accumulo Documentation - Table Design",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 13,
        "user_id": 208,
        "domain": "accumulo.apache.org",
        "root_domain": "apache.org"
      },
      {
        "url": "https://roaringbitmap.org/",
        "title": "Roaring Bitmaps",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 208,
        "domain": "roaringbitmap.org",
        "root_domain": "roaringbitmap.org"
      }
    ]
  },
  "bookmarks": []
}