{
  "post_stream": {
    "posts": [
      {
        "id": 6855,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2020-04-29T11:39:06.981Z",
        "cooked": "<p>This may be controversial, but this is something that could prevent a lot of issues and headaches.</p>\n<blockquote>\n<p><strong>tl;dr:</strong> fdbcli should - by default - update the <code>\\xff/metadataVersion</code> after committing any mutation to the cluster, in order to not break Layers using that key to cache metadata.</p>\n</blockquote>\n<p>I\u2019ve added support for caching metadata to all my layers, using the <code>\\xff/metadataVersion</code> key to decide when they should throw any previous cached data. All my layers (and including the Directory Layer of the .NET binding) use this to cache data that does not change frequently and is expensive to query on every transaction (prefix of directory subspaces, schema and index definitions of a collection of documents, etc\u2026) and everything is based on the <code>\\xff/metadataVersion</code> being changed when an admin updates the schema.</p>\n<p>My main issue is that, whenever I use fdbcli to quickly patch something - and most frequently it consists on performing a large <code>clearrange</code> on the db - it completely breaks that contract and borks all the layers that use caching, because the metadata version was not changed!</p>\n<pre><code class=\"lang-plaintext\">Welcome to the fdbcli. For help, type `help'.\nfdb&gt; writemode on\nfdb&gt; get \\xff/metadataVersion\n`\\xff/metadataVersion' is `\\x00\\x00\\x0f[F\\x93p\\x09\\x00\\x00'\nfdb&gt; clearrange \\x00 \\xFF\nCommitted (16884943757645)\nfdb&gt; get \\xff/metadataVersion\n`\\xff/metadataVersion' is `\\x00\\x00\\x0f[F\\x93p\\x09\\x00\\x00'\nfdb&gt;\n</code></pre>\n<p>In this example, I have completely wiped the database, <em>including the directory layer!</em>, but the metadata version has not changed. Following this command, any layer that had already cached any metadata will blissfully ignore this, and continue writing data into the keyspace, at least for a while, until some tool or command is used to change the value.</p>\n<p><em>This very situation happened to me minutes before a demo, and it took some time for me to figure out what happens (and the fix was simply to bounce all the pods in the kubernetes cluster\u2026 not great).</em></p>\n<p>I think that, by default, any mutation performed by fdbcli, should touch the <code>\\xff/metadataVersion</code> key at commit time. This would ensure that <em>any</em> layer using caching would at reload its cache and see the change.</p>\n<p>If there are situations were the admin using fdbcli does <em>not</em> want this to happen, maybe there could be a different argument to writemode, like <code>writemode unsafe</code>? I think that it should be very clear that randomly setting or clearing ranges in the keyspace, without touche the metadata version can be very dangerous!</p>\n<p>Any opinions on this?</p>\n<p>Anyone wondering why sometimes the caching feature of a layer did not work properly (maybe inducing data corruption), and that would now make the connection with a random \u201cclearrange\u201d issued via fdbcli when troubleshooting ?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2020-04-29T11:39:42.551Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 80,
        "reads": 36,
        "readers_count": 35,
        "score": 407.2,
        "yours": false,
        "topic_id": 2093,
        "topic_slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/deferred-value-checks-as-an-alternative-to-the-metadataversion-key-for-caching-in-layers/2123",
            "internal": true,
            "reflection": true,
            "title": "Deferred value checks as an alternative to the metadataVersion key for caching in layers",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key/2093/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 6856,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2020-04-29T16:52:11.430Z",
        "cooked": "<p><code>fdbcli</code> is an administrative tool - to me, using it to write actually data sounds insane in the first place (sorry for the wording). Do I miss something? Can you provide us with a use-case?</p>\n<p>The only use-case for writing with <code>fdbcli</code> for us has been some very simple testing and demos. Otherwise we would write code to safely change data. <code>fdbcli</code> also doesn\u2019t support any layers and it auto commit by default. Writing a Python scripts if you want to change data is probably a much better way to go anyways\u2026</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2020-04-29T16:52:11.430Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 28,
        "readers_count": 27,
        "score": 10.6,
        "yours": false,
        "topic_id": 2093,
        "topic_slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key/2093/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6857,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2020-04-29T17:24:01.554Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"2\" data-topic=\"2093\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p><code>fdbcli</code> is an administrative tool - to me, using it to write actually data sounds insane in the first place (sorry for the wording). Do I miss something? Can you provide us with a use-case?</p>\n</blockquote>\n</aside>\n<p>The use case is more during development/initial testing or as a last resort to reinstall everything from scratch to respond to unplanned events. We are still in development phase, so we regularly update the schema / change the way data is stored in the database by a layer under active development, and do a lot of <code>clearrange \\x00 \\xFF</code> in the test cluster between updates or when jumping from one branch to another.</p>\n<p>I agree that doing that in production would be unsafe, but it would be especially even more unsafe if you have layers that use metadata caching.</p>\n<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"2\" data-topic=\"2093\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p>The only use-case for writing with <code>fdbcli</code> for us has been some very simple testing and demos.</p>\n</blockquote>\n</aside>\n<p>That\u2019s true, but unfortunately there is a lack of tooling at the moment, and fdbcli is usually the only thing we have. When you are remotely troubleshooting some issue, during an outage or minutes before a demo, inside some docker image, and the only tool you have at hand is fdbcli, it is to forget about all the potential damage. (_minimal docker images, that does not include python nor the python fdb bindings)</p>\n<p>I think that since metadata caching is relatively new, maybe not a lot of layers are using it, and this issue may not be very visible? I\u2019m also probably more impacted because I have implemented metadata caching in the Directory Layer itself (.NET binding) while other bindings have not, and have created a pattern in the .NET binding so that all the layers will directly or indirectly using metadata caching, so <em>any</em> accidental change will completely break everything\u2026</p>\n<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"2\" data-topic=\"2093\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p>Writing a Python scripts if you want to change data is probably a much better way to go anyways\u2026</p>\n</blockquote>\n</aside>\n<p>Regarding python scripts, I think it\u2019s just moving the problem: if the creator of the script is not aware of this issue, and forget to touch the metadata version key, the same thing could happen? Or inversely, if the owner of some layer decide to add metadata caching at some point to speed things up, it could break already written scripts or due to mis-communication between people, nobody would remember to fix the script accordingly.</p>\n<p>\u2013</p>\n<p>I\u2019m not sure exactly sure how to solve this issue globally: there\u2019s nothing that can prevent anyone using fdbcli, a custom python script, or any other tool, to unknowingly break something that relies on the metadataVersion key for caching.</p>\n<p>Current metadata caching solutions relies absolutely on the fact that a single global key <em>will</em> be changed, which may not happen in some situations.</p>\n<p>It looks to me that the only robust way to build caching in complex layers, would be to have a way to ask if a range of keys has been changed since a specific read version, <em>or</em> create a write conflict range - using a read version in the past that would conflict the transaction at commit time. This would be immune to any change made by any tool or binding, while still being mostly efficient (would either induce latency at the start of the transaction, or induce conflicts at commit time). It would also decouple all the layers from a single global key, to one key (or range of keys) specific to that layer.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2020-04-29T17:24:01.554Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 29,
        "readers_count": 28,
        "score": 5.8,
        "yours": false,
        "topic_id": 2093,
        "topic_slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key/2093/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6859,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2020-04-29T19:08:54.236Z",
        "cooked": "<p>But now you\u2019re trying to solve a debugging problem by potentially breaking production behavior for other people (for example one might implement a canary using <code>fdbcli</code> and they certainly wouldn\u2019t want to update the metadata version key).</p>\n<p>I still think that doing this is too much magic. A <code>set</code> in <code>fdbcli</code> is kind of expected to behave like a set <code>Transaction::set</code> - so this is imho not intuitive.</p>\n<p>Also what exactly should fdbcli write into the value? I am not very familiar with that feature (and documentation is basically non-existent) but I thought a user could potentially add custom data there?</p>\n<p>It seems to me the proper solution to your problem is to add the functionality of clearing the database to your application.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2020-04-29T19:08:54.236Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 26,
        "readers_count": 25,
        "score": 10.2,
        "yours": false,
        "topic_id": 2093,
        "topic_slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key/2093/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6862,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2020-04-29T21:15:18.441Z",
        "cooked": "<p>Unless I missed something, this key is supposed to contain a versionstamp that you update via an atomic operation. Since it is a \u201cshared\u201d key that any layer could mutate, any custom data written to this key would probably be clobbered by the next layer at any time.</p>\n<p>Also, true I could write whatever script/tool to avoid creating problems and avoid fdbcli altogether.</p>\n<p>But if caching directory subspaces starts being available in more bindings, and/or people start using more layers that use this key, I don\u2019t know how to prevent <em>others</em> from doing this mistake. Especially since fdbcli is the only tool shipped out of the box and there are multiple forum/SO posts that explicitly point to doing a <code>clearrange</code> in fdbcli to clear the database (as the most common scenario I can think of).</p>\n<p>It seems to me that asking everyone to never make any mistake is not a good strategy. I feel it should be \u201csafe\u201d by default. If, like you say, people who know better will always use custom scripts, then it looks like the only ones who will use fdbcli are newcomers that have not yet read this thread warning about this potential gotcha ! Why not make it so that they don\u2019t learn it the hard way?</p>\n<p>There is already the \u201cwritemode on\u201d command required to make it a little bit harder to set things (it used to not be required a long time ago). I\u2019m not sure what motivated the devs to make mutations opt-in in fdbcli? Would it be possible to make \u201con\u201d change the metadata version key by default?</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2020-04-29T21:15:18.441Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 26,
        "readers_count": 25,
        "score": 5.2,
        "yours": false,
        "topic_id": 2093,
        "topic_slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 15,
          "username": "markus.pilman",
          "name": "Markus Pilman",
          "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key/2093/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7004,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2020-05-14T13:46:08.081Z",
        "cooked": "<p>Well, I ended up scrapping the use of this key for the Directory Layer (and other layers) because this issue and others made me rethink the caching strategy (see <a href=\"https://forums.foundationdb.org/t/deferred-value-checks-as-an-alternative-to-the-metadataversion-key-for-caching-in-layers/2123\" class=\"inline-onebox\">Deferred value checks as an alternative to the metadataVersion key for caching in layers</a>)</p>\n<p>I still think that tools shipped out of the box should be \u201csafe\u201d by default, though.</p>\n<p>I hope this won\u2019t bite too many people in production!</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 6,
        "updated_at": "2020-05-14T13:46:08.081Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 21,
        "readers_count": 20,
        "score": 4.2,
        "yours": false,
        "topic_id": 2093,
        "topic_slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/deferred-value-checks-as-an-alternative-to-the-metadataversion-key-for-caching-in-layers/2123",
            "internal": true,
            "reflection": false,
            "title": "Deferred value checks as an alternative to the metadataVersion key for caching in layers",
            "clicks": 6
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key/2093/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      6855,
      6856,
      6857,
      6859,
      6862,
      7004
    ]
  },
  "timeline_lookup": [
    [
      1,
      2001
    ],
    [
      6,
      1986
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Should mutations performed via fdbcli always update the \\xff/metadataVersion key?",
  "id": 2093,
  "title": "Should mutations performed via fdbcli always update the \\xff/metadataVersion key?",
  "posts_count": 6,
  "created_at": "2020-04-29T11:39:06.923Z",
  "views": 938,
  "reply_count": 2,
  "like_count": 0,
  "last_posted_at": "2020-05-14T13:46:08.081Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
  "category_id": 7,
  "word_count": 1626,
  "deleted_at": null,
  "user_id": 53,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2093",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 6,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "id": 1833,
      "title": "Cannot commit transaction that reads the metadataVersion key after changing it",
      "slug": "cannot-commit-transaction-that-reads-the-metadataversion-key-after-changing-it",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-12-11T22:52:33.816Z",
      "last_posted_at": "2019-12-13T13:23:15.818Z",
      "bumped": true,
      "bumped_at": "2019-12-13T14:11:35.389Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1297,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A new tool for managing layer metadata",
      "id": 1191,
      "title": "A new tool for managing layer metadata",
      "slug": "a-new-tool-for-managing-layer-metadata",
      "posts_count": 11,
      "reply_count": 4,
      "highest_post_number": 11,
      "image_url": null,
      "created_at": "2019-03-02T02:24:25.605Z",
      "last_posted_at": "2019-04-03T23:30:21.306Z",
      "bumped": true,
      "bumped_at": "2019-04-03T23:30:21.306Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 2506,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "How to safely add a metadata caching &ldquo;layer&rdquo; on top of existing layers?",
      "id": 1809,
      "title": "How to safely add a metadata caching \"layer\" on top of existing layers?",
      "slug": "how-to-safely-add-a-metadata-caching-layer-on-top-of-existing-layers",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": "https://global.discourse-cdn.com/foundationdb/optimized/1X/ec81d4eb9908e4a288a66bde6b7efd3728805bef_2_1024x317.png",
      "created_at": "2019-12-04T18:52:44.332Z",
      "last_posted_at": "2019-12-12T19:05:17.074Z",
      "bumped": true,
      "bumped_at": "2019-12-12T19:05:17.074Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1311,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Implementing atomic DDL for SQL schema",
      "id": 678,
      "title": "Implementing atomic DDL for SQL schema",
      "slug": "implementing-atomic-ddl-for-sql-schema",
      "posts_count": 9,
      "reply_count": 2,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-09-03T19:04:26.293Z",
      "last_posted_at": "2018-09-08T15:28:47.996Z",
      "bumped": true,
      "bumped_at": "2018-09-08T15:28:47.996Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2146,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 251,
            "username": "George",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 15,
        "username": "markus.pilman",
        "name": "Markus Pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 53,
      "username": "KrzysFR",
      "name": "Christophe Chevalier",
      "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
    },
    "last_poster": {
      "id": 53,
      "username": "KrzysFR",
      "name": "Christophe Chevalier",
      "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
    },
    "links": [
      {
        "url": "https://forums.foundationdb.org/t/deferred-value-checks-as-an-alternative-to-the-metadataversion-key-for-caching-in-layers/2123",
        "title": "Deferred value checks as an alternative to the metadataVersion key for caching in layers",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 53,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}