{
  "post_stream": {
    "posts": [
      {
        "id": 1135,
        "name": "Viacheslav Biriukov",
        "username": "brk0v",
        "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
        "created_at": "2018-05-16T17:25:44.951Z",
        "cooked": "<p>Hello,</p>\n<p>I want to test my working data set under FoundationDB and stuck with a very slow initial insert speed. I can\u2019t figure out how to make importing faster and what are the best practices here.</p>\n<p>I use several concurrent goroutines for inserting with 5MB batches sizes. But with a 3 node cluster and double ssd configuration it works really slow and time-to-time I loose my cluster according to <code>fdbcli status</code> command:</p>\n<pre><code>fdb&gt; status  details\n\nUsing cluster file `/etc/foundationdb/fdb.cluster'.\n\nCould not communicate with a quorum of coordination servers:\n  192.168.1.1:4500:tls  (unreachable)\n  192.168.1.2:4500:tls  (unreachable)\n  192.168.1.3:4500:tls  (unreachable)\n</code></pre>\n<p>Also I can get:</p>\n<pre><code>Data:\n  Replication health     - (Re)initializing automatic data distribution\n  Moving data            - unknown (initializing)\n  Sum of key-value sizes - unknown\n  Disk space used        - 265.770 GB\n</code></pre>\n<p>Or:</p>\n<pre><code>Data:\n  Replication health     - Healthy (Rebalancing)\n</code></pre>\n<p>So my questions are:</p>\n<ul>\n<li>If I import into one node cluster and then add 2 other nodes, will it be faster? Any thoughts or best practices?</li>\n<li>Maybe there is a way to make data durability less strong? Disable fsync() for an import stage?</li>\n</ul>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-16T17:25:44.951Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1611,
        "reads": 161,
        "readers_count": 160,
        "score": 8082.0,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Viacheslav Biriukov",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/how-to-insert-bulk-data-key-value-pair-at-once-in-c-programming/1293/3",
            "internal": true,
            "reflection": true,
            "title": "How to insert bulk data (Key-Value pair) at once in C programming",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 211,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1137,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-05-16T18:30:49.554Z",
        "cooked": "<p>Are you inserting keys in a sequential order?</p>\n<p>Try randomizing the order to spread the load around the cluster rather than it all hitting one machine at the beginning or end of the key space you\u2019re writing to.</p>\n<p>I don\u2019t think 5mb is optimal and is probably too high. I have never written that much in a transaction before during my testing over the last few weeks.</p>\n<p>The client library is single threaded regardless of how many goroutines you start (AFAIK), so splitting the load across multiple processes should also increase parallelism which is needed to fully use the cluster. This will only work if you\u2019re splitting the keyspace you\u2019re writing to as well.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-16T18:30:49.554Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 6,
        "reads": 152,
        "readers_count": 151,
        "score": 75.2,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/lucene-layer-on-foundationdb/1229",
            "internal": true,
            "reflection": true,
            "title": "Lucene-Layer on FoundationDB",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1140,
        "name": "Viacheslav Biriukov",
        "username": "brk0v",
        "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
        "created_at": "2018-05-16T22:33:34.870Z",
        "cooked": "<blockquote>\n<p>Are you inserting keys in a sequential order?</p>\n</blockquote>\n<p>Yes, I\u2019m doing full scan from another b-tree like db and inserting into FoundationDB.</p>\n<blockquote>\n<p>I don\u2019t think 5mb is optimal and is probably too high. I have never written that much in a transaction before during my testing over the last few weeks.</p>\n<p>The client library is single threaded regardless of how many goroutines you start (AFAIK), so splitting the load across multiple processes should also increase parallelism which is needed to fully use the cluster. This will only work if you\u2019re splitting the keyspace you\u2019re writing to as well.</p>\n</blockquote>\n<p>Thank you for sharing your experience and thoughts. Will try to use several processes and sort out how to randomize keys.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-16T22:33:55.179Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 14,
        "reads": 147,
        "readers_count": 146,
        "score": 119.2,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Viacheslav Biriukov",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 81,
          "username": "ryanworl",
          "name": "Ryan Worl",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 211,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1148,
        "name": "Justin Lowery",
        "username": "umpc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/umpc/{size}/203_2.png",
        "created_at": "2018-05-17T10:27:50.789Z",
        "cooked": "<p>I got the best results in Go by starting a goroutine for each transaction, having them do encoding/packing and then performing the actual transaction, because they do work initially and then block for a while.</p>\n<p>With that, I can insert a rough average of 60k key-values per second or around 10k transactions on a single node cluster.</p>\n<p>Normally in Go, this practice will overload the scheduler and cause a deadlock, so it does seem counterintuitive, though in this case, it is how I could get optimal performance.</p>\n<p>I don\u2019t need to set an upperbound on the number of goroutines though you might want to just in case.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-17T10:27:50.789Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 48,
        "reads": 148,
        "readers_count": 147,
        "score": 274.4,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Justin Lowery",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 211,
          "username": "brk0v",
          "name": "Viacheslav Biriukov",
          "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 230,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1150,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-17T11:40:48.611Z",
        "cooked": "<p>If you are bulk loading data that cannot possibly conflict with any other transactions, you may want to look at setting the <a href=\"https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetReadYourWritesDisable\" rel=\"nofollow noopener\"><code>SetReadYourWritesDisable</code></a> option, and also maybe playing with <a href=\"https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetNextWriteNoWriteConflictRange\" rel=\"nofollow noopener\"><code>SetNextWriteNoWriteConflictRange</code></a></p>\n<p><strong>WARNING:</strong> this may break some ACID guarantees, because these writes will not be seen by concurrent transactions. You may not care if you are restoring/important data while nothing else is running, or if you have another flag somewhere to \u201cpublish\u201d the data for readers.</p>\n<p><strong>Technical details</strong></p>\n<p>Internally, the fdb client creates an implicit write conflict range for all keys that are inserted or mutated. The list of all write conflict ranges is sent to the cluster alongside the mutations when the transaction commits, and the conflict ranges will be checked by the cluster (for write conflicts, they will be stored somewhere to make <em>other</em> transaction conflicts!).</p>\n<p>So if you do a <code>set('Hello', 'World')</code>, the client will send the byte literals <code>'Hello'</code>, <code>'World'</code>, <code>'Hello'</code>, <code>'Hello\\0'</code> over the network. The last two \u201cHello\u201d correspond to the write conflict range (for a single key, the range begins at the key, and ends before the key padded with an extra NUL byte.</p>\n<p>This means that - by default - you can have a ~3x amplification of the size of your keys (in memory, on the network, I\u2019m not sure if this is also stored in the logs?).</p>\n<p>In practice, I did see a small gain of 20-25% when testing with localhost. I don\u2019t have any data on the impact with remote processes.</p>\n<p>By setting <code>NextWriteNoWriteConflictRange</code> before each call to <code>set(..)</code>, the client will not create a write conflict range, and only send <code>'Hello'</code>, and <code>'World'</code> to the proxy, saving some bandwidth.</p>\n<p>If you enable <code>ReadYourWritesDisable</code>, then the client will not have to track your mutations internally, saving some CPU cycles. This is only if you don\u2019t read-back the mutated keys from the same transaction! <em>be careful with this, this can break things!</em></p>\n<p>I <em>think</em> that you could also play with manually adding a giant write conflict range that spans the whole range of keys inserted: The client <em>should</em> merge all the single ranges into a single larger range, and only send that to the cluster. But you will still pay the cost of managing and merging this list.</p>\n<p><strong>Implementation</strong></p>\n<p>You can see how the client formats the transaction commit request in <code>Transaction::commitMutations()</code>:<br>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2458\" target=\"_blank\" rel=\"nofollow noopener\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2458\" target=\"_blank\" rel=\"nofollow noopener\">apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2458</a></h4>\n<pre class=\"onebox\"><code class=\"lang-cpp\"><ol class=\"start lines\" start=\"2448\" style=\"counter-reset: li-counter 2447 ;\">\n<li>\t\t} else {</li>\n<li>\t\t\tif (e.code() != error_code_transaction_too_old &amp;&amp; e.code() != error_code_not_committed &amp;&amp; e.code() != error_code_database_locked)</li>\n<li>\t\t\t\tTraceEvent(SevError, \"tryCommitError\").error(e);</li>\n<li>\t\t\tif (trLogInfo)</li>\n<li>\t\t\t\ttrLogInfo-&gt;addLog(FdbClientLogEvents::EventCommitError(startTime, static_cast&lt;int&gt;(e.code()), req));</li>\n<li>\t\t\tthrow;</li>\n<li>\t\t}</li>\n<li>\t}</li>\n<li>}</li>\n<li>\n</li>\n<li class=\"selected\">Future&lt;Void&gt; Transaction::commitMutations() {</li>\n<li>\tcx-&gt;transactionsCommitStarted++;</li>\n<li>\n</li>\n<li>\tif(options.readOnly)</li>\n<li>\t\treturn transaction_read_only();</li>\n<li>\n</li>\n<li>\ttry {</li>\n<li>\t\t//if this is a read-only transaction return immediately</li>\n<li>\t\tif( !tr.transaction.write_conflict_ranges.size() &amp;&amp; !tr.transaction.mutations.size() ) {</li>\n<li>\t\t\tnumErrors = 0;</li>\n<li>\n</li>\n</ol></code></pre>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n</p>\n<p>You can see how <code>set(...)</code> handles the mutations in <code>Transaction::set()</code> (the <code>addConflictRange</code> argument is controlled by setting <code>SetNextWriteNoWriteConflictRange</code> before every write):<br>\n<aside class=\"onebox githubblob\">\n  <header class=\"source\">\n      <a href=\"https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2060\" target=\"_blank\" rel=\"nofollow noopener\">github.com</a>\n  </header>\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2060\" target=\"_blank\" rel=\"nofollow noopener\">apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2060</a></h4>\n<pre class=\"onebox\"><code class=\"lang-cpp\"><ol class=\"start lines\" start=\"2050\" style=\"counter-reset: li-counter 2049 ;\">\n<li>\n</li>\n<li>void Transaction::makeSelfConflicting() {</li>\n<li>\tBinaryWriter wr(Unversioned());</li>\n<li>\twr.serializeBytes(LiteralStringRef(\"\\xFF/SC/\"));</li>\n<li>\twr &lt;&lt; g_random-&gt;randomUniqueID();</li>\n<li>\tauto r = singleKeyRange( wr.toStringRef(), tr.arena );</li>\n<li>\ttr.transaction.read_conflict_ranges.push_back( tr.arena, r );</li>\n<li>\ttr.transaction.write_conflict_ranges.push_back( tr.arena, r );</li>\n<li>}</li>\n<li>\n</li>\n<li class=\"selected\">void Transaction::set( const KeyRef&amp; key, const ValueRef&amp; value, bool addConflictRange ) {</li>\n<li>\n</li>\n<li>\tif(key.size() &gt; (key.startsWith(systemKeys.begin) ? CLIENT_KNOBS-&gt;SYSTEM_KEY_SIZE_LIMIT : CLIENT_KNOBS-&gt;KEY_SIZE_LIMIT))</li>\n<li>\t\tthrow key_too_large();</li>\n<li>\tif(value.size() &gt; CLIENT_KNOBS-&gt;VALUE_SIZE_LIMIT)</li>\n<li>\t\tthrow value_too_large();</li>\n<li>\n</li>\n<li>\tauto &amp;req = tr;</li>\n<li>\tauto &amp;t = req.transaction;</li>\n<li>\tauto r = singleKeyRange( key, req.arena );</li>\n<li>\tauto v = ValueRef( req.arena, value );</li>\n</ol></code></pre>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-17T11:45:01.564Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 39,
        "reads": 145,
        "readers_count": 144,
        "score": 258.8,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetReadYourWritesDisable",
            "internal": false,
            "reflection": false,
            "title": "fdb - GoDoc",
            "clicks": 60
          },
          {
            "url": "https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetNextWriteNoWriteConflictRange",
            "internal": false,
            "reflection": false,
            "title": "fdb - GoDoc",
            "clicks": 30
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2458",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/NativeAPI.actor.cpp at 520aaf731dc231cc31ad3175263ef6a64303f5bc \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2060",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/NativeAPI.actor.cpp at 520aaf731dc231cc31ad3175263ef6a64303f5bc \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 230,
          "username": "umpc",
          "name": "Justin Lowery",
          "avatar_template": "/user_avatar/forums.foundationdb.org/umpc/{size}/203_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1249,
        "name": "Viacheslav Biriukov",
        "username": "brk0v",
        "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
        "created_at": "2018-05-23T13:20:16.025Z",
        "cooked": "<p>Thank you for answer!</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>If you are bulk loading data that cannot possibly conflict with any other transactions, you may want to look at setting the <a href=\"https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetReadYourWritesDisable\" rel=\"noopener nofollow ugc\"> <code>SetReadYourWritesDisable</code> </a> option, and also maybe playing with <a href=\"https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetNextWriteNoWriteConflictRange\" rel=\"noopener nofollow ugc\"> <code>SetNextWriteNoWriteConflictRange</code> </a></p>\n</blockquote>\n</aside>\n<p>Yes, it\u2019s my case. Going to try these options.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>So if you do a <code>set('Hello', 'World')</code> , the client will send the byte literals <code>'Hello'</code> , <code>'World'</code> , <code>'Hello'</code> , <code>'Hello\\0'</code> over the network. The last two \u201cHello\u201d correspond to the write conflict range (for a single key, the range begins at the key, and ends before the key padded with an extra NUL byte.</p>\n</blockquote>\n</aside>\n<p>Not it\u2019s more clear to me, thanks!</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>By setting <code>NextWriteNoWriteConflictRange</code> before each call to <code>set(..)</code> , the client will not create a write conflict range, and only send <code>'Hello'</code> , and <code>'World'</code> to the proxy, saving some bandwidth.</p>\n</blockquote>\n</aside>\n<p>Before each tx.Set() call, or I can set it for a whole Transaction at the beginning?</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>If you enable <code>ReadYourWritesDisable</code> , then the client will not have to track your mutations internally, saving some CPU cycles. This is only if you don\u2019t read-back the mutated keys from the same transaction! <em>be careful with this, this can break things!</em></p>\n</blockquote>\n</aside>\n<p>Got it.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"5\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>I <em>think</em> that you could also play with manually adding a giant write conflict range that spans the whole range of keys inserted: The client <em>should</em> merge all the single ranges into a single larger range, and only send that to the cluster. But you will still pay the cost of managing and merging this list.</p>\n</blockquote>\n</aside>\n<p>This optimisation is for saving network, memory and maybe logs, right?</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-23T13:20:16.025Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 1,
        "incoming_link_count": 9,
        "reads": 117,
        "readers_count": 116,
        "score": 73.2,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Viacheslav Biriukov",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 211,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1255,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-05-23T15:30:46.321Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"brk0v\" data-post=\"6\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/brk0v/48/173_2.png\" class=\"avatar\"> brk0v:</div>\n<blockquote>\n<p>Before each tx.Set() call, or I can set it for a whole Transaction at the beginning?</p>\n</blockquote>\n</aside>\n<p>Unfortunately, it must be before each call, because set(\u2026) reset the flag every time. This means that you cannot call set(\u2026) on the same transaction object concurrently from multiple threads or they would stomp each other.</p>\n<aside class=\"quote no-group\" data-username=\"brk0v\" data-post=\"6\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/brk0v/48/173_2.png\" class=\"avatar\"> brk0v:</div>\n<blockquote>\n<p>This optimisation is for saving network, memory and maybe logs, right?</p>\n</blockquote>\n</aside>\n<p>All of the above, but don\u2019t expect a huge difference. I would only recommend this for bulk imports, not for regular transactions. Or only for very specific optimizations after having studied all the implications.</p>\n<p>Also, I think that a benchmark using this optimization would be somewhat cheating, because this does not test the database in the normal conditions.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-25T17:46:10.117Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 1,
        "incoming_link_count": 11,
        "reads": 106,
        "readers_count": 105,
        "score": 96.0,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1297,
        "name": "Viacheslav Biriukov",
        "username": "brk0v",
        "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
        "created_at": "2018-05-25T16:09:06.204Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"KrzysFR\" data-post=\"7\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Unfortunately, it must be before each call, because set(\u2026) reset the flag every time. This means that you cannot call set(\u2026) on the transaction transaction concurrently from multiple threads or they would stomp each other.</p>\n</blockquote>\n</aside>\n<p>Interesting. Thank you.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"7\" data-topic=\"422\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Also, I think that a benchmark using this optimization would be somewhat cheating, because this does not test the database in the normal conditions.</p>\n</blockquote>\n</aside>\n<p>Yeah, I understand this. But I need a fast import tool for future performance tests.</p>\n<p>Thank you one more time for helping.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-05-25T16:09:06.204Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 1,
        "incoming_link_count": 16,
        "reads": 103,
        "readers_count": 102,
        "score": 100.4,
        "yours": false,
        "topic_id": 422,
        "topic_slug": "best-practices-for-bulk-load",
        "display_username": "Viacheslav Biriukov",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 211,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/best-practices-for-bulk-load/422/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1135,
      1137,
      1140,
      1148,
      1150,
      1249,
      1255,
      1297
    ]
  },
  "timeline_lookup": [
    [
      1,
      2715
    ],
    [
      5,
      2714
    ],
    [
      6,
      2708
    ],
    [
      8,
      2706
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Best practices for bulk load",
  "id": 422,
  "title": "Best practices for bulk load",
  "posts_count": 8,
  "created_at": "2018-05-16T17:25:44.677Z",
  "views": 4449,
  "reply_count": 6,
  "like_count": 5,
  "last_posted_at": "2018-05-25T16:09:06.204Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "best-practices-for-bulk-load",
  "category_id": 7,
  "word_count": 1573,
  "deleted_at": null,
  "user_id": 211,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_422",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 8,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 1,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "FoundationDB Bulk Loader tool",
      "id": 122,
      "title": "FoundationDB Bulk Loader tool",
      "slug": "foundationdb-bulk-loader-tool",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2018-04-20T12:09:49.894Z",
      "last_posted_at": "2018-04-21T16:09:44.196Z",
      "bumped": true,
      "bumped_at": "2018-04-21T16:09:44.196Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 1279,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 83,
            "username": "fitomad",
            "name": "Adolfo",
            "avatar_template": "/user_avatar/forums.foundationdb.org/fitomad/{size}/57_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 78,
            "username": "pineapple",
            "name": "Brian Haslet",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/7993a0/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Process Classes: Initial vs Production Setup",
      "id": 2752,
      "title": "Process Classes: Initial vs Production Setup",
      "slug": "process-classes-initial-vs-production-setup",
      "posts_count": 3,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2021-06-13T18:11:24.573Z",
      "last_posted_at": "2021-06-14T14:45:46.543Z",
      "bumped": true,
      "bumped_at": "2021-06-14T14:45:46.543Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 1111,
      "category_id": 17,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 950,
            "username": "EugeniuZ",
            "name": "Eugeniu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/eugeniuz/{size}/1106_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 9,
            "username": "mbhaskar",
            "name": "Bhaskar Muppana",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Clj-foundationdb - Clojure bindings over Java wrapper",
      "id": 393,
      "title": "Clj-foundationdb - Clojure bindings over Java wrapper",
      "slug": "clj-foundationdb-clojure-bindings-over-java-wrapper",
      "posts_count": 6,
      "reply_count": 3,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2018-05-10T09:39:50.001Z",
      "last_posted_at": "2018-05-10T16:00:56.888Z",
      "bumped": true,
      "bumped_at": "2018-05-10T16:00:56.888Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 1013,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 231,
            "username": "xtreak",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/x/ad7895/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Bulk insert 2 billion records",
      "id": 1253,
      "title": "Bulk insert 2 billion records",
      "slug": "bulk-insert-2-billion-records",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-03-24T10:38:17.344Z",
      "last_posted_at": "2019-03-25T08:43:22.672Z",
      "bumped": true,
      "bumped_at": "2019-03-25T08:43:22.672Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1306,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 419,
            "username": "doublemax",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8e7dd6/{size}.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 211,
        "username": "brk0v",
        "name": "Viacheslav Biriukov",
        "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 230,
        "username": "umpc",
        "name": "Justin Lowery",
        "avatar_template": "/user_avatar/forums.foundationdb.org/umpc/{size}/203_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 211,
      "username": "brk0v",
      "name": "Viacheslav Biriukov",
      "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png"
    },
    "last_poster": {
      "id": 211,
      "username": "brk0v",
      "name": "Viacheslav Biriukov",
      "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png"
    },
    "links": [
      {
        "url": "https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetReadYourWritesDisable",
        "title": "fdb - GoDoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 60,
        "user_id": 53,
        "domain": "godoc.org",
        "root_domain": "godoc.org"
      },
      {
        "url": "https://godoc.org/github.com/apple/foundationdb/bindings/go/src/fdb#TransactionOptions.SetNextWriteNoWriteConflictRange",
        "title": "fdb - GoDoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 30,
        "user_id": 53,
        "domain": "godoc.org",
        "root_domain": "godoc.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/how-to-insert-bulk-data-key-value-pair-at-once-in-c-programming/1293/3",
        "title": "How to insert bulk data (Key-Value pair) at once in C programming",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 2,
        "user_id": 13,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/520aaf731dc231cc31ad3175263ef6a64303f5bc/fdbclient/NativeAPI.actor.cpp#L2458",
        "title": "foundationdb/NativeAPI.actor.cpp at 520aaf731dc231cc31ad3175263ef6a64303f5bc \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 53,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/lucene-layer-on-foundationdb/1229",
        "title": "Lucene-Layer on FoundationDB",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 540,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      }
    ]
  },
  "bookmarks": []
}