{
  "post_stream": {
    "posts": [
      {
        "id": 3812,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2019-04-02T23:35:15.052Z",
        "cooked": "<p><strong>Note:</strong><br>\n(1) This is a design doc. for an upcoming draft PR on GitHub. After we figure out where we should put the design docs in a collaborative site, we will move this design doc. there.<br>\n(2) This design doc. is a draft version and omitted a lot of details. It will also be revised as we work towards a better implementation.</p>\n<h2><strong>Abstract</strong></h2>\n<p>This is a draft design of a performant restore system that restores backup data to a FDB cluster. The new restore aims to be 2x faster than the current partial-parallel restore system in FDB. The new restore system follows the design idea of Spark system: it has one coordinator (also called master), multiple loaders and multiple appliers. The coordinator assign loader or applier role to fdb process and dispatch workload to them. Loaders parse backup data into mutations from blob storage and send them to appliers. Each applier is responsible for a range of keys, sort the mutations in increasing order of mutation version and apply mutations in order.</p>\n<h2><strong>Problem statement</strong></h2>\n<p>Database administrator should be able to restore the database to a point in time at the event of mis-operation. The restore procedure has the following requirement:<br>\n(1) The restored database must be consistent: each  <em>restored</em> state (i.e., key-value pair) at a version v must match the original state at version v;<br>\n(2) The administrator should be able to restore to any given version after a restorable version v\u2019, the version when the backup procedure takes a snapshot of the entire key space and records all mutations during the snapshot;<br>\n(3) The restore procedure should be performant: the bottleneck should be the FDB cluster\u2019s write throughput instead of the restore procedure\u2019s output throughput to the FDB cluster.</p>\n<h2><strong>Design challenges</strong></h2>\n<p>The consistent requirement raises several challenges to the restore procedure:<br>\n(1) The backup data includes not only the key-value pairs of the database\u2019s state but also the mutations on the database during the backup procedure. To restore to a consistent state, the restore procedure must apply the mutations in the same order when the mutations were taken;<br>\n(2) Mutations include atomic operations, which are not idempotent. The restore procedure must apply each atomic operation exactly once in a distributed system environment where network packet may be delivered more than once and out of order;<br>\n(3) Memory is not large enough to hold all mutations before they are applied. The restore procedure must apply some mutations before all backup data are processed.</p>\n<h2><strong>Design (Sketch)</strong></h2>\n<p><strong>System components.</strong> The fast restore system has 1 master, 1 to p loaders, and 1 to q appliers.</p>\n<p>The master is responsible for the following functionalities: (1) discover the restore process and assign loader or applier role to each restore process; (2) collect backup files information; (3) distribute backup files as workload for loaders; (4) split the key space into q key ranges and assign a key range to a applier; (5) control the progress of loaders and appliers, such as driving them to a new processing phase, synchronizing nodes\u2019 progress.</p>\n<p>A loader is responsible for the following functionalities: (1) parses the range file and log files into a group of mutations at versions; (2) sends parsed mutations to appliers.</p>\n<p>An applier collects mutations whose key belong to the applier\u2019s responsible key range. The applier performs the following functionalities: (1) sorts mutations sent from loader in increasing order of versions; (2) applies mutations to database in increasing order of versions.</p>\n<p><strong>System control flow</strong> . The restore system has five major phases: (1) Setting up roles, which decides which restore process takes which restore role; (2) collecting, which collects the description (e.g., filename, file size) of all backup files from the backup url; (3) sampling, which samples a fraction of backup files to decide how to divide the key space into q ranges for the q appliers based on the access frequency of the key space; (4) loading, which uses p loaders to parse backup files into mutations in parallel and sends mutations to q appliers; (5) applying, which asks q appliers to apply received mutations to database in increasing order of mutations\u2019 versions.</p>\n<p><strong>Setting up roles phase.</strong> Users start multiple fdbserver processes as restore processes. To decide which process is the master, each restore process tries to write its own restore interface into a special system key (say, masterKey). The succeeded one becomes the master, and the rest become the restore workers. Once the master is selected, the workers register their restore interfaces into a system key range (say, workers key range). The master reads all keys in the workers key range and gets the restore interfaces of all workers. Based on the user-defined ratio of loaders over appliers, the master decides the number of loaders and appliers and assign a role to each worker.</p>\n<p><strong>Collecting phase.</strong> The master uses the user-provided url to locate the root folder of the backup data. By listing all files recursively under the root folder, the master collects all backup files, group them to range files and log files based on the filename, and sort the files based on the begin_version of the files.</p>\n<p><strong>Sampling phase.</strong> The following steps are performed in the sampling phase: (1) the master picks an applier as the master-applier which receives the sampled mutations; (2) the master picks a data block in every sample_step, which is sample_rate * total_backup_data_size, and asks an idle loader to parse the data block into a group of mutations. The master repeats this step until all loaders are busy. When all busy loaders become idle again, the master repeats the step (2) ; (3) Once a loader receives the description of the data block (i.e., filename, file offset to read, and data size to read), it parses the data block into mutations, and sends each parsed mutation to the master-applier. The master-applier counts the number of operations for each key in its received mutations; (4) Once the master reaches the end of the last backup file, the master notifies the applier to calculate the key ranges such that the number of sampled operations is evenly distributed in these key ranges; (5) The master notifies each worker the key range of each applier.</p>\n<p><strong>Loading phase.</strong> The following steps are performed in the loading phase: (1) the master picks the unparsed file with the smallest begin_version, and notifies an idle loader to parse the file; (2) the loader decodes data blocks in the file into a set of mutations with versions. For each mutation, the loader uses the mutation\u2019s key to determine which applier should receives the mutation, and the loader sends each mutation and the mutation\u2019s version to an applier; (3) the applier puts each received mutation into a sorted map, which is indexed by mutations\u2019 versions. The value at each version in the map is a vector of mutations happened at that version; (4) we repeats step (1) to (3) until all files are processed.</p>\n<p><strong>Applying phase.</strong> The master notifies all appliers to apply mutations in the increasing order of versions.</p>\n<h2><strong>Discussion of alternative design: Disk-level snapshot based backup and recovery</strong></h2>\n<p>This solution is proposed by Snowflake in <a href=\"https://quip-apple.com/LBS2AFJ4zblE\" rel=\"nofollow noopener\">PR1246</a>.</p>\n<p>This solution has two appealing strengths: (i) backup and recover can be very fast because taking a snapshot on a disk or restoring a disk snapshot is very fast; (ii) implementation does not need to consider the data format stored on a disk, which significantly simply the restore process.</p>\n<p>However, this solution also has some obvious limitations, as acknowledge by the author: (i) it cannot be used in a system whose disk does not support snapshot. This limits its applicability; (ii) it can restore the system only to the version when the snapshot is taken. There exists an arbitrary time interval between two snapshots. So it cannot support point-in-time restore; (iii) it does not support FDB system that has multiple files (e.g., tLog files and storage server files) on the same disk.</p>\n<p>If a FDB system fells in any of the following category, it should consider the proposed restore system in this article:<br>\n(1) it runs on disks without snapshot capability; (2) it requires point-in-time restore; (3) a disk may have more than one FDB files.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2019-04-02T23:35:15.052Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 398,
        "reads": 138,
        "readers_count": 137,
        "score": 2027.6,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://quip-apple.com/LBS2AFJ4zblE",
            "internal": false,
            "reflection": false,
            "clicks": 28
          },
          {
            "url": "https://forums.foundationdb.org/t/fdb-6-3-performant-restore/2137",
            "internal": true,
            "reflection": true,
            "title": "FDB 6.3 performant restore",
            "clicks": 5
          },
          {
            "url": "https://forums.foundationdb.org/t/lots-of-questions-about-backup-and-restore/2888",
            "internal": true,
            "reflection": true,
            "title": "Lots of questions about backup and restore",
            "clicks": 1
          },
          {
            "url": "https://forums.foundationdb.org/t/fdb-6-3-performant-restore/2137/5",
            "internal": true,
            "reflection": true,
            "title": "FDB 6.3 performant restore",
            "clicks": 0
          },
          {
            "url": "https://forums.foundationdb.org/t/lots-of-questions-about-backup-and-restore/2888/2",
            "internal": true,
            "reflection": true,
            "title": "Lots of questions about backup and restore",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 3815,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-04-03T08:33:05.637Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>(2) Mutations include atomic operations, which are not idempotent. The restore procedure must apply each atomic operation exactly once in a distributed system environment where network packet may be delivered more than once and out of order;</p>\n</blockquote>\n</aside>\n<p>Did I somehow miss the explanation of how the proposed design accomplishes that?  Overall, you don\u2019t seem to discuss the failure cases much, which I\u2019d be interested in hearing about.</p>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>Users start multiple fdbserver processes as restore processes.</p>\n</blockquote>\n</aside>\n<p>Do you mean as <code>--role restore</code> or <code>--class restore</code> ?  Starting multiple fdbserver processes on different machines feels like a difficult tool to use.  Would it be better to just recruit these as roles on stateless processes?</p>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>(3) sampling, which samples a fraction of backup files to decide how to divide the key space into q ranges for the q appliers based on the access frequency of the key space</p>\n</blockquote>\n</aside>\n<p>Does this effectively start to degrade into having a single applier at a time if the workload against the database largely writes sequentially increasing keys (like versionstamps)?  (This might tie into my confusion about are there multiple iterations of this process.)</p>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>The master notifies all appliers to apply mutations in the increasing order of versions.</p>\n</blockquote>\n</aside>\n<p>\u2026 and then we repeat the loading and applying phase with the next set of mutation files?  I\u2019m missing how this doesn\u2019t end up with each applier having the entire copy of its part of the key range in memory at once.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>(iii) snapshot does not support FDB system that has multiple files (e.g., tLog files and storage server files) on the same disk</p>\n</blockquote>\n</aside>\n<p>It does support it, it just complicates the design.  It required being able to temporarily disable popping of transaction logs, but works after doing that.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2019-04-03T09:04:58.322Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 115,
        "readers_count": 114,
        "score": 28.0,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3820,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2019-04-03T16:27:18.380Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>(2) Mutations include atomic operations, which are not idempotent. The restore procedure must apply each atomic operation exactly once in a distributed system environment where network packet may be delivered more than once and out of order;</p>\n</blockquote>\n</aside>\n<p>Did I somehow miss the explanation of how the proposed design accomplishes that?  Overall, you don\u2019t seem to discuss the failure cases much, which I\u2019d be interested in hearing about.</p>\n</blockquote>\n</aside>\n<p>No you didn\u2019t miss it. I didn\u2019t write how to handle the fault yet.<br>\nRight now, we only handle network package delay (or temporary loss). We haven\u2019t considered the node failure yet. We want to get a non-fault-tolerant working version first to see how good performance we can have, before we make it more complex.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>Users start multiple fdbserver processes as restore processes.</p>\n</blockquote>\n</aside>\n<p>Do you mean as <code>--role restore</code> or <code>--class restore</code> ?  Starting multiple fdbserver processes on different machines feels like a difficult tool to use.  Would it be better to just recruit these as roles on stateless processes?</p>\n</blockquote>\n</aside>\n<p>It\u2019s --class restore. The restore system is separate from the DB cluster on purpose. The restore system can be viewed as a crazy client that dump data to the cluster at full speed.</p>\n<p>For the purpose of reducing the workload of cluster controller, we do not make it a process monitored by cluster controller.</p>\n<p>In the future, we may consider put the master restore process monitored by cluster controller so that it is easier to handle node failure.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>(3) sampling, which samples a fraction of backup files to decide how to divide the key space into q ranges for the q appliers based on the access frequency of the key space</p>\n</blockquote>\n</aside>\n<p>Does this effectively start to degrade into having a single applier at a time if the workload against the database largely writes sequentially increasing keys (like versionstamps)?  (This might tie into my confusion about are there multiple iterations of this process.)</p>\n</blockquote>\n</aside>\n<p>The current version cannot parallelize the operations on the same key onto multiple appliers. This is a possibly valid point for future improvement. The benefit will depend on how frequent a single key can be written. It is better to make the decision after we have a working version and have some performance profiling on real data.</p>\n<p>The sampling has multiple iterations. I didn\u2019t mention that we actually process backup data in version batches. Each version batch is the backup data in a version range. In each version batch, we sample the data.</p>\n<p>The concern I have is not we don\u2019t sample the workload for multiple iteration but the opposite. Sampling takes time. The performance overhead of multiple sampling may be more than the performance benefits. Again, this needs some performance profiling on real data.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>The master notifies all appliers to apply mutations in the increasing order of versions.</p>\n</blockquote>\n</aside>\n<p>\u2026 and then we repeat the loading and applying phase with the next set of mutation files?  I\u2019m missing how this doesn\u2019t end up with each applier having the entire copy of its part of the key range in memory at once.</p>\n</blockquote>\n</aside>\n<p>Once an applier applies the mutations to DB, it can delete its cached mutations.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<aside class=\"quote no-group quote-modified\" data-username=\"mengxu\" data-post=\"1\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>(iii) snapshot does not support FDB system that has multiple files (e.g., tLog files and storage server files) on the same disk</p>\n</blockquote>\n</aside>\n<p>It does support it, it just complicates the design.  It required being able to temporarily disable popping of transaction logs, but works after doing that.</p>\n</blockquote>\n</aside>\n<p>Yes, when the disk-snapshot based restore supports the multiple files on the same disk, I will update my document.</p>\n<p>The discussion of alternative design is more for people to choose which solution to use that defending which one is better.  <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2019-04-03T16:27:18.380Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 2,
        "incoming_link_count": 4,
        "reads": 104,
        "readers_count": 103,
        "score": 55.8,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7603,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-15T12:41:04.799Z",
        "cooked": "<p>Hi, all!</p>\n<p>Now the restore process is too slow but supports point-in-time restore.</p>\n<blockquote>\n<p>New restore aims to be 2x faster than the current partial-parallel restore system in FDB<br>\nBut 2x faster than now is still too slow.</p>\n</blockquote>\n<p>So I think on faster alternatives.</p>\n<ol>\n<li>If the disk is without snapshot capability then there are some software solutions that bring such capability. For example, lvm or disk vitrualisation.</li>\n</ol>\n<p>Unfortunally all snapshot solutions require a separate disk area for data differences. Because fdb rewrites all data blocks often, the size of this area becomes quasi-equal to the snapshot size. If we need several snapshots (ex. dayly), the additional disk space becomes too large.</p>\n<ol start=\"2\">\n<li>\n<p>Disk-level snapshot is not the only possible solution. We can use file-level backups and restore that are a slower than snapshots but are still much faster than fdbrestore. For example, copying files or tar-gz them.</p>\n</li>\n<li>\n<p>If we have a 24*365 working production fdb cluster with constant data changes then it is difficult to make a consistent copy of all files from all nodes at the same time moment. But the most common case that there is a dr cluster applying mutations from the production cluster. My idea is to pause dr cluster, make a consistent copy from it (using any technique including snapshot or filesystem copy) and resume the dr cluster.</p>\n</li>\n</ol>\n<p>I\u2019ve made some performance tests with fdb built from master.</p>\n<p>I have a three-node fdb cluster with</p>\n<pre><code class=\"lang-auto\">  Sum of key-value sizes - 20.440 GB\n  Disk space used        - 51.472 GB\n</code></pre>\n<p>I\u2019ll call this cluster as <code>primary</code>.<br>\nI have a three-node dr fdb cluster.<br>\nI have another three nodes where I want to restore the copy of primary cluster. I\u2019ll call them as <code>clone</code> cluster.<br>\nEach of 9 nodes has one fdbserver process and two backup agent running.</p>\n<p>The all 9 nodes in my test are virtual machines on the same host machine with the single nvme ssd drive. The backup storage was on an external disk array attached by nfs.</p>\n<p>I compare the time of backing up and restoring to <code>clone</code> of different ways. Reading and writing to the single physical ssd was the bottleneck in all test cases.</p>\n<ol>\n<li>File level backup\u2019restore<br>\n1.1. Backup made from dr</li>\n</ol>\n<pre><code class=\"lang-auto\">fdbdr pause -s fdb-primary.cluster -d fdb-dr.cluster\nansible -i inventories/osamarin3-virt/hosts fdb_dr -m shell -a \"systemctl stop foundationdb\"\nansible -i inventories/osamarin3-virt/hosts fdb_dr -m shell -a 'tar -cv --use-compress-program=pigz -f /mnt/backup/fdb/cold/9/`hostname`.tar.gz -C /fdb/data .'\nansible -i inventories/osamarin3-virt/hosts fdb_dr -m shell -a \"systemctl start foundationdb\"\nfdbdr resume -s fdb-primary.cluster -d fdb-dr.cluster\n</code></pre>\n<p>took 4 minutes 40 seconds.The total backup size (three tar.gz files) is about 12.2 Gb</p>\n<p>1.2. Restore (I need to create symlinks for the backup files to match clone hostnames)</p>\n<pre><code class=\"lang-auto\">ansible -i inventories/osamarin3-virt/hosts fdb_clone -m shell -a \"systemctl stop foundationdb\"\nansible -i inventories/osamarin3-virt/hosts fdb_clone -m shell -a 'rm -rf /fdb/data/*'\nansible -i inventories/osamarin3-virt/hosts fdb_clone -m shell -a 'tar -xv --use-compress-program=pigz -f /mnt/backup/fdb/cold/9/`hostname`.tar.gz -C /fdb/data'\nansible -i inventories/osamarin3-virt/hosts fdb_clone -m shell -a \"systemctl start foundationdb\"\nfdbdr abort -s fdb-primary.cluster -d fdb-clone.cluster --dstonly\n</code></pre>\n<p>took 5 minutes 44 seconds</p>\n<ol start=\"2\">\n<li>fdb-level backup/restore<br>\n2.1. backup</li>\n</ol>\n<pre><code class=\"lang-auto\">fdbbackup start -C fdb-primary.cluster -d file:///mnt/synology/nfs/backup/fdb/hot/9 -w\n</code></pre>\n<p>took 6 minutes 35 seconds. The total size of backup is about 20.4 Gb.</p>\n<p>2.2 restore</p>\n<pre><code class=\"lang-auto\">fdbrestore start --dest_cluster_file fdb-clone.cluster -r file:///mnt/synology/nfs/backup/fdb/hot/9/backup-2020-07-14-20-20-58.753553 -w\n</code></pre>\n<p>I have an issue <a href=\"https://github.com/apple/foundationdb/issues/3522\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">'Corrupted backup data' in fdbrestore \u00b7 Issue #3522 \u00b7 apple/foundationdb \u00b7 GitHub</a> when restoring so I could not mesure the exact restoring time but I can approximate it: the total bachup size is 21900 blocks, the restoring speed is about 500 blocks per minute, so restoring all 21900 blocks should tale about 44 minutes.</p>\n<p><strong>44 minutes is much longer than 5 minutes 14 seconds.</strong></p>\n<p>So my proposal is</p>\n<ol>\n<li>Make a contionous backup (we need only mutation log part of them)</li>\n<li>Make restore points by any fast way (snapshots, tar-gz etc) in a periodic manner (daily, weekly and so on)</li>\n<li>When we need a point-to-time recovery<br>\n3.1. Make fast restoring from the latest restore point before the point-to-time.<br>\n3.2. Apply mutations made between the restore point and the required point-to time from the continous backup.<br>\nThe restore time will be much shorter than apllying all the kv-pairs as mutations.</li>\n</ol>\n<p>For implementing this idea fdbrestore should have, as the minimum, a special oftion --fromversion for forcing it not to restore kvs from backup but only to apply the mutation log from the specified version. As the maximum, it should determine the destination database as a copy of dr cluster on a certain version and only to apply logs from this version.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T18:08:00.222Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 9,
        "reads": 79,
        "readers_count": 78,
        "score": 65.8,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 3,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/3522",
            "internal": false,
            "reflection": false,
            "title": "'Corrupted backup data' in fdbrestore \u00b7 Issue #3522 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7605,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-07-15T17:19:37.033Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/osamarin\">@osamarin</a> Thank you very much for the interesting idea and detailed description!</p>\n<p>I will comment from the high-level to details:</p>\n<ol>\n<li>\n<p>Your proposal makes sense. I had the similar thought and had an issue here: <a href=\"https://github.com/apple/foundationdb/issues/2127\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/issues/2127</a>. I guess we are on the same page. <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=9\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"></p>\n</li>\n<li>\n<p>I think the DR-based backup approach is an interesting idea and I personally like it (at least it is a good direction to explore).</p>\n</li>\n</ol>\n<p>However, it does have a major concern:<br>\nNow FDB has multi-region configuration (also called fearless configuration), which no long has a separate FDB cluster in the remote DC. The multi-region configuration will become the recommended configuration for high-availability service.<br>\nThe DR-based backup and restore solution won\u2019t work out of box for the multi-region configuration.</p>\n<ol start=\"3\">\n<li>About the speed of file-based backup and restore in your evaluation, it is 12.2 Gb backup data, and restore time is 5m44s. So the restore speed is 12.2 * 1024MB/ 5m44s ~= 36MB/s. The speed itself is still slow for a big backup size and the current fdb restore can reaches up to 100MB/s (IIRC).</li>\n</ol>\n<p>Intuitively, I think the file-based restore should be much faster than the measured speed. Did you happen to test where the time is spent and if it is scalable to make the proposed restore faster?</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T17:19:37.033Z",
        "reply_count": 3,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 71,
        "readers_count": 70,
        "score": 49.2,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/2127",
            "internal": false,
            "reflection": false,
            "title": "Hybrid Restore: Combine disk-snapshot restore and point-in-time restore for a super fast point-in-time restore \u00b7 Issue #2127 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 8
          },
          {
            "url": "https://forums.foundationdb.org/t/working-high-avalable-solutions-with-two-datacenters/2380",
            "internal": true,
            "reflection": true,
            "title": "Working High Avalable Solutions with Two Datacenters",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 711,
          "username": "osamarin",
          "name": "Oleg Samarin",
          "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7606,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-15T18:01:55.933Z",
        "cooked": "<blockquote>\n<ol start=\"3\">\n<li>About the speed of file-based backup and restore in your evaluation, it is 12.2 Gb backup data, and restore time is 5m44s. So the restore speed is 12.2 * 1024MB/ 5m44s ~= 36MB/s. The speed itself is still slow for a big backup size and the current fdb restore can reaches up to 100MB/s (IIRC). Intuitively, I think the file-based restore should be much faster than the measured speed. Did you happen to test where the time is spent and if it is scalable to make the proposed restore faster?</li>\n</ol>\n</blockquote>\n<p>12.2 gb is the summary size of three tar.gz files. The summary size of uncompressed fdb files is about 80 Gb.</p>\n<ol>\n<li>The all nine nodes has a common storage - a single ssd (all of them a virtual machines running on my workstation). Writing speed to it was ~ 550Mb/s and it limitted the restore speed. If all the nodes had separate ssds then the solution will be faster. Unfortunally I do not have sufficient number of separate ssds for testing scalability.</li>\n<li>The size of files of the nodes are not equal. So restoring of two nodes finished earlier than of the last one. 5m 44s is the restore time of the largest node</li>\n</ol>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T18:01:55.933Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 66,
        "readers_count": 65,
        "score": 33.2,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 337,
          "username": "mengxu",
          "name": "Meng Xu",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7607,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-15T18:06:12.664Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"5\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>Now FDB has multi-region configuration (also called fearless configuration), which no long has a separate FDB cluster in the remote DC. The multi-region configuration will become the recommended configuration for high-availability service.</p>\n</blockquote>\n</aside>\n<p>Does it mean that the configuration with a separate DR cluster will not more supported?</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T18:06:12.664Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 62,
        "readers_count": 61,
        "score": 17.4,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7608,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-07-15T19:58:09.450Z",
        "cooked": "<p>The speed for 80GB (I assume it is GBytes instead of Gbits) is better than the current restore for sure.</p>\n<p>Copying files should be much faster than writing transactions.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T19:58:09.450Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 58,
        "readers_count": 57,
        "score": 16.6,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 711,
          "username": "osamarin",
          "name": "Oleg Samarin",
          "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7609,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-07-15T20:01:13.014Z",
        "cooked": "<p>I assume DR will still be supported. I don\u2019t know if it will be supported indefinitely.</p>\n<p>We can run multi-region configuration with DR for the same primary cluster. The cost is that supporting DR will need to write mutations to system keyspace, which means 2x write amplification.</p>\n<p>So theoretically, for a multi-region cluster, you can still use a temporary DR site to backup the database at the cost of reduced throughput (say with 30% write bandwidth overhead). The caveat is how fast can the DR backup finish without affecting the cluster\u2019s normal traffic, especially when a big cluster is running at the edge of its read and write throughput.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T20:07:07.731Z",
        "reply_count": 2,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 60,
        "readers_count": 59,
        "score": 22.0,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 711,
          "username": "osamarin",
          "name": "Oleg Samarin",
          "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7610,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-15T20:20:45.432Z",
        "cooked": "<p>I used decompressing with <code>tar x</code> instead of copying. Decompressing is slower but otherwise the single network interface of my workstation becomes a bottleneck.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-15T20:20:45.432Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 57,
        "readers_count": 56,
        "score": 11.4,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 337,
          "username": "mengxu",
          "name": "Meng Xu",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7611,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-15T20:24:30.200Z",
        "cooked": "<blockquote>\n<p>So theoretically, for a multi-region cluster, you can still use a temporary DR site to backup the database at the cost of reduced throughput (say with 30% write bandwidth overhead). The caveat is how fast can the DR backup finish without affecting the cluster\u2019s normal traffic, especially when a big cluster is running at the edge of its read and write throughput.</p>\n</blockquote>\n<p>If the backups are done in a regular basis then this DR must be permanent rather temporary.</p>\n<p>Another restriction of DR-based backups that the number of nodes and the distribution of fdbserver processes should be same on the primary and DR clusters: otherwise it is impossible to do a file-based or a snapshor-based restore.</p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-16T09:32:13.022Z",
        "reply_count": 0,
        "reply_to_post_number": 9,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 62,
        "readers_count": 61,
        "score": 12.4,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 337,
          "username": "mengxu",
          "name": "Meng Xu",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7615,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-16T09:28:09.379Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"mengxu\" data-post=\"9\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/mengxu/48/893_2.png\" class=\"avatar\"> mengxu:</div>\n<blockquote>\n<p>We can run multi-region configuration with DR for the same primary cluster. The cost is that supporting DR will need to write mutations to system keyspace, which means 2x write amplification.</p>\n</blockquote>\n</aside>\n<p>But making a continous backup also requires to write mutations to system keyspace. Now these two mutation streams are separate that brings a significant overhead.</p>\n<p>According to <a href=\"https://github.com/alexmiller-apple/foundationdb/blob/1547cbcef3e2916d742d37f17641eb84871ee51c/design/tlog-spilling.md.html\" rel=\"noopener nofollow ugc\">https://github.com/alexmiller-apple/foundationdb/blob/1547cbcef3e2916d742d37f17641eb84871ee51c/design/tlog-spilling.md.html</a><br>\nthere is a capability of writing transaction log only once and retriving it for all destinations by index.<br>\nIt woud be great if supporting backup and dr could use the same way without writing mutations to the system keyspace.</p>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-16T09:28:09.379Z",
        "reply_count": 1,
        "reply_to_post_number": 9,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 59,
        "readers_count": 58,
        "score": 16.8,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/alexmiller-apple/foundationdb/blob/1547cbcef3e2916d742d37f17641eb84871ee51c/design/tlog-spilling.md.html",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/tlog-spilling.md.html at 1547cbcef3e2916d742d37f17641eb84871ee51c \u00b7 alexmiller-apple/foundationdb \u00b7 GitHub",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7616,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2020-07-16T09:49:19.475Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"osamarin\" data-post=\"12\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/osamarin/48/905_2.png\" class=\"avatar\"> osamarin:</div>\n<blockquote>\n<p>But making a continous backup also requires to write mutations to system keyspace. Now these two mutation streams are separate that brings a significant overhead.</p>\n</blockquote>\n</aside>\n<p>Actually, since FDB 5.2 the streams are no longer separate.  Saved mutation streams for Backup and DR operations that cover the same key ranges are only stored once and are gradually cleaned up as all consumers are finished with the data.</p>\n<aside class=\"quote no-group\" data-username=\"osamarin\" data-post=\"12\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/osamarin/48/905_2.png\" class=\"avatar\"> osamarin:</div>\n<blockquote>\n<p>According to <a href=\"https://github.com/alexmiller-apple/foundationdb/blob/1547cbcef3e2916d742d37f17641eb84871ee51c/design/tlog-spilling.md.html\">https://github.com/alexmiller-apple/foundationdb/blob/1547cbcef3e2916d742d37f17641eb84871ee51c/design/tlog-spilling.md.html</a><br>\nthere is a capability of writing transaction log only once and retriving it for all destinations by index.<br>\nIt woud be great if supporting backup and dr could use the same way without writing mutations to the system keyspace.</p>\n</blockquote>\n</aside>\n<p>I have some good news and bad news.  The good news is that FDB 6.3 has a new feature for Backup which uses the log system to write the mutation stream to the backup, skipping the temporary copy staged in the database.  The bad news is this feature has not been added to DR, so running a new-style backup and a DR will still incur the same overhead of saving the mutation log to the database (same overhead since the two streams were already shared, not duplicated).</p>",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-16T09:49:19.475Z",
        "reply_count": 1,
        "reply_to_post_number": 12,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 56,
        "readers_count": 55,
        "score": 26.2,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7617,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-16T12:53:01.104Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"SteavedHams\" data-post=\"13\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/steavedhams/48/18_2.png\" class=\"avatar\"> SteavedHams:</div>\n<blockquote>\n<p>FDB 6.3 has a new feature for Backup which uses the log system to write the mutation stream to the backup, skipping the temporary copy staged in the database. The bad news is this feature has not been added to DR,</p>\n</blockquote>\n</aside>\n<p>Why not to add this feature to dr?</p>",
        "post_number": 14,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-16T12:53:01.104Z",
        "reply_count": 2,
        "reply_to_post_number": 13,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 51,
        "readers_count": 50,
        "score": 35.2,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/14",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7619,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-07-16T14:47:47.210Z",
        "cooked": "<p>This is a great idea! I think it is possible.</p>\n<p>I will follow up internally to see if we can make this as a release feature.</p>",
        "post_number": 15,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-16T14:48:35.536Z",
        "reply_count": 0,
        "reply_to_post_number": 14,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 52,
        "readers_count": 51,
        "score": 10.4,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 711,
          "username": "osamarin",
          "name": "Oleg Samarin",
          "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/15",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7625,
        "name": "Jingyu Zhou",
        "username": "jzhou",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
        "created_at": "2020-07-19T00:00:12.151Z",
        "cooked": "<p>Adding this feature to DR needs a significant amount of work, including</p>\n<ul>\n<li>the capability of one FDB cluster writes to another (so that mutations are not saved in the source cluster, only temporarily stored in transaction logs);</li>\n<li>combining multiple mutation streams into one at the destination cluster so that mutations are applied in version order. This step is actually more complicated, since the merging of mutation streams needs to handle duplicated and overlapped version ranges.</li>\n</ul>\n<p>I am not saying we shouldn\u2019t do it. It\u2019s something not on the priority list yet.</p>",
        "post_number": 16,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-19T00:00:12.151Z",
        "reply_count": 1,
        "reply_to_post_number": 14,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 52,
        "readers_count": 51,
        "score": 15.4,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Jingyu Zhou",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 711,
          "username": "osamarin",
          "name": "Oleg Samarin",
          "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": true,
        "admin": true,
        "staff": true,
        "user_id": 454,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/16",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7674,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-07-30T09:57:01.667Z",
        "cooked": "<blockquote>\n<p>the capability of one FDB cluster writes to another (so that mutations are not saved in the source cluster, only temporarily stored in transaction logs);</p>\n</blockquote>\n<p>How does fdbbackup work? Does fdb cluster writes mutations to backup itself or writes them to backup agents?</p>\n<p>I\u2019d implement a \u2018pull\u2019 approach, where dr_agent would read the mutation log from the source transaction log instead of a system keyspace.</p>\n<blockquote>\n<p>combining multiple mutation streams into one at the destination cluster so that mutations are applied in version order. This step is actually more complicated, since the merging of mutation streams needs to handle duplicated and overlapped version ranges</p>\n</blockquote>\n<p>I think this is a good task for dr_agent: to pull transaction log from all source nodes and combine them.</p>",
        "post_number": 17,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-30T09:57:01.667Z",
        "reply_count": 2,
        "reply_to_post_number": 16,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 47,
        "readers_count": 46,
        "score": 24.4,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 454,
          "username": "jzhou",
          "name": "Jingyu Zhou",
          "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/17",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7676,
        "name": "Meng Xu",
        "username": "mengxu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "created_at": "2020-07-30T16:15:45.620Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"osamarin\" data-post=\"17\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/osamarin/48/905_2.png\" class=\"avatar\"> osamarin:</div>\n<blockquote>\n<blockquote>\n<p>the capability of one FDB cluster writes to another (so that mutations are not saved in the source cluster, only temporarily stored in transaction logs);</p>\n</blockquote>\n<p>How does fdbbackup work? Does fdb cluster writes mutations to backup itself or writes them to backup agents?</p>\n<p>I\u2019d implement a \u2018pull\u2019 approach, where dr_agent would read the mutation log from the source transaction log instead of a system keyspace.</p>\n</blockquote>\n</aside>\n<p>This is a great suggestion! FDB did have this feature coming soon. The implementation is done in 6.3 and our evaluation shows it works as expected.  The details are in this issue: <a href=\"https://github.com/apple/foundationdb/issues/1003\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Backup the mutation log using the log router tags \u00b7 Issue #1003 \u00b7 apple/foundationdb \u00b7 GitHub</a>.</p>",
        "post_number": 18,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-07-30T16:15:45.620Z",
        "reply_count": 0,
        "reply_to_post_number": 17,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 53,
        "readers_count": 52,
        "score": 10.6,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Meng Xu",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/1003",
            "internal": false,
            "reflection": false,
            "title": "Backup the mutation log using the log router tags \u00b7 Issue #1003 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 7
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 337,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/18",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7773,
        "name": "Jingyu Zhou",
        "username": "jzhou",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
        "created_at": "2020-08-13T17:00:22.621Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"osamarin\" data-post=\"17\" data-topic=\"1277\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/osamarin/48/905_2.png\" class=\"avatar\"> osamarin:</div>\n<blockquote>\n<p>How does fdbbackup work? Does fdb cluster writes mutations to backup itself or writes them to backup agents?</p>\n<p>I\u2019d implement a \u2018pull\u2019 approach, where dr_agent would read the mutation log from the source transaction log instead of a system keyspace.</p>\n</blockquote>\n</aside>\n<p><code>fdbbackup</code> tells the cluster to perform backup. Then the cluster starts recording mutations and write to its key space; and backup agents starts taking key space snapshots and copy recorded mutations to blob (e.g., S3).</p>\n<p>Note the <code>pull</code> approach is breaking abstraction \u2013 transaction logs are never intended to be exposed to clients. By design, clients only talk to Proxies and Storage Servers for writes and reads, respectively. There are technical reasons as well:</p>\n<ul>\n<li>Mutations are tagged with their destinations by Proxies. Transaction logs do the bookkeeping of which tags are processed (popped) at what version. So pulling means assigning tags external to the cluster, which brings the question of how to maintain it.</li>\n<li>If external tags are introduced, the immediate question is what if external processes are not pulling data faster enough, which can cause transaction logs spill to disks. This may eventually cause transaction logs to fill up disks and have performance impact.</li>\n</ul>",
        "post_number": 19,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-08-13T17:00:22.621Z",
        "reply_count": 1,
        "reply_to_post_number": 17,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 58,
        "readers_count": 57,
        "score": 41.6,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Jingyu Zhou",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": true,
        "admin": true,
        "staff": true,
        "user_id": 454,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/19",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 7785,
        "name": "Oleg Samarin",
        "username": "osamarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "created_at": "2020-08-14T19:23:12.686Z",
        "cooked": "<blockquote>\n<p><code>fdbbackup</code>  tells the cluster to perform backup. Then the cluster starts recording mutations and write to its key space; and backup agents starts taking key space snapshots and copy recorded mutations to blob (e.g., S3).</p>\n</blockquote>\n<p>Are you talking about writing to the system keyspace? But it contradicts the following statement:</p>\n<blockquote>\n<p>FDB 6.3 has a new feature for Backup which uses the log system to write the mutation stream to the backup, skipping the temporary copy staged in the database</p>\n</blockquote>\n<p>Does it mean that backup agent reads transaction logs from the log system instead of reading temporary storage in the system keyspace,</p>",
        "post_number": 20,
        "post_type": 1,
        "posts_count": 24,
        "updated_at": "2020-08-14T19:23:12.686Z",
        "reply_count": 1,
        "reply_to_post_number": 19,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 55,
        "readers_count": 54,
        "score": 16.0,
        "yours": false,
        "topic_id": 1277,
        "topic_slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
        "display_username": "Oleg Samarin",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 454,
          "username": "jzhou",
          "name": "Jingyu Zhou",
          "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 711,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/design-and-implementation-of-a-performant-restore-system-in-fdb/1277/20",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      3812,
      3815,
      3820,
      7603,
      7605,
      7606,
      7607,
      7608,
      7609,
      7610,
      7611,
      7615,
      7616,
      7617,
      7619,
      7625,
      7674,
      7676,
      7773,
      7785,
      7786,
      7787,
      7789,
      8848
    ]
  },
  "timeline_lookup": [
    [
      1,
      2394
    ],
    [
      3,
      2393
    ],
    [
      4,
      1924
    ],
    [
      14,
      1923
    ],
    [
      16,
      1921
    ],
    [
      17,
      1910
    ],
    [
      18,
      1909
    ],
    [
      19,
      1895
    ],
    [
      20,
      1894
    ],
    [
      23,
      1893
    ],
    [
      24,
      1778
    ]
  ],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Design and Implementation of a Performant Restore System in FDB",
  "id": 1277,
  "title": "Design and Implementation of a Performant Restore System in FDB",
  "posts_count": 24,
  "created_at": "2019-04-02T23:35:14.946Z",
  "views": 3171,
  "reply_count": 21,
  "like_count": 4,
  "last_posted_at": "2020-12-08T12:50:31.915Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "design-and-implementation-of-a-performant-restore-system-in-fdb",
  "category_id": 5,
  "word_count": 5531,
  "deleted_at": null,
  "user_id": 337,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1277",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 24,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 5,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": null,
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 711,
        "username": "osamarin",
        "name": "Oleg Samarin",
        "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
        "post_count": 11,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 337,
        "username": "mengxu",
        "name": "Meng Xu",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
        "post_count": 7,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 454,
        "username": "jzhou",
        "name": "Jingyu Zhou",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "moderator": true,
        "trust_level": 2
      },
      {
        "id": 7,
        "username": "SteavedHams",
        "name": "Steve Atherton",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 337,
      "username": "mengxu",
      "name": "Meng Xu",
      "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png"
    },
    "last_poster": {
      "id": 711,
      "username": "osamarin",
      "name": "Oleg Samarin",
      "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png"
    },
    "links": [
      {
        "url": "https://quip-apple.com/LBS2AFJ4zblE",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 28,
        "user_id": 337,
        "domain": "quip-apple.com",
        "root_domain": "quip-apple.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/issues/2127",
        "title": "Hybrid Restore: Combine disk-snapshot restore and point-in-time restore for a super fast point-in-time restore \u00b7 Issue #2127 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 8,
        "user_id": 337,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/issues/1003",
        "title": "Backup the mutation log using the log router tags \u00b7 Issue #1003 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 337,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/fdb-6-3-performant-restore/2137",
        "title": "FDB 6.3 performant restore",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 5,
        "user_id": 645,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://forums.foundationdb.org/t/lots-of-questions-about-backup-and-restore/2888",
        "title": "Lots of questions about backup and restore",
        "internal": true,
        "attachment": false,
        "reflection": true,
        "clicks": 1,
        "user_id": 602,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/alexmiller-apple/foundationdb/blob/1547cbcef3e2916d742d37f17641eb84871ee51c/design/tlog-spilling.md.html",
        "title": "foundationdb/tlog-spilling.md.html at 1547cbcef3e2916d742d37f17641eb84871ee51c \u00b7 alexmiller-apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 711,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}