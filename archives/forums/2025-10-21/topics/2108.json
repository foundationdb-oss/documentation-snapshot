{
  "post_stream": {
    "posts": [
      {
        "id": 6929,
        "name": "Jay Kominek",
        "username": "jkominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "created_at": "2020-05-07T20:05:59.216Z",
        "cooked": "<p>It appears that turning on client profiling (<code>profile client set 0.5 10MB</code> for instance) on the cluster causes the client library to leak memory. valgrind doesn\u2019t seem to catch it, so I ended up using heaptrack. I\u2019m afraid I don\u2019t have time to understand the arena allocation stuff well enough to figure out what\u2019s actually happening, and submit an issue/PR. Here\u2019s a stack trace down to the culprit allocation:</p>\n<pre><code>__clone in ?? (libc.so.6)\nstart_thread in ?? (libpthread.so.0)\nfdb_run_network in fdb_c.cpp:124 (libfdb_c.so)\nMultiVersionApi::runNetwork() in MultiVersionTransaction.actor.cpp:1182 (libfdb_c.so)\nThreadSafeApi::runNetwork() in ThreadSafeTransaction.actor.cpp:367 (libfdb_c.so)\nrunNetwork() in NativeAPI.actor.cpp:1019 (libfdb_c.so)\nN2::Net2::run() in Net2.actor.cpp:1115 (libfdb_c.so)\nN2::PromiseTask::operator()() in Net2.actor.cpp:843 (libfdb_c.so)\nvoid Promise&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) const in flow.h:779 (libfdb_c.so)\nvoid SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) in flow.h:447 (libfdb_c.so)\nActorCallback&lt;(anonymous namespace)::DeliverActor, 0, Void&gt;::fire(Void const&amp;) in flow.h:999 (libfdb_c.so)\n(anonymous namespace)::DeliverActorState&lt;(anonymous namespace)::DeliverActor&gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::DeliverActor, 0, Void&gt;*, Void) in FlowTransport.actor.g.cpp:2452 (libfdb_c.so)\n(anonymous namespace)::DeliverActorState&lt;(anonymous namespace)::DeliverActor&gt;::a_body1when1(Void const&amp;, int) in FlowTransport.actor.g.cpp:2437 (libfdb_c.so)\n(anonymous namespace)::DeliverActorState&lt;(anonymous namespace)::DeliverActor&gt;::a_body1cont2(Void const&amp;, int) in FlowTransport.actor.g.cpp:2431 (libfdb_c.so)\n(anonymous namespace)::DeliverActorState&lt;(anonymous namespace)::DeliverActor&gt;::a_body1cont1(int) in FlowTransport.actor.cpp:654 (libfdb_c.so)\nNetSAV&lt;CommitID&gt;::receive(ArenaObjectReader&amp;) in fdbrpc.h:111 (libfdb_c.so)\nvoid SAV&lt;CommitID&gt;::sendAndDelPromiseRef&lt;CommitID&amp;&gt;(CommitID&amp;) in flow.h:472 (libfdb_c.so)\nSAV&lt;CommitID&gt;::finishSendAndDelPromiseRef() in flow.h:479 (libfdb_c.so)\nActorCallback&lt;(anonymous namespace)::WaitValueOrSignalActor&lt;CommitID&gt;, 0, CommitID&gt;::fire(CommitID const&amp;) in flow.h:999 (libfdb_c.so)\n(anonymous namespace)::WaitValueOrSignalActorState&lt;CommitID, (anonymous namespace)::WaitValueOrSignalActor&lt;CommitID&gt; &gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::WaitValueOrSignalActor&lt;CommitID&gt;, 0, CommitID&gt;*, CommitID) in genericactors.actor.g.h:2548 (libfdb_c.so)\n(anonymous namespace)::WaitValueOrSignalActorState&lt;CommitID, (anonymous namespace)::WaitValueOrSignalActor&lt;CommitID&gt; &gt;::a_body1loopBody1when1(CommitID const&amp;, int) in genericactors.actor.g.h:2519 (libfdb_c.so)\nSAV&lt;ErrorOr&lt;CommitID&gt; &gt;::finishSendAndDelPromiseRef() in flow.h:479 (libfdb_c.so)\nActorCallback&lt;(anonymous namespace)::MakeRequestActor&lt;CommitTransactionRequest&gt;, 1, ErrorOr&lt;CommitID&gt; &gt;::fire(ErrorOr&lt;CommitID&gt; const&amp;) in flow.h:999 (libfdb_c.so)\n(anonymous namespace)::MakeRequestActorState&lt;CommitTransactionRequest, (anonymous namespace)::MakeRequestActor&lt;CommitTransactionRequest&gt; &gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::MakeRequestActor&lt;CommitTransactionRequest&gt;, 1, ErrorOr&lt;CommitID&gt; &gt;*, ErrorOr&lt;CommitID&gt;) in LoadBalance.actor.g.h:333 (libfdb_c.so)\n(anonymous namespace)::MakeRequestActorState&lt;CommitTransactionRequest, (anonymous namespace)::MakeRequestActor&lt;CommitTransactionRequest&gt; &gt;::a_body1cont1when1(ErrorOr&lt;CommitID&gt; const&amp;, int) in LoadBalance.actor.g.h:318 (libfdb_c.so)\n(anonymous namespace)::MakeRequestActorState&lt;CommitTransactionRequest, (anonymous namespace)::MakeRequestActor&lt;CommitTransactionRequest&gt; &gt;::a_body1cont3(ErrorOr&lt;CommitID&gt; const&amp;, int) in LoadBalance.actor.g.h:300 (libfdb_c.so)\nSAV&lt;Optional&lt;CommitID&gt; &gt;::finishSendAndDelPromiseRef() in flow.h:479 (libfdb_c.so)\nActorCallback&lt;(anonymous namespace)::ErrorOrActor&lt;Optional&lt;CommitID&gt; &gt;, 0, Optional&lt;CommitID&gt; &gt;::fire(Optional&lt;CommitID&gt; const&amp;) in flow.h:999 (libfdb_c.so)\n(anonymous namespace)::ErrorOrActorState&lt;Optional&lt;CommitID&gt;, (anonymous namespace)::ErrorOrActor&lt;Optional&lt;CommitID&gt; &gt; &gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::ErrorOrActor&lt;Optional&lt;CommitID&gt; &gt;, 0, Optional&lt;CommitID&gt; &gt;*, Optional&lt;CommitID&gt;) in genericactors.actor.g.h:838 (libfdb_c.so)\n(anonymous namespace)::ErrorOrActorState&lt;Optional&lt;CommitID&gt;, (anonymous namespace)::ErrorOrActor&lt;Optional&lt;CommitID&gt; &gt; &gt;::a_body1when1(Optional&lt;CommitID&gt; const&amp;, int) in genericactors.actor.g.h:823 (libfdb_c.so)\n(anonymous namespace)::ErrorOrActorState&lt;Optional&lt;CommitID&gt;, (anonymous namespace)::ErrorOrActor&lt;Optional&lt;CommitID&gt; &gt; &gt;::a_body1cont2(Optional&lt;CommitID&gt; const&amp;, int) in genericactors.actor.g.h:816 (libfdb_c.so)\nSAV&lt;ErrorOr&lt;Optional&lt;CommitID&gt; &gt; &gt;::finishSendAndDelPromiseRef() in flow.h:479 (libfdb_c.so)\nActorCallback&lt;(anonymous namespace)::LoadBalanceActor&lt;MasterProxyInterface, CommitTransactionRequest, MasterProxyInterface&gt;, 6, ErrorOr&lt;Optional&lt;CommitID&gt; &gt; &gt;::fire(ErrorOr&lt;Optional&lt;CommitID&gt; &gt; const&amp;) in flow.h:999 (libfdb_c.so)\n(anonymous namespace)::LoadBalanceActorState&lt;MasterProxyInterface, CommitTransactionRequest, MasterProxyInterface, (anonymous namespace)::LoadBalanceActor&lt;MasterProxyInterface, CommitTransactionRequest, MasterProxyInterface&gt; &gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::LoadBalanceActor&lt;MasterProxyInterface, CommitTransactionRequest, MasterProxyInterface&gt;, 6, ErrorOr&lt;Optional&lt;CommitID&gt; &gt; &gt;*, ErrorOr&lt;Optional&lt;CommitID&gt; &gt;) in LoadBalance.actor.g.h:1518 (libfdb_c.so)\n(anonymous namespace)::LoadBalanceActorState&lt;MasterProxyInterface, CommitTransactionRequest, MasterProxyInterface, (anonymous namespace)::LoadBalanceActor&lt;MasterProxyInterface, CommitTransactionRequest, MasterProxyInterface&gt; &gt;::a_body1loopBody1loopBody2when1(ErrorOr&lt;Optional&lt;CommitID&gt; &gt; const&amp;, int) in LoadBalance.actor.g.h:1475 (libfdb_c.so)\nSAV&lt;CommitID&gt;::finishSendAndDelPromiseRef() in flow.h:479 (libfdb_c.so)\nActorCallback&lt;(anonymous namespace)::TryCommitActor, 2, CommitID&gt;::fire(CommitID const&amp;) in flow.h:999 (libfdb_c.so)\n(anonymous namespace)::TryCommitActorState&lt;(anonymous namespace)::TryCommitActor&gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::TryCommitActor, 2, CommitID&gt;*, CommitID) in NativeAPI.actor.g.cpp:12805 (libfdb_c.so)\n(anonymous namespace)::TryCommitActorState&lt;(anonymous namespace)::TryCommitActor&gt;::a_body1cont3when2(CommitID const&amp;, int) in NativeAPI.actor.cpp:2748 (libfdb_c.so)\nvoid TransactionLogInfo::addLog&lt;FdbClientLogEvents::EventCommit&gt;(FdbClientLogEvents::EventCommit const&amp;) in NativeAPI.actor.h:169 (libfdb_c.so)\nBinaryWriter::WRITER&amp; operator&lt;&lt; &lt;BinaryWriter, FdbClientLogEvents::EventCommit&gt;(BinaryWriter&amp;, FdbClientLogEvents::EventCommit const&amp;) in serialize.h:75 (libfdb_c.so)\nvoid save&lt;BinaryWriter, FdbClientLogEvents::EventCommit&gt;(BinaryWriter&amp;, FdbClientLogEvents::EventCommit const&amp;) in serialize.h:113 (libfdb_c.so)\nSerializer&lt;BinaryWriter, FdbClientLogEvents::EventCommit, void&gt;::serialize(BinaryWriter&amp;, FdbClientLogEvents::EventCommit&amp;) in serialize.h:106 (libfdb_c.so)\nBinaryWriter&amp; FdbClientLogEvents::EventCommit::serialize&lt;BinaryWriter&gt;(BinaryWriter&amp;) in ClientLogEvents.h:171 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, double, int, int, CommitTransactionRef, Arena&gt;(BinaryWriter&amp;, double const&amp;, int const&amp;, int const&amp;, CommitTransactionRef const&amp;, Arena const&amp;) in serialize.h:91 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, int, int, CommitTransactionRef, Arena&gt;(BinaryWriter&amp;, int const&amp;, int const&amp;, CommitTransactionRef const&amp;, Arena const&amp;) in serialize.h:91 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, int, CommitTransactionRef, Arena&gt;(BinaryWriter&amp;, int const&amp;, CommitTransactionRef const&amp;, Arena const&amp;) in serialize.h:91 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, CommitTransactionRef, Arena&gt;(BinaryWriter&amp;, CommitTransactionRef const&amp;, Arena const&amp;) in serialize.h:90 (libfdb_c.so)\nvoid save&lt;BinaryWriter, CommitTransactionRef&gt;(BinaryWriter&amp;, CommitTransactionRef const&amp;) in serialize.h:113 (libfdb_c.so)\nSerializer&lt;BinaryWriter, CommitTransactionRef, void&gt;::serialize(BinaryWriter&amp;, CommitTransactionRef&amp;) in serialize.h:106 (libfdb_c.so)\nvoid CommitTransactionRef::serialize&lt;BinaryWriter&gt;(BinaryWriter&amp;) in CommitTransaction.h:151 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, VectorRef&lt;KeyRangeRef, (VecSerStrategy)0&gt;, VectorRef&lt;KeyRangeRef, (VecSerStrategy)0&gt;, VectorRef&lt;MutationRef, (VecSerStrategy)0&gt;, long&gt;(BinaryWriter&amp;, VectorRef&lt;KeyRangeRef, (VecSerStrategy)0&gt; const&amp;, VectorRef&lt;KeyRangeRef, (VecSerStrategy)0&gt; const&amp;, VectorRef&lt;MutationRef, (VecSerStrategy)0&gt; const&amp;, long const&amp;) in serialize.h:91 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, VectorRef&lt;KeyRangeRef, (VecSerStrategy)0&gt;, VectorRef&lt;MutationRef, (VecSerStrategy)0&gt;, long&gt;(BinaryWriter&amp;, VectorRef&lt;KeyRangeRef, (VecSerStrategy)0&gt; const&amp;, VectorRef&lt;MutationRef, (VecSerStrategy)0&gt; const&amp;, long const&amp;) in serialize.h:91 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, VectorRef&lt;MutationRef, (VecSerStrategy)0&gt;, long&gt;(BinaryWriter&amp;, VectorRef&lt;MutationRef, (VecSerStrategy)0&gt; const&amp;, long const&amp;) in serialize.h:91 (libfdb_c.so)\nBinaryWriter::WRITER&amp; serializer&lt;BinaryWriter, long&gt;(BinaryWriter&amp;, long const&amp;) in serialize.h:90 (libfdb_c.so)\nvoid save&lt;BinaryWriter, long&gt;(BinaryWriter&amp;, long const&amp;) in serialize.h:113 (libfdb_c.so)\nSerializer&lt;BinaryWriter, long, void&gt;::serialize(BinaryWriter&amp;, long&amp;) in serialize.h:146 (libfdb_c.so)\nvoid BinaryWriter::serializeBinaryItem&lt;long&gt;(long const&amp;) in serialize.h:335 (libfdb_c.so)\nBinaryWriter::writeBytes(int) in serialize.h:460 (libfdb_c.so)\noperator new[](unsigned long, Arena&amp;) in Arena.h:198 (libfdb_c.so)\nArenaBlock::allocate(Reference&lt;ArenaBlock&gt;&amp;, int) in Arena.cpp:110 (libfdb_c.so)\nArenaBlock::create(int, Reference&lt;ArenaBlock&gt;&amp;) in Arena.cpp:182 (libfdb_c.so)\n</code></pre>\n<p>The line numbers are from a local build of commit 0a46c6276efc90ef425666e381d1e118c115854c which is currently tagged 6.2.19.</p>\n<p>Here\u2019s the trivial C program I used to get the trace. It just sets a large value over and over in 64 threads. get\u2019ing a tiny key in a single thread leaks memory as well, just slower. And I wanted to collect a trace where the program had eaten &gt;8GiB of memory. <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=9\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>\n<pre><code>#define FDB_API_VERSION 610\n#include &lt;foundationdb/fdb_c.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdlib.h&gt;\n\nFDBDatabase *database;\n\nvoid *forever(void *x)\n{\n  char junk[8192];\n  while(1) {\n    FDBTransaction *t;\n    if(fdb_database_create_transaction(database, &amp;t)) {\n      printf(\"failed to make transaction. whatever.\\n\");\n      continue;\n    }\n    // generate senseless traffic\n    fdb_transaction_set(t, x, 1, junk, 8192);\n    FDBFuture *f = fdb_transaction_commit(t);\n    fdb_future_block_until_ready(f);\n    fdb_future_destroy(f);\n    fdb_transaction_destroy(t);\n  }\n}\n\nint main(int argc, char *argv[])\n{\n  pthread_t network_thread;\n  fdb_select_api_version(610);\n  fdb_setup_network();\n  // if anyone stumbles across this, this line isn't technically ok\n  pthread_create(&amp;network_thread, NULL, fdb_run_network, NULL);\n  fdb_create_database(NULL, &amp;database);\n\n  for(int i=0; i&lt;64; i++) {\n    pthread_t loop;\n    uint8_t *v = malloc(1);\n    *v = i;\n    pthread_create(&amp;loop, NULL, forever, v);\n  }\n\n  while(1)\n    sleep(60);\n}\n</code></pre>\n<p>Heap track is available at <a href=\"https://github.com/KDE/heaptrack;\" rel=\"nofollow noopener\">https://github.com/KDE/heaptrack;</a> there\u2019s pacakges for it in Ubuntu 18 at least. The above program will eat memory faster than I can send you my trace, but if anyone wants it, just get my email address from my github profile and hit me up. It is just under 10MiB in size.</p>\n<p>FWIW, this was originally spotted in a Go program using that language\u2019s library. I boiled it down to this tiny C thing in hopes that valgrind would have a chance on something that was pure C.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-05-07T20:13:31.194Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 49,
        "reads": 33,
        "readers_count": 32,
        "score": 253.6,
        "yours": false,
        "topic_id": 2108,
        "topic_slug": "memory-leak-in-client-profiling-code",
        "display_username": "Jay Kominek",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/KDE/heaptrack;",
            "internal": false,
            "reflection": false,
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 173,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/memory-leak-in-client-profiling-code/2108/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 6930,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-05-07T20:47:13.036Z",
        "cooked": "<p>It\u2019s possible that this isn\u2019t a memory leak in the sense of \u201clost a pointer to a heap allocation and now I can\u2019t free it\u201d which might be why valgrind isn\u2019t finding it. I\u2019m not super familiar with this code but it looks like information about every commit is getting stored in an in-memory data structure that gets flushed by default every 10 seconds. It\u2019s plausible that committing might outpace flushing, and this thing could just be growing unboundedly?</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-05-07T20:47:13.036Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 31,
        "readers_count": 30,
        "score": 11.2,
        "yours": false,
        "topic_id": 2108,
        "topic_slug": "memory-leak-in-client-profiling-code",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/memory-leak-in-client-profiling-code/2108/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6931,
        "name": "Jay Kominek",
        "username": "jkominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "created_at": "2020-05-07T21:00:27.691Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"2\" data-topic=\"2108\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>It\u2019s plausible that committing might outpace flushing, and this thing could just be growing unboundedly?</p>\n</blockquote>\n</aside>\n<p>Could be. With the code that caused this problem for me originally, I was able to stop all FDB activity, while keeping the process alive. I never observed the memory usage going back down over timescales of, say, 5 to 30 minutes.</p>\n<p>For what it is worth, heaptrack does seem to believe that the memory is leaked. I\u2019ve got no idea how its definition differs from valgrind\u2019s.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-05-07T21:00:27.691Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 31,
        "readers_count": 30,
        "score": 16.2,
        "yours": false,
        "topic_id": 2108,
        "topic_slug": "memory-leak-in-client-profiling-code",
        "display_username": "Jay Kominek",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 173,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/memory-leak-in-client-profiling-code/2108/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6932,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2020-05-07T21:02:52.654Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jkominek\" data-post=\"3\" data-topic=\"2108\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jkominek/48/140_2.png\" class=\"avatar\"> jkominek:</div>\n<blockquote>\n<p>I never observed the memory usage going back down over timescales of, say, 5 to 30 minutes.</p>\n</blockquote>\n</aside>\n<p>Ok, sounds like it\u2019s not just a queue growing unboundedly then</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-05-07T21:02:52.654Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 29,
        "readers_count": 28,
        "score": 10.8,
        "yours": false,
        "topic_id": 2108,
        "topic_slug": "memory-leak-in-client-profiling-code",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/memory-leak-in-client-profiling-code/2108/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 6935,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2020-05-08T23:21:40.526Z",
        "cooked": "<p>If the memory is being allocated from fast allocator pools, it would never go back down since we never return it. Not sure if that\u2019s the case here or not, though. The stack trace above suggests that particular allocation isn\u2019t coming from fast allocator, in which case it should be freed once we are done with it.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2020-05-08T23:21:40.526Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 28,
        "readers_count": 27,
        "score": 10.6,
        "yours": false,
        "topic_id": 2108,
        "topic_slug": "memory-leak-in-client-profiling-code",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 14,
          "username": "andrew.noyes",
          "name": "",
          "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/memory-leak-in-client-profiling-code/2108/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      6929,
      6930,
      6931,
      6932,
      6935
    ]
  },
  "timeline_lookup": [
    [
      1,
      1993
    ],
    [
      5,
      1992
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Memory leak in client profiling code",
  "id": 2108,
  "title": "Memory leak in client profiling code",
  "posts_count": 5,
  "created_at": "2020-05-07T20:05:59.143Z",
  "views": 726,
  "reply_count": 3,
  "like_count": 0,
  "last_posted_at": "2020-05-08T23:21:40.526Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "memory-leak-in-client-profiling-code",
  "category_id": 8,
  "word_count": 1649,
  "deleted_at": null,
  "user_id": 173,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2108",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 5,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Memory leak in C API?",
      "id": 554,
      "title": "Memory leak in C API?",
      "slug": "memory-leak-in-c-api",
      "posts_count": 5,
      "reply_count": 1,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-07-09T10:54:23.376Z",
      "last_posted_at": "2018-07-10T12:55:14.679Z",
      "bumped": true,
      "bumped_at": "2018-07-10T12:55:14.679Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1120,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 319,
            "username": "kirilltitov",
            "name": "Kirill Titov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/kirilltitov/{size}/328_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Foundationdb 6.2 - fdbserver going out of memory",
      "id": 2080,
      "title": "Foundationdb 6.2 - fdbserver going out of memory",
      "slug": "foundationdb-6-2-fdbserver-going-out-of-memory",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2020-04-20T14:55:39.274Z",
      "last_posted_at": "2020-04-23T04:34:49.858Z",
      "bumped": true,
      "bumped_at": "2020-04-23T04:34:49.858Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1037,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 714,
            "username": "tuk",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/b5ac83/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Memory leak in C client-lib - when a timeout() is set on transaction options?",
      "id": 1710,
      "title": "Memory leak in C client-lib - when a timeout() is set on transaction options?",
      "slug": "memory-leak-in-c-client-lib-when-a-timeout-is-set-on-transaction-options",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": "https://global.discourse-cdn.com/foundationdb/original/1X/b55b0e80a4a533be00e26d30756cb9b860ad76b1.png",
      "created_at": "2019-11-01T07:02:02.599Z",
      "last_posted_at": "2019-11-09T04:04:11.942Z",
      "bumped": true,
      "bumped_at": "2019-11-09T10:56:45.389Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 865,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Memory leak in Java client bindings when server request tracing is enabled?",
      "id": 3611,
      "title": "Memory leak in Java client bindings when server request tracing is enabled?",
      "slug": "memory-leak-in-java-client-bindings-when-server-request-tracing-is-enabled",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2022-10-20T13:32:54.137Z",
      "last_posted_at": "2022-10-20T13:32:54.207Z",
      "bumped": true,
      "bumped_at": "2022-10-20T13:34:13.637Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings",
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 401,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 1142,
            "username": "danm",
            "name": "Dan Meyers",
            "avatar_template": "/user_avatar/forums.foundationdb.org/danm/{size}/1393_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Fdb C client library memory allocations",
      "id": 1199,
      "title": "Fdb C client library memory allocations",
      "slug": "fdb-c-client-library-memory-allocations",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-03-06T03:07:33.409Z",
      "last_posted_at": "2019-03-14T00:14:17.371Z",
      "bumped": true,
      "bumped_at": "2019-03-14T00:14:17.371Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1392,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 38,
            "username": "panghy",
            "name": "Clement Pang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 14,
        "username": "andrew.noyes",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 173,
        "username": "jkominek",
        "name": "Jay Kominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 173,
      "username": "jkominek",
      "name": "Jay Kominek",
      "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png"
    },
    "last_poster": {
      "id": 12,
      "username": "ajbeamon",
      "name": "A.J. Beamon",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
    },
    "links": [
      {
        "url": "https://github.com/KDE/heaptrack;",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 173,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}