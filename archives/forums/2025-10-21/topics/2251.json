{
  "post_stream": {
    "posts": [
      {
        "id": 7627,
        "name": "Rahul Roy",
        "username": "rahul-nitkkr",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
        "created_at": "2020-07-20T10:31:13.050Z",
        "cooked": "<p>I have been trying to use the <code>FDBRecordStoreStateCache</code> to increase the write throughput of our processes writing into the cluster.<br>\nMy initial attempt doesn\u2019t seem to be working as i see the <code>RecordStore</code> creation from a context performs in a very non-deterministic way.<br>\nThis is how i initialize the Database -</p>\n<pre><code class=\"lang-auto\">try {\n\n            FDBDatabase fdb = FDBDatabaseFactory.instance().getDatabase(config.getClusterFilePath());\n            fdb.setTrackLastSeenVersion(true);\n            fdb.setStoreStateCache(fdb.getStoreStateCache());\n\n            return fdb;\n        } catch (FDBException e) {\n            throw new ConnectionException(String.format(\"Unable to connect to FDB database due to %s\", e.getMessage()), e);\n        }\n</code></pre>\n<p>Correspondingly , every time i open a transaction against the database i use the below to get a record store against a context -</p>\n<pre><code class=\"lang-auto\">FDBRecordStore store =  FDBRecordStore.newBuilder()\n                .setContext(context)\n                .setKeySpacePath(getKeyspacePath(\n                        \"Some String identifier\"\n                        , \"Some Store Name\"\n                        , \"Some Env Value\"))\n                .setMetaDataProvider(cachedRecordStoreMetadata) // \"we use local metadata, which doesn't evolve\" \n                .setStoreStateCache(getDatabase().getStoreStateCache())\n                .setIndexMaintenanceFilter(indexMaintainer.NO_NULLS_FILTERED)\n                .createOrOpen();\n</code></pre>\n<p>I\u2019m serially opening transactions and writing a batch of 1000 records which correspond to ~1-2Mb of data per transaction.<br>\ni profiled the total time it took to create a record store and varies between <b> ~50ms to &gt; 2000ms </b>.</p>\n<p>Few Questions -</p>\n<ol>\n<li>I don\u2019t think this is the correct way to use the <code>RecordStoreStateCache</code>. Are there any examples of how to use this correctly ?</li>\n<li>In what cases should i expect to see a performance with this Cache ? I read in the API docs that we need to enable <code>WeakReadSemantics</code>, though couldn\u2019t get a way to enable that through any API.<br>\nDoes opening multiple parallel transactions benefit here ?</li>\n</ol>\n<p>Would be great if anyone can help with the right approach here ?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 2,
        "updated_at": "2020-07-20T10:31:13.050Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 155,
        "reads": 46,
        "readers_count": 45,
        "score": 784.2,
        "yours": false,
        "topic_id": 2251,
        "topic_slug": "correct-usage-of-the-fdbrecordstorestatecache",
        "display_username": "Rahul Roy",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 712,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/correct-usage-of-the-fdbrecordstorestatecache/2251/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 7628,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-07-20T16:14:09.072Z",
        "cooked": "<p>Hm, it does seem like we could do with some better documentation around this feature, though tuning for write throughput can be a difficult task that may or may not improve with store state caching. I\u2019ve tried to go over both some of the questions you had about write throughput and also some questions about store state caching, but feel free to ask about details that are unclear, etc.</p>\n<aside class=\"quote no-group\" data-username=\"rahul-nitkkr\" data-post=\"1\" data-topic=\"2251\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rahul-nitkkr/48/754_2.png\" class=\"avatar\"> rahul-nitkkr:</div>\n<blockquote>\n<p>I\u2019m serially opening transactions and writing a batch of 1000 records which correspond to ~1-2Mb of data per transaction.</p>\n</blockquote>\n</aside>\n<p>It\u2019s possibly worth noting that FDB performance degrades with larger transactions, which could be partially the problem. It may be worth experimenting with different transaction sizes, but I think we generally encourage transactions to stay under 1 MB.</p>\n<p>See: <a href=\"https://apple.github.io/foundationdb/known-limitations.html#large-transactions\" class=\"inline-onebox\">Known Limitations \u2014 FoundationDB 7.1</a></p>\n<aside class=\"quote no-group\" data-username=\"rahul-nitkkr\" data-post=\"1\" data-topic=\"2251\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rahul-nitkkr/48/754_2.png\" class=\"avatar\"> rahul-nitkkr:</div>\n<blockquote>\n<p>i profiled the total time it took to create a record store and varies between <strong>~50ms to &gt; 2000ms</strong> .</p>\n</blockquote>\n</aside>\n<p>Hmm, interesting. There a couple of things that happen when a store is opened, but the primary things that happen are (1) the transaction determines the current \u201cread version\u201d (essentially \u201cread timestamp\u201d) from the database and (2) it reads a few keys from the database and potentially writes some to initialize the store. In that first step, the database can sometimes elect to inject latency as a rate limiting tactic. I believe there are also a few issues that can sometimes give that request weird tail latencies prior to FDB 6.3 (which is not yet fully released), so that might be part of it. Caching the store state allows you to skip the <em>second</em> step, so it\u2019s possible that caching the store state won\u2019t help with the spread that much (though that second step can cause hot spotting in the database that can cause the cluster to decide to rate limit, which may be part of the problem).</p>\n<aside class=\"quote no-group\" data-username=\"rahul-nitkkr\" data-post=\"1\" data-topic=\"2251\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rahul-nitkkr/48/754_2.png\" class=\"avatar\"> rahul-nitkkr:</div>\n<blockquote>\n<p>I don\u2019t think this is the correct way to use the <code>RecordStoreStateCache</code> . Are there any examples of how to use this correctly ?</p>\n</blockquote>\n</aside>\n<p>The main thing to do is to provide the database with a store state cache instance. Something like:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">FDBDatabase fdb = FDBDatabaseFactory.instance().getDatabase(config.getClusterFilePath());\nMetaDataVersionStampStoreStateCacheFactory factory = MetaDataVersionStampStoreStateCacheFactory.newInstance();\nfdb.setStoreStateCache(factory.getCache(fdb));\n</code></pre>\n<p>You can also set the cache on an individual record store rather than the database, if you prefer. If you <em>don\u2019t</em> set it on a record store, it will inherit it from the database. Depending on which implementation of the <code>FDBRecordStoreStateCache</code> you use, there may be additional steps to get the state to actually be cached. In particular:</p>\n<ol>\n<li>The <a href=\"https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/MetaDataVersionStampStoreStateCache.html\">MetaDataVersionStampStoreStateCache</a> requires you to configure any individual record stores by enabling caching on that store by calling <code>recordStore.setStateCacheable(true)</code> (as an administrative action outside of a normal request flow). There are a few more details in the linked Javadoc. Once this has been enabled, all subsequent reads to that store will be able to use the cached store state for all store openings. This store state does <em>not</em> require using <code>WeakReadSemantics</code>.</li>\n<li>The <a href=\"https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/ReadVersionRecordStoreStateCache.html\">ReadVersionRecordStoreStateCache</a> is really only useful if you\u2019re using <code>WeakReadSemantics</code>, though it doesn\u2019t require any other configuration, but it will only be able to use a cached store state if the same record store is opened multiple times with the same read version (e.g., a store is opened in transaction1, it\u2019s state is cached, and then the cached read from version from the first transaction is used with transaction2 and the store is opened again). As a result, it\u2019s a lot less versatile, but the fact that it just works for all stores without additional administrative transactions is kind of nice. I\u2019ll discuss <code>WeakReadSemantics</code> below.</li>\n</ol>\n<p>By default, the store is configured with an implementation of the store state cache that always forwards along to the database (i.e., it does no caching), which is I think what\u2019s going on in the code samples you\u2019ve included in your question.</p>\n<p>You can also provide an <code>FDBRecordStoreStateCacheFactory</code> to the <code>FDBDatabaseFactory</code> instead of providing a <code>FDBRecordStoreStateCache</code> to the <code>FDBDatabase</code>:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">FDBDatabaseFactory.instances().setStoreStateCacheFactory(MetaDataVersionStampStoreStateCacheFactory.newInstance());\n</code></pre>\n<p>If you do this before the first <code>FDBDatabase</code> is created, then every <code>FDBDatabase</code> will be initialized with an instance of the store state cache built from the factory provided.</p>\n<p>See: <a href=\"https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/MetaDataVersionStampStoreStateCacheFactory.html\">MetaDataVersionStampStoreStateCacheFactory</a><br>\nSee: <a href=\"https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/ReadVersionRecordStoreStateCacheFactory.html\">ReadVersionRecordStoreStateCacheFactory</a></p>\n<aside class=\"quote no-group\" data-username=\"rahul-nitkkr\" data-post=\"1\" data-topic=\"2251\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rahul-nitkkr/48/754_2.png\" class=\"avatar\"> rahul-nitkkr:</div>\n<blockquote>\n<p>In what cases should i expect to see a performance with this Cache ?</p>\n</blockquote>\n</aside>\n<p>Well, primarily, this will only help if you open the same store many times. For a bit of context, as is discussed in the <a href=\"https://arxiv.org/pdf/1901.04452.pdf\">Record Layer paper</a>, one thing the Record Layer lets you do is create many, many record stores with a shared schema, all on the same cluster, which might have some benefits for certain datasets (e.g., separating individual users\u2019 data into different homogeneous record stores). So if you\u2019re doing something like that, and every operation opens a new record store, then the cache will have a very high miss rate, and it won\u2019t be particularly useful.</p>\n<p>However, if you\u2019re using the Record Layer more like a tradition RDMS and have one (of a very small number) of Record Stores that is opened with every operation, then caching this information can be very beneficial. In particular, there are roughly two benefits, from what I can tell:</p>\n<ol>\n<li>Decreased latency at store opening time, as the operation can read from local memory instead of a database call over the network. This can probably save a few milliseconds from the request.</li>\n<li>Decreased hot spotting, as without caching, every operation will read from the same handful of keys (storing the store state in the database). These requests will probably end up all on the same few FDB storage servers (even if the cluster is large), and so this becomes a bottleneck. By caching the information, the hot spot can be sidestepped.</li>\n</ol>\n<p>So I\u2019d only expect an improvement if (1) you care about shaving off the latency of each request or (2) the store state read is becoming a bottleneck that is influencing your total throughput. AFAIK, the easiest way to know if you\u2019re being limited in the second case is to look at cluster metrics (e.g., see if there are heightened \u201cstorage queues\u201d on certain servers), though I\u2019m not exactly sure (there may be easier ways to tell). Note that if you\u2019re not limited, then I don\u2019t think this will cause problems with throughput, just latency.</p>\n<p>For more on this problem and how caching the store state can help, see this video from the 2019 FDB summit: <a href=\"https://youtu.be/_mDIhQ1HLcs\">https://youtu.be/_mDIhQ1HLcs</a></p>\n<aside class=\"quote no-group\" data-username=\"rahul-nitkkr\" data-post=\"1\" data-topic=\"2251\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rahul-nitkkr/48/754_2.png\" class=\"avatar\"> rahul-nitkkr:</div>\n<blockquote>\n<p>I read in the API docs that we need to enable <code>WeakReadSemantics</code> , though couldn\u2019t get a way to enable that through any API.</p>\n</blockquote>\n</aside>\n<p>As I discussed above, that\u2019s only true if one is using the <code>ReadVersionRecordStoreStateCache</code>. What that will do is allow multiple transactions to use a cached \u201cread version\u201d (essentially \u201cread timestamp\u201d) without having to get an up-to-date one from the database, with the tradeoff being that one might get stale (but consistent) reads. Perhaps less obviously, this can also increase the \u201cconflict\u201d rates on transactions where writes are performed (as it increases the \u201cwindow\u201d of time in which other transactions can be committed that cause the transaction to fail).</p>\n<p>The main way to use this API is to first enable tracking read and commit versions on the database:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">fdb.setTrackLastSeenVersion(true);\n</code></pre>\n<p>And then, you can set a <code>WeakReadSemantics</code> when creating a transaction. For example:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">FDBRecordContextConfig contextConfig = FDBRecordContextConfig.newBuilder()\n    .setWeakReadSemantics(new WeakReadSemantics(0L, TimeUnit.SECONDS(1).toMillis())\n    .build();\nFDBRecordContext context = fdb.openContext(contextConfig);\n</code></pre>\n<p>This will produce a transaction that will use a cached read version (as long as there\u2019s one at most 1 second old).</p>\n<p>If you can tolerate stale reads, this can help decrease the latency of your operations, though not necessarily the throughput (in most circumstances; if the processes in the cluster that hand out read versions are overwhelmed, then this <em>might</em> help with throughput).</p>\n<p>See: <a href=\"https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContextConfig.html\">FDBRecordContextConfig</a></p>\n<aside class=\"quote no-group\" data-username=\"rahul-nitkkr\" data-post=\"1\" data-topic=\"2251\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rahul-nitkkr/48/754_2.png\" class=\"avatar\"> rahul-nitkkr:</div>\n<blockquote>\n<p>Does opening multiple parallel transactions benefit here ?</p>\n</blockquote>\n</aside>\n<p>You can definitely get better throughput by opening up more transactions in parallel (until your client is saturated, at which point you might need to load balance across multiple clients to improve throughput). In terms of latency, I don\u2019t think this will get either better or worse with cached store states, and maybe it will be more likely that a read version is cached if you\u2019re using <code>WeakReadSemantics</code>.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 2,
        "updated_at": "2020-07-20T16:14:09.072Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 37,
        "reads": 40,
        "readers_count": 39,
        "score": 218.0,
        "yours": false,
        "topic_id": 2251,
        "topic_slug": "correct-usage-of-the-fdbrecordstorestatecache",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/ReadVersionRecordStoreStateCacheFactory.html",
            "internal": false,
            "reflection": false,
            "title": "ReadVersionRecordStoreStateCacheFactory - fdb-record-layer-core 2.9.129.0 javadoc",
            "clicks": 6
          },
          {
            "url": "https://youtu.be/_mDIhQ1HLcs",
            "internal": false,
            "reflection": false,
            "clicks": 6
          },
          {
            "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/MetaDataVersionStampStoreStateCache.html",
            "internal": false,
            "reflection": false,
            "title": "MetaDataVersionStampStoreStateCache - fdb-record-layer-core 2.9.129.0 javadoc",
            "clicks": 6
          },
          {
            "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/ReadVersionRecordStoreStateCache.html",
            "internal": false,
            "reflection": false,
            "title": "ReadVersionRecordStoreStateCache - fdb-record-layer-core 2.9.129.0 javadoc",
            "clicks": 3
          },
          {
            "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/MetaDataVersionStampStoreStateCacheFactory.html",
            "internal": false,
            "reflection": false,
            "title": "MetaDataVersionStampStoreStateCacheFactory - fdb-record-layer-core 2.9.129.0 javadoc",
            "clicks": 3
          },
          {
            "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContextConfig.html",
            "internal": false,
            "reflection": false,
            "title": "FDBRecordContextConfig - fdb-record-layer-core 2.9.129.0 javadoc",
            "clicks": 2
          },
          {
            "url": "https://apple.github.io/foundationdb/known-limitations.html#large-transactions",
            "internal": false,
            "reflection": false,
            "title": "Known Limitations \u2014 FoundationDB 6.2",
            "clicks": 2
          },
          {
            "url": "https://arxiv.org/pdf/1901.04452.pdf",
            "internal": false,
            "reflection": false,
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/correct-usage-of-the-fdbrecordstorestatecache/2251/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      7627,
      7628
    ]
  },
  "timeline_lookup": [
    [
      1,
      1920
    ],
    [
      2,
      1919
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Correct Usage of the FDBRecordStoreStateCache",
  "id": 2251,
  "title": "Correct Usage of the FDBRecordStoreStateCache",
  "posts_count": 2,
  "created_at": "2020-07-20T10:31:12.988Z",
  "views": 1096,
  "reply_count": 0,
  "like_count": 2,
  "last_posted_at": "2020-07-20T16:14:09.072Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "correct-usage-of-the-fdbrecordstorestatecache",
  "category_id": 12,
  "word_count": 1845,
  "deleted_at": null,
  "user_id": 712,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2251",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 2,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Basic Record Layer query performance and caching strategies",
      "id": 1801,
      "title": "Basic Record Layer query performance and caching strategies",
      "slug": "basic-record-layer-query-performance-and-caching-strategies",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-12-03T18:37:24.038Z",
      "last_posted_at": "2019-12-06T16:37:59.330Z",
      "bumped": true,
      "bumped_at": "2019-12-06T16:37:59.330Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 822,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 593,
            "username": "max",
            "name": "Max McDonnell",
            "avatar_template": "/user_avatar/forums.foundationdb.org/max/{size}/585_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Relax consistency guarantees",
      "id": 1560,
      "title": "Relax consistency guarantees",
      "slug": "relax-consistency-guarantees",
      "posts_count": 18,
      "reply_count": 14,
      "highest_post_number": 19,
      "image_url": null,
      "created_at": "2019-08-05T00:31:11.823Z",
      "last_posted_at": "2019-10-30T15:35:37.702Z",
      "bumped": true,
      "bumped_at": "2019-10-30T15:35:37.702Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 2278,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 542,
            "username": "jonahwest",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/90db22/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Some Clarification on Storage Engine and Disk/IO",
      "id": 1453,
      "title": "Some Clarification on Storage Engine and Disk/IO",
      "slug": "some-clarification-on-storage-engine-and-disk-io",
      "posts_count": 13,
      "reply_count": 8,
      "highest_post_number": 13,
      "image_url": null,
      "created_at": "2019-06-13T18:18:46.358Z",
      "last_posted_at": "2019-07-23T06:20:18.977Z",
      "bumped": true,
      "bumped_at": "2019-07-23T06:20:18.977Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2341,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 594,
            "username": "zhuyi29",
            "name": "Zoe",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/z/edb3f5/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 712,
        "username": "rahul-nitkkr",
        "name": "Rahul Roy",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 712,
      "username": "rahul-nitkkr",
      "name": "Rahul Roy",
      "avatar_template": "/user_avatar/forums.foundationdb.org/rahul-nitkkr/{size}/754_2.png"
    },
    "last_poster": {
      "id": 8,
      "username": "alloc",
      "name": "Alec Grieser",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
    },
    "links": [
      {
        "url": "https://youtu.be/_mDIhQ1HLcs",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 8,
        "domain": "youtu.be",
        "root_domain": "youtu.be"
      },
      {
        "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/MetaDataVersionStampStoreStateCache.html",
        "title": "MetaDataVersionStampStoreStateCache - fdb-record-layer-core 2.9.129.0 javadoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/ReadVersionRecordStoreStateCacheFactory.html",
        "title": "ReadVersionRecordStoreStateCacheFactory - fdb-record-layer-core 2.9.129.0 javadoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/MetaDataVersionStampStoreStateCacheFactory.html",
        "title": "MetaDataVersionStampStoreStateCacheFactory - fdb-record-layer-core 2.9.129.0 javadoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/storestate/ReadVersionRecordStoreStateCache.html",
        "title": "ReadVersionRecordStoreStateCache - fdb-record-layer-core 2.9.129.0 javadoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/known-limitations.html#large-transactions",
        "title": "Known Limitations \u2014 FoundationDB 6.2",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://javadoc.io/doc/org.foundationdb/fdb-record-layer-core/latest/com/apple/foundationdb/record/provider/foundationdb/FDBRecordContextConfig.html",
        "title": "FDBRecordContextConfig - fdb-record-layer-core 2.9.129.0 javadoc",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://arxiv.org/pdf/1901.04452.pdf",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 8,
        "domain": "arxiv.org",
        "root_domain": "arxiv.org"
      }
    ]
  },
  "bookmarks": []
}