{
  "post_stream": {
    "posts": [
      {
        "id": 1487,
        "name": "Anantha Kumaran",
        "username": "ananthakumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "created_at": "2018-06-18T18:28:57.960Z",
        "cooked": "<p>I am working on a binding for elixir language <a href=\"https://github.com/ananthakumaran/fdb\" rel=\"nofollow noopener\">https://github.com/ananthakumaran/fdb</a>. The C API documentation is not quite clear about the life time of arguments passed to fdb_transaction_* functions. The *_set_option clearly states that the arguments can be freed after the function returns. But most of the other functions don\u2019t specify for how long the pointers should be kept valid.</p>\n<p>It also seems like <code>FDBTransaction</code> implicitly depends on <code>FDBDatabase</code> and <code>FDBCluster</code>. The binding was crashing under valgrind until I made sure the database and cluster are not destroyed before transaction. Same case with <code>FDBFuture</code>, if the <code>FDBTransaction</code> is destroyed before the future is resolved, (for example garbage collector kicks in and figures out the transaction is not referenced anymore) future returns error when resolved.</p>\n<p>It would be nice if this is documented clearly because these don\u2019t seem to occur during normal testing.</p>\n<p>PS. I am not an experienced c/c++ programmer. I mostly work with languages that support garbage collection, so it\u2019s possible that I might be missing the obvious here</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-19T04:09:18.548Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 87,
        "reads": 53,
        "readers_count": 52,
        "score": 445.6,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "Anantha Kumaran",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/ananthakumaran/fdb",
            "internal": false,
            "reflection": false,
            "title": "GitHub - ananthakumaran/fdb: Foundation DB client for Elixir",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 308,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 1519,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-20T21:01:27.066Z",
        "cooked": "<p>Arguments passed in to the functions should be ok to free once the call returns to you.</p>\n<p>I don\u2019t think that futures depend on transactions, but if the operation that is being performed is being done on a transaction that gets destroyed, the operation will be cancelled. This will result in an error (transaction_cancelled, I think) bubbling out through the future.</p>\n<p>I would have expected that destroying the cluster or database while a transaction was open wouldn\u2019t cause a crash, so long as you don\u2019t destroy the object more than once (as documented). Transactions and Databases hold references to their parents which should keep them alive as long as the child object needs them. I tried a simple test to verify that this is true, so if there is a bug here it may be a little more subtle and some sample code might help to track it down.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-20T21:01:27.066Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 53,
        "readers_count": 52,
        "score": 20.6,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1525,
        "name": "Anantha Kumaran",
        "username": "ananthakumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "created_at": "2018-06-21T04:39:02.010Z",
        "cooked": "<p>I guess the issue might have something to do with clear_range. The database is flushed before running every test. The code below contains a sample</p>\n<pre><code class=\"lang-auto\">  def flushdb do\n    t = new_transaction()\n    :ok = Transaction.clear_range(t, \"\", &lt;&lt;0xFF&gt;&gt;)\n    Transaction.commit(t)\n  end\n\n  setup do\n    flushdb()\n  end\n\n  test \"resource early garbage collection\" do\n    parent = self()\n\n    # A temp process is used to trigger garbage collection of cluster\n    # &amp; database.\n    spawn_link(fn -&gt;\n      send(parent, new_transaction())\n    end)\n\n    receive do\n      t -&gt;\n        :ok = Transaction.set_option(t, FDB.Option.transaction_option_access_system_keys())\n        assert Transaction.get(t, \"\\xff\\xff/status/json\")\n        assert Transaction.get(t, \"\\xff\\xff/cluster_file_path\")\n    end\n  end\n</code></pre>\n<pre><code class=\"lang-auto\">==2642== Memcheck, a memory error detector\n==2642== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==2642== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info\n==2642== Command: /otp_src_20.3/bin/x86_64-unknown-linux-gnu/beam.valgrind.smp -S4:4 -- -root /otp_src_20.3 -progname /otp_src_20.3/bin/cerl\\ -valgrind -- -home /root -- -pa /elixir/bin/../lib/eex/ebin /elixir/bin/../lib/elixir/ebin /elixir/bin/../lib/ex_unit/ebin /elixir/bin/../lib/iex/ebin /elixir/bin/../lib/logger/ebin /elixir/bin/../lib/mix/ebin -noshell -s elixir start_cli -extra /elixir/bin/mix test test/fdb_stress_test.exs:52\n==2642== \n==2642== Warning: set address range perms: large range [0x3a056000, 0x7a056000) (noaccess)\nmake: Nothing to be done for 'all'.\nIncluding tags: [line: \"52\"]\nExcluding tags: [:test]\n\n==2642== Thread 33 fdb:\n==2642== Invalid read of size 4\n==2642==    at 0xC04AE97: addref (FastRef.h:71)\n==2642==    by 0xC04AE97: operator() (ThreadSafeTransaction.actor.cpp:120)\n==2642==    by 0xC04AE97: a_body1cont1 (ThreadHelper.actor.h:574)\n==2642==    by 0xC04AE97: a_body1when1 (ThreadHelper.actor.g.h:896)\n==2642==    by 0xC04AE97: a_callback_fire (ThreadHelper.actor.g.h:910)\n==2642==    by 0xC04AE97: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==2642==    by 0xBFD7007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==2642==    by 0xC1E6662: send&lt;Void&gt; (flow.h:708)\n==2642==    by 0xC1E6662: operator() (Net2.actor.cpp:473)\n==2642==    by 0xC1E6662: N2::Net2::run() (Net2.actor.cpp:628)\n==2642==    by 0xBF43627: runNetwork() (NativeAPI.actor.cpp:863)\n==2642==    by 0xBF1731B: MultiVersionApi::runNetwork() (MultiVersionTransaction.actor.cpp:1197)\n==2642==    by 0xBEF5B98: fdb_run_network (fdb_c.cpp:119)\n==2642==    by 0xB941CAA: run_network_wrapper (fdb_nif.c:115)\n==2642==    by 0x5E16E1: erl_drv_thread_wrapper (erl_drv_thread.c:122)\n==2642==    by 0x6BFA99: thr_wrapper (ethread.c:118)\n==2642==    by 0x578F6A9: start_thread (pthread_create.c:333)\n==2642==  Address 0x95b5dc0 is 0 bytes inside a block of size 968 free'd\n==2642==    at 0x4C2CE10: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==2642==    by 0xC04A377: delref (FastRef.h:74)\n==2642==    by 0xC04A377: operator() (ThreadSafeTransaction.actor.cpp:106)\n==2642==    by 0xC04A377: a_body1cont1 (ThreadHelper.actor.h:574)\n==2642==    by 0xC04A377: a_body1when1 (ThreadHelper.actor.g.h:896)\n==2642==    by 0xC04A377: a_callback_fire (ThreadHelper.actor.g.h:910)\n==2642==    by 0xC04A377: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeDatabase::~ThreadSafeDatabase()::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeDatabase::~ThreadSafeDatabase()::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==2642==    by 0xBFD7007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==2642==    by 0xC1E6662: send&lt;Void&gt; (flow.h:708)\n==2642==    by 0xC1E6662: operator() (Net2.actor.cpp:473)\n==2642==    by 0xC1E6662: N2::Net2::run() (Net2.actor.cpp:628)\n==2642==    by 0xBF43627: runNetwork() (NativeAPI.actor.cpp:863)\n==2642==    by 0xBF1731B: MultiVersionApi::runNetwork() (MultiVersionTransaction.actor.cpp:1197)\n==2642==    by 0xBEF5B98: fdb_run_network (fdb_c.cpp:119)\n==2642==    by 0xB941CAA: run_network_wrapper (fdb_nif.c:115)\n==2642==    by 0x5E16E1: erl_drv_thread_wrapper (erl_drv_thread.c:122)\n==2642==    by 0x6BFA99: thr_wrapper (ethread.c:118)\n==2642==    by 0x578F6A9: start_thread (pthread_create.c:333)\n==2642== \n</code></pre>\n<p>full log can be found here <a href=\"https://gist.github.com/ananthakumaran/9b8a9f525c522ba5b3f08543837294db\" rel=\"nofollow noopener\">https://gist.github.com/ananthakumaran/9b8a9f525c522ba5b3f08543837294db</a></p>\n<p>There error goes away when</p>\n<ol>\n<li>the flushdb call before the test is removed, then all the tests run without errors from valgrind</li>\n<li>if I try to trace the exact call sequence. I guess <code>fprintf</code> causes enough delay to mask the issue</li>\n</ol>\n<pre><code class=\"lang-auto\">==2779== Memcheck, a memory error detector\n==2779== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==2779== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info\n==2779== Command: /otp_src_20.3/bin/x86_64-unknown-linux-gnu/beam.valgrind.smp -S4:4 -- -root /otp_src_20.3 -progname /otp_src_20.3/bin/cerl\\ -valgrind -- -home /root -- -pa /elixir/bin/../lib/eex/ebin /elixir/bin/../lib/elixir/ebin /elixir/bin/../lib/ex_unit/ebin /elixir/bin/../lib/iex/ebin /elixir/bin/../lib/logger/ebin /elixir/bin/../lib/mix/ebin -noshell -s elixir start_cli -extra /elixir/bin/mix test test/fdb_stress_test.exs:52\n==2779== \n==2779== Warning: set address range perms: large range [0x3a056000, 0x7a056000) (noaccess)\nmake: Nothing to be done for 'all'.\nIncluding tags: [line: \"52\"]\nExcluding tags: [:test]\n\nfdb_cluster_create\nfdb_future_get_*\nfdb_cluster_create_database\nfdb_future_get_*\nfdb_future_destroy\nfdb_future_destroy\nfdb_cluster_destroy\nfdb_database_create_transaction\nfdb_transaction_commit\nfdb_future_get_*\nfdb_cluster_create\nfdb_future_get_*\nfdb_cluster_create_database\nfdb_future_get_*\nfdb_database_create_transaction\nfdb_database_destroy\nfdb_future_destroy\nfdb_cluster_destroy\nfdb_future_destroy\nfdb_transaction_get\nfdb_future_get_*\nfdb_transaction_get\nfdb_future_get_*\nfdb_future_destroy\nfdb_future_destroy\nfdb_transaction_destroy\nfdb_database_destroy\n.fdb_future_destroy\nfdb_transaction_destroy\n\n\nFinished in 3.5 seconds\n3 tests, 0 failures, 2 skipped\n\nRandomized with seed 895969\n==2779== \n==2779== HEAP SUMMARY:\n==2779==     in use at exit: 33,210,142 bytes in 28,684 blocks\n==2779==   total heap usage: 203,607 allocs, 174,923 frees, 268,317,204 bytes allocated\n==2779== \n==2779== 480 bytes in 10 blocks are definitely lost in loss record 628 of 820\n==2779==    at 0x4C2BBA0: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==2779==    by 0x626648: erts_sys_alloc (sys.c:1206)\n==2779==    by 0x59796F: erts_alloc (erl_alloc.h:232)\n==2779==    by 0x598524: erts_thr_progress_register_unmanaged_thread (erl_thr_progress.c:531)\n==2779==    by 0x5AE7B8: async_thread_init (erl_async.c:497)\n==2779==    by 0x5AE89C: async_main (erl_async.c:524)\n==2779==    by 0x6BFA99: thr_wrapper (ethread.c:118)\n==2779==    by 0x578F6A9: start_thread (pthread_create.c:333)\n==2779== \n==2779== LEAK SUMMARY:\n==2779==    definitely lost: 480 bytes in 10 blocks\n==2779==    indirectly lost: 0 bytes in 0 blocks\n==2779==      possibly lost: 919,274 bytes in 4,517 blocks\n==2779==    still reachable: 32,290,388 bytes in 24,157 blocks\n==2779==         suppressed: 0 bytes in 0 blocks\n==2779== Reachable blocks (those to which a pointer was found) are not shown.\n==2779== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==2779== \n==2779== For counts of detected and suppressed errors, rerun with: -v\n==2779== ERROR SUMMARY: 220 errors from 220 contexts (suppressed: 0 from 0)\n</code></pre>\n<ol start=\"3\">\n<li>if I keep a reference to database &amp; cluster in transaction, thereby preventing the VM from calling database_destroy and or cluster_destroy before transaction_destroy, then the error goes away.</li>\n</ol>\n<p>I am using library version 5.1.7. Let me know if this gives enough clues. Otherwise, I will try to track down further when I get free time.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T04:39:02.010Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 49,
        "readers_count": 48,
        "score": 14.8,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "Anantha Kumaran",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://gist.github.com/ananthakumaran/9b8a9f525c522ba5b3f08543837294db",
            "internal": false,
            "reflection": false,
            "title": "crash.log \u00b7 GitHub",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 12,
          "username": "ajbeamon",
          "name": "A.J. Beamon",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 308,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1528,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-21T05:40:05.082Z",
        "cooked": "<p>It\u2019s a bit hard to say what\u2019s happening without seeing the calls to destroy here, but I will note that the line reported for the invalid read (ThreadSafeTransaction.actor.cpp:120) is in the constructor for ThreadSafeTransaction. That makes me think that the database is being destroyed before/while it is being used to create a transaction, which could certainly lead to this behavior.</p>\n<p>I\u2019d check to see if it\u2019s possible that your client is not waiting until the transaction is created to destroy the database. If it is correctly waiting, we may have to see if there\u2019s some way the calls could be reordered internally.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T05:40:05.082Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 41,
        "readers_count": 40,
        "score": 8.2,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1529,
        "name": "Anantha Kumaran",
        "username": "ananthakumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "created_at": "2018-06-21T06:09:24.398Z",
        "cooked": "<p>I will try to check more (inability to add printf makes it difficult for me to get the exact call sequence). I think it\u2019s unlikey for database to be destroyed while transaction is being created. <code>fdb_database_create_transaction</code> itself is synchrounous. Here is the call and corresponding c implementation. VM can\u2019t destroy database.resource till the call returns</p>\n<pre><code class=\"lang-auto\">    resource =\n      Native.database_create_transaction(database.resource)\n      |&gt; Utils.verify_result()\n</code></pre>\n<pre><code class=\"lang-auto\">database_create_transaction(ErlNifEnv *env, int argc,\n                            const ERL_NIF_TERM argv[]) {\n  Database *database;\n  FDBTransaction *fdb_transaction;\n  Reference *reference;\n  fdb_error_t error;\n  ERL_NIF_TERM result;\n  VERIFY_ARGV(enif_get_resource(env, argv[0], DATABASE_RESOURCE_TYPE,\n                                (void **)&amp;database),\n              \"database\");\n  error = fdb_database_create_transaction(database-&gt;handle, &amp;fdb_transaction);\n  if (error) {\n    return enif_make_tuple2(env, enif_make_int(env, error),\n                            make_atom(env, \"nil\"));\n  }\n  reference = reference_resource_create(database, NULL);\n  result = fdb_transaction_to_transaction(env, fdb_transaction, reference);\n  return enif_make_tuple2(env, enif_make_int(env, error), result);\n}\n</code></pre>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T06:09:24.398Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 39,
        "readers_count": 38,
        "score": 12.8,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "Anantha Kumaran",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 308,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1532,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-21T15:58:25.562Z",
        "cooked": "<p><code>fdb_database_create_transaction</code> synchronously returns the transaction, but it does schedule work to be run on the network thread, and it\u2019s on that thread where the bad access is happening. Likewise, calling <code>fdb_database_destroy</code> causes the destruction to scheduled on the network thread. These tasks should be being run in the order that they are scheduled, assuming they aren\u2019t being scheduled simultaneously.</p>\n<p>One possible exception to the above (based on a cursory reading, I could be wrong) is that it appears an action scheduled from the network thread can move ahead of an action already scheduled from another thread. If you were calling <code>fdb_database_destroy</code> on the network thread (i.e. on the thread that callbacks are usually called on) but <code>fdb_create_transaction</code> on a different thread, perhaps that could result in this behavior.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T15:58:25.562Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 36,
        "readers_count": 35,
        "score": 7.2,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 308,
          "username": "ananthakumaran",
          "name": "Anantha Kumaran",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1533,
        "name": "Anantha Kumaran",
        "username": "ananthakumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "created_at": "2018-06-21T16:07:29.553Z",
        "cooked": "<p>I think I found a small case. Just creating multiple transactions causes the problem in elixir also. You might have to run it multiple times. Let me know if there are any issues in the code itself.</p>\n<pre><code class=\"lang-auto\">#define FDB_API_VERSION 510\n\n#include \"assert.h\"\n#include \"foundationdb/fdb_c.h\"\n#include \"pthread.h\"\n#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"string.h\"\n\nvoid *run_network() {\n  fdb_run_network();\n  return NULL;\n}\n\nvoid new_transaction() {\n  FDBTransaction *transaction;\n  FDBDatabase *database;\n  FDBCluster *cluster;\n  FDBFuture *future;\n\n  future = fdb_create_cluster(NULL);\n  fdb_error_t error;\n  error = fdb_future_block_until_ready(future);\n  assert(error == 0);\n  error = fdb_future_get_cluster(future, &amp;cluster);\n  assert(error == 0);\n  fdb_future_destroy(future);\n\n  const char *db = \"DB\";\n  future = fdb_cluster_create_database(cluster, (const uint8_t *)db, 2);\n  error = fdb_future_block_until_ready(future);\n  assert(error == 0);\n  error = fdb_future_get_database(future, &amp;database);\n  assert(error == 0);\n  fdb_future_destroy(future);\n\n  error = fdb_database_create_transaction(database, &amp;transaction);\n  assert(error == 0);\n\n  fdb_transaction_destroy(transaction);\n  fdb_database_destroy(database);\n  fdb_cluster_destroy(cluster);\n}\n\nvoid test() {\n  for (int i = 0; i &lt; 1000; i++) {\n    new_transaction();\n  }\n}\n\nint main() {\n  fdb_error_t error;\n  int result;\n  error = fdb_select_api_version(510);\n  assert(error == 0);\n  error = fdb_setup_network();\n  assert(error == 0);\n  pthread_t network_thread;\n  result = pthread_create(&amp;network_thread, NULL, *run_network, NULL);\n  assert(result == 0);\n  test();\n  error = fdb_stop_network();\n  assert(error == 0);\n  result = pthread_join(network_thread, NULL);\n  assert(result == 0);\n  return 0;\n}\n</code></pre>\n<p>full log <a href=\"https://gist.github.com/1c845de8cfd56711791c72a6a65f1a22\" rel=\"nofollow noopener\">https://gist.github.com/1c845de8cfd56711791c72a6a65f1a22</a></p>\n<pre><code class=\"lang-auto\">make clean &amp;&amp; make db &amp;&amp; make run\nrm -rf db\n/usr/bin/gcc -g -O3 -ansi -pedantic -Wall -Wextra -Wno-unused-parameter -std=gnu99 -fPIC  -L/usr/local/lib/ -L/usr/lib/ -Wl,--no-as-needed -lm -lpthread -lrt -lstdc++ -lfdb_cdb.c   -o db\nvalgrind ./db\n==926== Memcheck, a memory error detector\n==926== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==926== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info\n==926== Command: ./db\n==926== \n==926== Thread 2:\n==926== Invalid read of size 4\n==926==    at 0x5A68E97: addref (FastRef.h:71)\n==926==    by 0x5A68E97: operator() (ThreadSafeTransaction.actor.cpp:120)\n==926==    by 0x5A68E97: a_body1cont1 (ThreadHelper.actor.h:574)\n==926==    by 0x5A68E97: a_body1when1 (ThreadHelper.actor.g.h:896)\n==926==    by 0x5A68E97: a_callback_fire (ThreadHelper.actor.g.h:910)\n==926==    by 0x5A68E97: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==926==    by 0x59F5007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==926==    by 0x5C04662: send&lt;Void&gt; (flow.h:708)\n==926==    by 0x5C04662: operator() (Net2.actor.cpp:473)\n==926==    by 0x5C04662: N2::Net2::run() (Net2.actor.cpp:628)\n==926==    by 0x5961627: runNetwork() (NativeAPI.actor.cpp:863)\n==926==    by 0x593531B: MultiVersionApi::runNetwork() (MultiVersionTransaction.actor.cpp:1197)\n==926==    by 0x5913B98: fdb_run_network (fdb_c.cpp:119)\n==926==    by 0x400D6A: run_network (db.c:11)\n==926==    by 0x51476A9: start_thread (pthread_create.c:333)\n==926==    by 0x6168EEC: clone (clone.S:109)\n==926==  Address 0x68c2ce0 is 0 bytes inside a block of size 968 free'd\n==926==    at 0x4C2CE10: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==926==    by 0x5A68377: delref (FastRef.h:74)\n==926==    by 0x5A68377: operator() (ThreadSafeTransaction.actor.cpp:106)\n==926==    by 0x5A68377: a_body1cont1 (ThreadHelper.actor.h:574)\n==926==    by 0x5A68377: a_body1when1 (ThreadHelper.actor.g.h:896)\n==926==    by 0x5A68377: a_callback_fire (ThreadHelper.actor.g.h:910)\n==926==    by 0x5A68377: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeDatabase::~ThreadSafeDatabase()::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeDatabase::~ThreadSafeDatabase()::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==926==    by 0x59F5007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==926==    by 0x5C04662: send&lt;Void&gt; (flow.h:708)\n==926==    by 0x5C04662: operator() (Net2.actor.cpp:473)\n==926==    by 0x5C04662: N2::Net2::run() (Net2.actor.cpp:628)\n==926==    by 0x5961627: runNetwork() (NativeAPI.actor.cpp:863)\n==926==    by 0x593531B: MultiVersionApi::runNetwork() (MultiVersionTransaction.actor.cpp:1197)\n==926==    by 0x5913B98: fdb_run_network (fdb_c.cpp:119)\n==926==    by 0x400D6A: run_network (db.c:11)\n==926==    by 0x51476A9: start_thread (pthread_create.c:333)\n==926==    by 0x6168EEC: clone (clone.S:109)\n==926== \n==926== Invalid read of size 4\n==926==    at 0x597468C: Transaction::Transaction(Database const&amp;) (NativeAPI.actor.cpp:1770)\n==926==    by 0x5AAD822: ReadYourWritesTransaction::ReadYourWritesTransaction(Database const&amp;) (ReadYourWrites.actor.cpp:1103)\n==926==    by 0x5A68EA2: operator() (ThreadSafeTransaction.actor.cpp:120)\n==926==    by 0x5A68EA2: a_body1cont1 (ThreadHelper.actor.h:574)\n==926==    by 0x5A68EA2: a_body1when1 (ThreadHelper.actor.g.h:896)\n==926==    by 0x5A68EA2: a_callback_fire (ThreadHelper.actor.g.h:910)\n==926==    by 0x5A68EA2: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==926==    by 0x59F5007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==926==    by 0x5C04662: send&lt;Void&gt; (flow.h:708)\n==926==    by 0x5C04662: operator() (Net2.actor.cpp:473)\n==926==    by 0x5C04662: N2::Net2::run() (Net2.actor.cpp:628)\n==926==    by 0x5961627: runNetwork() (NativeAPI.actor.cpp:863)\n==926==    by 0x593531B: MultiVersionApi::runNetwork() (MultiVersionTransaction.actor.cpp:1197)\n==926==    by 0x5913B98: fdb_run_network (fdb_c.cpp:119)\n==926==    by 0x400D6A: run_network (db.c:11)\n==926==    by 0x51476A9: start_thread (pthread_create.c:333)\n==926==    by 0x6168EEC: clone (clone.S:109)\n==926==  Address 0x68c3090 is 944 bytes inside a block of size 968 free'd\n==926==    at 0x4C2CE10: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==926==    by 0x5A68377: delref (FastRef.h:74)\n==926==    by 0x5A68377: operator() (ThreadSafeTransaction.actor.cpp:106)\n==926==    by 0x5A68377: a_body1cont1 (ThreadHelper.actor.h:574)\n==926==    by 0x5A68377: a_body1when1 (ThreadHelper.actor.g.h:896)\n==926==    by 0x5A68377: a_callback_fire (ThreadHelper.actor.g.h:910)\n==926==    by 0x5A68377: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeDatabase::~ThreadSafeDatabase()::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeDatabase::~ThreadSafeDatabase()::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==926==    by 0x59F5007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==926==    by 0x5C04662: send&lt;Void&gt; (flow.h:708)\n==926==    by 0x5C04662: operator() (Net2.actor.cpp:473)\n==926==    by 0x5C04662: N2::Net2::run() (Net2.actor.cpp:628)\n==926==    by 0x5961627: runNetwork() (NativeAPI.actor.cpp:863)\n==926==    by 0x593531B: MultiVersionApi::runNetwork() (MultiVersionTransaction.actor.cpp:1197)\n==926==    by 0x5913B98: fdb_run_network (fdb_c.cpp:119)\n==926==    by 0x400D6A: run_network (db.c:11)\n==926==    by 0x51476A9: start_thread (pthread_create.c:333)\n==926==    by 0x6168EEC: clone (clone.S:109)\n==926== \n==926== Invalid read of size 8\n==926==    at 0x596250A: Transaction::createTrLogInfoProbabilistically(Database const&amp;) (NativeAPI.actor.cpp:2951)\n==926==    by 0x597471B: Transaction::Transaction(Database const&amp;) (NativeAPI.actor.cpp:1770)\n==926==    by 0x5AAD822: ReadYourWritesTransaction::ReadYourWritesTransaction(Database const&amp;) (ReadYourWrites.actor.cpp:1103)\n==926==    by 0x5A68EA2: operator() (ThreadSafeTransaction.actor.cpp:120)\n==926==    by 0x5A68EA2: a_body1cont1 (ThreadHelper.actor.h:574)\n==926==    by 0x5A68EA2: a_body1when1 (ThreadHelper.actor.g.h:896)\n==926==    by 0x5A68EA2: a_callback_fire (ThreadHelper.actor.g.h:910)\n==926==    by 0x5A68EA2: ActorCallback&lt;(anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt;, 0, Void&gt;::fire((anonymous namespace)::DoOnMainThreadVoidActor&lt;ThreadSafeTransaction::ThreadSafeTransaction(ThreadSafeDatabase*)::{lambda()#1}&gt; const&amp;) (flow.h:928)\n==926==    by 0x59F5007: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (flow.h:382)\n==926==    by 0x5C04662: send&lt;Void&gt; (flow.h:708)\n==926==    by 0x5C04662: operator() (Net2.actor.cpp:473)\n</code></pre>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T16:07:29.553Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 38,
        "readers_count": 37,
        "score": 22.6,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "Anantha Kumaran",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://gist.github.com/1c845de8cfd56711791c72a6a65f1a22",
            "internal": false,
            "reflection": false,
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 308,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1534,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-21T16:28:29.700Z",
        "cooked": "<p>Thanks, I\u2019ll try to give it a run later today.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T16:28:29.700Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 33,
        "readers_count": 32,
        "score": 6.6,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 308,
          "username": "ananthakumaran",
          "name": "Anantha Kumaran",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1535,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-06-21T21:00:06.062Z",
        "cooked": "<p>I may have an idea what\u2019s happening here. <code>fdb_cluster_create_database</code> does the actual database creation on the network thread, and then signals completion via a future. It\u2019s holding onto a couple references to the database object (which in turn holds a reference to another object, say <code>dbContext</code>, which is shared with the transaction). When the job is done and it signals the future, the C code is immediately getting that database object, using it to create a transaction, and then destroying it.</p>\n<p>If the above completes in the following order, then I think we run into problems:</p>\n<ol>\n<li>Future is signaled</li>\n<li>Client code runs at least through <code>fdb_database_destroy</code>\n</li>\n<li>The task that signaled the future finishes wrapping up and drops its references to the database object.</li>\n</ol>\n<p>The expectation was that 3 completes before 2, in which case the call to <code>fdb_database_destroy</code> schedules the last decrement of the database object, causing the <code>dbContext</code> reference count to be decremented after the transaction increments it.</p>\n<p>In the case where 2 happens before 3, then the last reference to the database object is deleted on the network thread. It schedules the decrement of the <code>dbContext</code> reference count, but as I mentioned in a previous message, the fact that this happens on the network thread means that it can jump in line in front of the transaction work that increments the reference count. As a result, <code>dbContext</code> is deleted prematurely.</p>\n<p>This is a good find, thanks for the reproduction. I\u2019ll file an issue in GitHub to address it.</p>\n<p>EDIT: <a href=\"https://github.com/apple/foundationdb/issues/518\">https://github.com/apple/foundationdb/issues/518</a></p>\n<p>As a side note, the reason we probably haven\u2019t seen this previously is that we don\u2019t typically delete databases so quickly after creating them. The recommended practice is to keep the same database object around for as long as you\u2019ll want to be creating transactions and then close it only when you\u2019re done interacting with the database.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-21T21:12:36.730Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 27,
        "reads": 35,
        "readers_count": 34,
        "score": 147.0,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/518",
            "internal": false,
            "reflection": false,
            "title": "Deleting a database quickly after creating it is unsafe \u00b7 Issue #518 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 16
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1544,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-06-23T15:07:33.244Z",
        "cooked": "<p>It took me a while to understand your explanation (the key thing I missed is that the race you are worried about is to drop the last reference count on the ThreadSafeDatabase object, not on the DatabaseContext.  If the winner of the former race is the main thread, then the latter may happen early).</p>\n<p>I\u2019m not sure, but I think that if (as it seems) Net2::onMainThread() isn\u2019t linearizable when called from the main thread, that is the bug.  There\u2019s no documentation in the interface that it is supposed to preserve ordering, but clearly we <a href=\"https://github.com/apple/foundationdb/blob/d12c43b7ecdfdd9175489d53743e9b5e14723615/fdbclient/ThreadSafeTransaction.actor.cpp#L113\" rel=\"nofollow noopener\">rely on it</a>.  Client code calling the API is allowed to run on the main thread (via future callbacks), so I think there is no way to ensure that the last reference to (e.g.) a ThreadSafeDatabase isn\u2019t dropped from there.  Moreover, I think there are probably other ways (having nothing to do with reference counting) to violate API ordering requirements this way.</p>\n<p>I don\u2019t know if the right implementation (from a performance perspective) is to empty the thread queue into ready before adding onMainThread tasks to ready, or to defer onMainThread tasks to the next run loop cycle, or something else.</p>\n<p>As always, the other important thing to look at is how to better test for this type of problem!</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-06-23T15:07:33.244Z",
        "reply_count": 0,
        "reply_to_post_number": 9,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 33,
        "readers_count": 32,
        "score": 11.6,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/d12c43b7ecdfdd9175489d53743e9b5e14723615/fdbclient/ThreadSafeTransaction.actor.cpp#L113",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/ThreadSafeTransaction.actor.cpp at d12c43b7ecdfdd9175489d53743e9b5e14723615 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 4
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 12,
          "username": "ajbeamon",
          "name": "A.J. Beamon",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 1688,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2018-07-17T16:11:21.242Z",
        "cooked": "<p>A fix for this has been merged and will be part of the upcoming 6.0 release.</p>\n<p><a href=\"https://github.com/apple/foundationdb/pull/610\" class=\"onebox\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apple/foundationdb/pull/610</a></p>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 11,
        "updated_at": "2018-07-17T16:11:21.242Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 30,
        "readers_count": 29,
        "score": 36.0,
        "yours": false,
        "topic_id": 516,
        "topic_slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/610",
            "internal": false,
            "reflection": false,
            "clicks": 14
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction/516/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      1487,
      1519,
      1525,
      1528,
      1529,
      1532,
      1533,
      1534,
      1535,
      1544,
      1688
    ]
  },
  "timeline_lookup": [
    [
      1,
      2682
    ],
    [
      2,
      2680
    ],
    [
      6,
      2679
    ],
    [
      10,
      2677
    ],
    [
      11,
      2653
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings"
  ],
  "tags_descriptions": {},
  "fancy_title": "What is the life time of key, value and other arguments passed to fdb_transaction_*",
  "id": 516,
  "title": "What is the life time of key, value and other arguments passed to fdb_transaction_*",
  "posts_count": 11,
  "created_at": "2018-06-18T18:28:57.904Z",
  "views": 2608,
  "reply_count": 4,
  "like_count": 1,
  "last_posted_at": "2018-07-17T16:11:21.242Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "what-is-the-life-time-of-key-value-and-other-arguments-passed-to-fdb-transaction",
  "category_id": 5,
  "word_count": 3445,
  "deleted_at": null,
  "user_id": 308,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_516",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 11,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Destroying futures after &lsquo;fdb_transaction_on_error()&rsquo;",
      "id": 1307,
      "title": "Destroying futures after 'fdb_transaction_on_error()'",
      "slug": "destroying-futures-after-fdb-transaction-on-error",
      "posts_count": 9,
      "reply_count": 1,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2019-04-16T13:33:52.150Z",
      "last_posted_at": "2019-04-24T18:38:45.358Z",
      "bumped": true,
      "bumped_at": "2019-04-24T18:38:45.358Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1428,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 419,
            "username": "doublemax",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8e7dd6/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Crashes every day go bindings",
      "id": 1219,
      "title": "Crashes every day go bindings",
      "slug": "crashes-every-day-go-bindings",
      "posts_count": 19,
      "reply_count": 13,
      "highest_post_number": 19,
      "image_url": null,
      "created_at": "2019-03-13T07:03:38.291Z",
      "last_posted_at": "2019-07-05T15:14:02.982Z",
      "bumped": true,
      "bumped_at": "2019-07-05T15:14:02.982Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2317,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 520,
            "username": "Vasilii",
            "name": "Vasiliy Popkov",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/v/258eb7/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 120,
            "username": "josephg",
            "name": "Seph Gentle",
            "avatar_template": "/user_avatar/forums.foundationdb.org/josephg/{size}/84_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 490,
            "username": "rjenkins",
            "name": "Ray Jenkins",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rjenkins/{size}/487_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 562,
            "username": "ddi",
            "name": null,
            "avatar_template": "/user_avatar/forums.foundationdb.org/ddi/{size}/721_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "`fdb_future_block_until_ready` and retry logic",
      "id": 2826,
      "title": "`fdb_future_block_until_ready` and retry logic",
      "slug": "fdb-future-block-until-ready-and-retry-logic",
      "posts_count": 17,
      "reply_count": 14,
      "highest_post_number": 17,
      "image_url": null,
      "created_at": "2021-07-29T16:11:47.961Z",
      "last_posted_at": "2021-09-02T13:29:20.517Z",
      "bumped": true,
      "bumped_at": "2021-09-02T13:29:20.517Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1009,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 946,
            "username": "rajivr",
            "name": "Rajiv M Ranganath",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 14,
            "username": "andrew.noyes",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Question regarding WATCH future",
      "id": 3062,
      "title": "Question regarding WATCH future",
      "slug": "question-regarding-watch-future",
      "posts_count": 8,
      "reply_count": 6,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2021-12-07T14:34:46.115Z",
      "last_posted_at": "2021-12-10T01:10:12.437Z",
      "bumped": true,
      "bumped_at": "2021-12-10T01:10:12.437Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 480,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 946,
            "username": "rajivr",
            "name": "Rajiv M Ranganath",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rajivr/{size}/1100_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 6,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 308,
        "username": "ananthakumaran",
        "name": "Anantha Kumaran",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 308,
      "username": "ananthakumaran",
      "name": "Anantha Kumaran",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ananthakumaran/{size}/526_2.png"
    },
    "last_poster": {
      "id": 12,
      "username": "ajbeamon",
      "name": "A.J. Beamon",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/issues/518",
        "title": "Deleting a database quickly after creating it is unsafe \u00b7 Issue #518 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 16,
        "user_id": 12,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/610",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 14,
        "user_id": 12,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/d12c43b7ecdfdd9175489d53743e9b5e14723615/fdbclient/ThreadSafeTransaction.actor.cpp#L113",
        "title": "foundationdb/ThreadSafeTransaction.actor.cpp at d12c43b7ecdfdd9175489d53743e9b5e14723615 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 22,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/ananthakumaran/fdb",
        "title": "GitHub - ananthakumaran/fdb: Foundation DB client for Elixir",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 308,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://gist.github.com/ananthakumaran/9b8a9f525c522ba5b3f08543837294db",
        "title": "crash.log \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 308,
        "domain": "gist.github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}