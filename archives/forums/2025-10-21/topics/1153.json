{
  "post_stream": {
    "posts": [
      {
        "id": 3415,
        "name": "James Thompson",
        "username": "JamesThompson",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
        "created_at": "2019-02-19T15:18:58.473Z",
        "cooked": "<p>I am a new FoundationDB user! So far very impressed <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=6\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>\n<p>Apologies in advance for the longer post. Over the last few days I\u2019ve read almost the entire manual, and I have a few questions and gaps in my knowledge:</p>\n<p><strong>1. Does FDB draw an important distinction between read-only and write transactions?</strong></p>\n<p>In the Go driver, I notice there is a <code>ReadTransact</code> function which only allows read operations inside it. I could not find anything in the main docs mentioning a difference, so I\u2019m assuming this is mainly present for helpful type-safety / ease of mind when writing a read-only function.</p>\n<p><strong>2. Are writes within a single transaction sequential / blocking?</strong></p>\n<p>The docs mention how it is advisable to start all the reads you\u2019ll need, and only block on the data once you need it - in Go, this is accomplished with <code>a := tr.Get(A); b := tr.Get(B); a.MustGet()</code>.</p>\n<p>If later in the same transaction, I call <code>tr.Set(A, x); tr.Set(B, y)</code>, does <code>Set</code> block? Or to ask it a different way: is the latency of two sequential <code>Set</code> calls zero, one, or two round-trips from the client to the database? I checked the source but it immediately dives into <code>C.fdb_transaction_set</code>.</p>\n<p><strong>3. Does the possibility of unknown transaction results make the FDB atomic features tricky to use?</strong></p>\n<p>From the <a href=\"https://apple.github.io/foundationdb/developer-guide.html#transactions-with-unknown-results\" rel=\"nofollow noopener\">unknown results</a> doc, any transaction that is not idempotent can result in unintended behavior. The banking example in the link includes using a separate, idempotent <code>depositID</code> check/set to prevent an <code>add</code> from running twice.</p>\n<p>It seems to me like you\u2019d run into this a lot - suppose you want to set some key, and log how many times that feature was used each day. A transaction of (in not-quite-correct pseudocode) <code>tr.Set(A, x); tr.Add(tuple.Tuple{year, month, day}, 1)</code> is not idempotent because of the <code>Add</code>, and key <code>A</code> may have already been <code>x</code> before this so checking for that condition in the transaction is insufficient.</p>\n<p>Should you use a separate, idempotent key / 2PC type design whenever you want to use FDB atomic features, or am I missing something?</p>\n<p><strong>4. Are \u201csnapshot reads\u201d only useful if you also intend to write in the same transaction?</strong></p>\n<p>This might be an obvious one, and maybe I\u2019m just confused because of the name. Am I correct in thinking a read-only transaction would never conflict with a write transaction, because of MVVC, and therefore snapshot reads are only useful for avoiding write conflicts with another write transaction?</p>\n<p><strong>5. Is it possible to efficiently count keys in a range?</strong></p>\n<p>Suppose you want to know how many keys are in a (sparse) range - with the tools at hand, it looks like I\u2019d have to stream the entire set of K/V data to my client. Or, have thought of wanting this capability before writing any data at all, and transactionally increment / decrement a separate counter key as above\u2026</p>\n<p>For bonus points, can I find the approximate \u201cmiddle\u201d (+/- X) key in a range? That would allow easy concurrency for my next question:</p>\n<p><strong>6. What\u2019s a good pattern for reading a large key space?</strong></p>\n<p>Suppose you want to perform some large statistical analysis on your entire data set. Inconsistency (not fitting in 5s) is fine, but it\u2019s not clear to me how best to be performant.</p>\n<p>Maybe do some TCP congestion window type situation by increasing how much you read (using a limit + the send-all range option) until a timeout happens, and use that as a heuristic? How about concurrency?</p>\n<p>This is partially addressed in the <a href=\"https://apple.github.io/foundationdb/segmented-range-reads.html\" rel=\"nofollow noopener\">segmented range reads</a> recipe.</p>\n<p><strong>7. What\u2019s a good pattern for an online schema upgrade?</strong></p>\n<p>Suppose you have a large range of keys that are encoded with protobuf or similar, and you want to add some new, optional field to your struct. Keys are being added / removed during the upgrade. You want to efficiently upgrade many millions of keys.</p>\n<p>My off-the-cuff: upgrade your software fleet to save the new field when adding or modifying keys. Once the entire fleet is no longer writing the old format, do something similar to the method in the question above, setting the batch \u201clow priority\u201d flag on your transactions. Having iterated through the entire range, you could then iterate the entire range a second time validating that there are no further changes to be made.</p>\n<p>Thank you very much if you got this far. I\u2019m excited to build things! <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=6\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T15:18:58.473Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 499,
        "reads": 119,
        "readers_count": 118,
        "score": 2574.8,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "James Thompson",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/segmented-range-reads.html",
            "internal": false,
            "reflection": false,
            "title": "Segmented Range Reads \u2014 FoundationDB 6.0",
            "clicks": 12
          },
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#transactions-with-unknown-results",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 6.0",
            "clicks": 10
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 519,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 3418,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-02-19T20:18:15.695Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol>\n<li>Does FDB draw an important distinction between read-only and write transactions?</li>\n</ol>\n</blockquote>\n</aside>\n<p>\u201cYes\u201d.</p>\n<ul>\n<li>Read-only transactions don\u2019t commit anything so they don\u2019t have to wait for any response when they are done, and also they don\u2019t \u201callocate\u201d any resources/locks on the server while they are alive. They only need to acquire the read version before the first read. Since they don\u2019t write, they cannot conflict.</li>\n<li>Write-only transactions have to commit (obviously) but don\u2019t need to acquire a read version (because they don\u2019t need it). Since they don\u2019t read, they cannot conflict (but can cause <em>others</em> to conflict)</li>\n<li>Read-Write transactions will need to both acquire a read version for the reads, and then have to wait for the commit to succeed at the end. Since they both read and write, they can conflict or cause others to conflict.</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol start=\"2\">\n<li>Are writes within a single transaction sequential / blocking?</li>\n</ol>\n</blockquote>\n</aside>\n<p>Mutations are not blocking: the transaction only buffers internally the complete set of mutations that you performed, and then send the whole list (plus the list of conflict ranges) to the cluster at commit time. So it is \u201cas if\u201d all the writes did occur at the end while waiting for the commit to complete.</p>\n<p>Reads are the exact opposite since you have to go to one of the storage process to get the results. That\u2019s why it is usually faster if you can issue all your reads concurrently (and not sequentially)</p>\n<p>Mutations are also \u201csequential\u201d in the sense that they affect the database in the order you issued them: for example if you would first CLEAR(X) then SET(X, 42), the transaction would only send \u201cSET(X, 42)\u201d to the cluster. On the other hand, If you would first SET(X, 42) then CLEAR(X), the transaction would only send \u201cCLEAR(X)\u201d to the cluster (ie: it \u201cmerges\u201d operations on the same key).</p>\n<p>If you are mutating different keys in the same transaction, then the order does not really matter (unless you insert some reads between them). I <em>believe</em> that the list of mutations is sorted lexicographically by the client when the transaction commits, so the cluster doesn\u2019t know the ordering of the individual mutations.</p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol start=\"3\">\n<li>Does the possibility of unknown transaction results make the FDB atomic features tricky to use?</li>\n</ol>\n</blockquote>\n</aside>\n<p>Yes and no.</p>\n<p>Since fdb relies on optimistic locking, you always have to use retry-loops anyway, so you just need to add some extra logic at the start of your transaction handler to check for the previous attempt\u2019s error code. If it was <em>unknown result</em> and if you have a way to check if the change did already happen, you can then simply abort without committing.</p>\n<p>This is a bit tricky to do if your transaction is write-only and only use atomic increments, if you are using random UUIDs that were generated inside the retry loop (just generate them <em>outside</em>!) or use versionstamps.</p>\n<p>You may need to create some additional key that can serve as the witness of the operation\u2019s success.</p>\n<p>As always with distributed systems, it is easier if your operations are idempotent.</p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol start=\"4\">\n<li>Are \u201csnapshot reads\u201d only useful if you also intend to write in the same transaction?</li>\n</ol>\n</blockquote>\n</aside>\n<p>Snapshot reads are used if you DON\u2019T want your transaction to conflict if another one changed the value of the key behind your back.</p>\n<p>This can be used to reduce the probability of conflicts for global counters or other high contention algorithms. For example, you can read a range of values, choose one in particular, go mutate some keys related to it, and then add a read conflict range on that one key. This will be <em>as if</em> you never read the other ones. Another concurrent transaction would have may chosen a <em>different</em> key and so would not conflict with you.</p>\n<p>You can also use them to intentionally relax the ACID guarantees by only using snapshot reads in the transaction, if you don\u2019t care if the key was changed. But make sure to not shoot yourself in the foot <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>I believe snapshot reads are a tiny bit faster, because the client does not need to remember the list of keys you read, nor send them to the cluster when you commit. If it is <em>impossible</em> for the key to be changed by another transaction, then you may use snapshot reads to squeeze a few microseconds here and there.</p>\n<p>You may gain a tiny bit of network bandwidth and cpu time (we\u2019re talking maybe a few %). Not really worth the pain I would say.</p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol start=\"5\">\n<li>Is it possible to efficiently count keys in a range?</li>\n</ol>\n</blockquote>\n</aside>\n<p>Not at this time: there are multiple ways to \u201ccount\u201d keys in a range, but they all consume a lot of resources server-side. Basically they will require the storage server to touch all or most of the leaf pages in the B-Tree, so will probably impact the page cache\u2019s efficiency.</p>\n<p>The current recommended way is to have an additional key per \u201ccollection\u201d, that is used as a counter. This key would be updated with atomic increments or decrements whenever you add/remove items to the \u201ccollection\u201d. If you don\u2019t forget to update the key in all the possible code paths, then the counter should always be consistent with the actual data.</p>\n<p>If you want to find some middle point in a range, you can combine key selectors and \u201crecursive\u201d algorithms, a bit like a binary search would do. Downside is that you will have to issue single reads at each \u201cstep\u201d before deciding to go left or right, meaning the total latency will be high\u2026</p>\n<p>If you <em>know</em> that the range will be somewhat small (in bytes, not in number of keys), then sometimes it is faster to read the whole range and then do the search in memory.</p>\n<p>If not, then you need to add another data structure on the side that will allow you do speed up the search process.</p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol start=\"6\">\n<li>What\u2019s a good pattern for reading a large key space?</li>\n</ol>\n</blockquote>\n</aside>\n<p>If your scan only needs a portion of the key\u2019s value\u2026 I would say store a copy of only the part you need in another set of keys (a bit like a column-store would do?). Maybe use covering indexes if possible?</p>\n<p>If you need to read the entire value to perform your aggregate, then I guess you could use the locality API to split the range into smaller chunks, with boundaries aligned to each individual storage server. Spawn multiple threads which will work on the individual chunks, and then merge the results once they are done. This should help parallelize the computation on the maximum number of storage nodes, but will generate a lot of network traffic.</p>\n<p>Another approach is to have one instance of your app running on the same servers as the fdb storage process, and use the same locality API to send a message to each instance, asking it to process \u201clocal\u201d chunks. Hopefully they will query the <em>local</em> storage process and not have to go across the network (it will use \u201clocalhost\u201d instead)</p>\n<p>And as always, you can also try to add another data structure that is updated while data is inserted in the database, that can be used to speed up the query (maybe some index that pre-computes partial aggregates?)</p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"1\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<ol start=\"7\">\n<li>What\u2019s a good pattern for an online schema upgrade?</li>\n</ol>\n</blockquote>\n</aside>\n<p>It\u2019s a bit difficult because it really depends on the type of data, access patterns and so on.</p>\n<p>There is one general purpose solution (not always the best but sometimes useful) where you use the Directory Layer to create a new temporary subspace, convert the previous data from the \u201ccurrent\u201d subspace into the new temporary subspace, in a background process (again, by using the locality API you can spawn multiple workers that will work on different chunks).</p>\n<p>While this is running, you track in some queue all entities that have been changed while the process was going on.</p>\n<p>Once all workers are complete, you then drain the queue of recently changed entities, again and again until it is empty (you may want to have some \u201clock\u201d key somewhere to stop all mutations if you are never able to \u201ckeep up\u201d).</p>\n<p>Then, you can use the Directory Layer to - in the same transaction - atomically swap the \u201ccurrent\u201d and \u201ctemporary\u201d subspaces. This means that any new transaction will now use the updated data. Then you can simply \u201cclear range\u201d the old subspace.</p>\n<p>So yeah the downside is that you need to \u201cclone\u201d all the existing data, which - depending on the size of your dataset - may or may not be feasible (both in time and in required disk space).</p>\n<p>Another solution is to update your entities \u201cJust in Time\u201d: you have a schema version and entity version field on each entity. When you read an entity with the old schema version you upgrade it \u201cin memory\u201d and at the same time enqueue it in a background thread. This thread can then lazily update \u201cfor real\u201d the entity (checking first if it was not mutated/updated by another worker in the mean time). When you have to mutate an entity with the old schema version, then you can simply update it, mutate it and store the update version in the database. The background thread will either skip this record later, or conflict if it was attempting to upgrade it at the same time.</p>\n<p>This is a bit trickier to do if your schema change also add indexes or change existing ones. Again, this can be worked on in the background in a temporary subspace, and then you can \u201cpublish\u201d the new index by renaming the temporary subspace into the final name for that index\u2026</p>\n<p>Personally, my dataset have always been small enough that I\u2019ve always been able to do offline upgrades (put app in \u201cmaintenance mode\u201d, export everything, clear, reimport everything with the upgraded schemas, recompute indexes, restart the app).</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T20:40:26.317Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 21,
        "reads": 107,
        "readers_count": 106,
        "score": 136.4,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3423,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2019-02-19T22:01:19.141Z",
        "cooked": "<p>Christope\u2019s detailed answer covers your questions pretty well, but I just wanted to add a couple points.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"2\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Write-only transactions have to commit (obviously) but don\u2019t need to acquire a read version</p>\n</blockquote>\n</aside>\n<p>Committed transactions do actually require a read version, and a write-only transaction that hasn\u2019t acquired one will do so implicitly at commit time. This read version won\u2019t result in any conflicts, though, if there aren\u2019t any reads or read conflict ranges.</p>\n<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"2\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Are \u201csnapshot reads\u201d only useful if you also intend to write in the same transaction?</p>\n</blockquote>\n</aside>\n<p>The answer above covered this pretty well, but to be explicit the answer to your question is basically yes. Without a write (or setting write conflict ranges), your transact won\u2019t commit and wouldn\u2019t conflict regardless of whether you used snapshot reads or regular ones. As Christophe suggested, there may be a performance benefit to doing so, but not one we\u2019ve measured as far as I know. See also <a href=\"https://github.com/apple/foundationdb/issues/718\" class=\"inline-onebox\">Use snapshot transactions in our bindings for read-only retry loops. \u00b7 Issue #718 \u00b7 apple/foundationdb \u00b7 GitHub</a>.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T22:01:19.141Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 6,
        "reads": 78,
        "readers_count": 77,
        "score": 50.6,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/718",
            "internal": false,
            "reflection": false,
            "title": "Use snapshot transactions in our bindings for read-only retry loops. \u00b7 Issue #718 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3424,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-02-19T22:56:25.501Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ajbeamon\" data-post=\"3\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ajbeamon/48/13_2.png\" class=\"avatar\"> ajbeamon:</div>\n<blockquote>\n<p>Committed transactions do actually require a read version, and a write-only transaction that hasn\u2019t acquired one will do so implicitly at commit time.</p>\n</blockquote>\n</aside>\n<p>Yes, but I would imagine that acquiring the read version then happens \u201ccluster\u201d-side during the commit process, and so at least you would need one fewer network round-trip? Also, could the read version of a transaction that read nothing could simply be equal to its commit version?</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T22:56:25.501Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 75,
        "readers_count": 74,
        "score": 20.0,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3425,
        "name": "Jay Kominek",
        "username": "jkominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "created_at": "2019-02-19T23:02:02.541Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"2\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Read-only transactions don\u2019t commit anything so they don\u2019t have to wait for any response when they are done, and also they don\u2019t \u201callocate\u201d any resources/locks on the server while they are alive. They only need to acquire the read version before the first read.</p>\n</blockquote>\n</aside>\n<p>Out of curiosity, when is the read version acquired, relative to transaction creation and the first get?</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T23:02:02.541Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 74,
        "readers_count": 73,
        "score": 19.8,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "Jay Kominek",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 173,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3426,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-02-19T23:03:33.955Z",
        "cooked": "<p>It happens automatically when you first read, but you can also explicitly request it (via <code>fdb_transaction_get_read_version</code>), and then its cached for all subsequent reads in this transaction. As I understand, the 5 seconds \u201cdeadline\u201d starts from your first read, not the creation of the transaction handle itself.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T23:07:28.305Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 76,
        "readers_count": 75,
        "score": 15.2,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 173,
          "username": "jkominek",
          "name": "Jay Kominek",
          "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3427,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-02-19T23:14:38.372Z",
        "cooked": "<p>To make it clearer, here is a sample transaction profiling trace:</p>\n<p><em>note: this comes from a server that was somewhat slow at the time, I got better timings than this on better hardware and switching to linux for the server. But the general shape is very typical</em></p>\n<pre><code class=\"lang-auto\">Transaction #568 (read/write, 10 operations, '#' = 1.0 ms, started 17:05:06.1642960Z, ended 17:05:06.2194419Z)\n\u250c  oper. \u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500 start \u2500\u2500\u2500\u2500 end \u2500\u2500 duration \u2500\u2500\u252c\u2500 sent  recv \u2510\n\u2502 0   G *\u2502 ###########################:                            \u2502 T+ 10.797 ~  32.669 ( 21,872 \u00b5s) \u2502    46    12 \u2502 Get (24, 2985, \"schedules_status\", {55555555-5555-5555-4344-e061000000ab}, \"slot\") =&gt; &lt;00&gt;&lt;00&gt;;&lt;02&gt;&lt;D1&gt;TLO&lt;00&gt;&lt;05&gt;&lt;00&gt;&lt;01&gt;\n\u2502 1   c  \u2502 ___________________________`                            \u2502 T+ 32.672 ~  32.674 (      1 \u00b5s) \u2502    43       \u2502 Clear (24, 2985, \"devices_queues\", \"PRN0017\", @64883287936079-5#1)\n\u2502 2   c  \u2502 ___________________________`                            \u2502 T+ 32.674 ~  32.675 (      1 \u00b5s) \u2502    38       \u2502 Clear (24, 2985, \"schedules_meta\", {55555555-5555-5555-4344-e061000000ab})\n\u2502 3   cr \u2502 ___________________________`                            \u2502 T+ 32.677 ~  32.678 (      1 \u00b5s) \u2502    82       \u2502 ClearRange (24, 2985, \"schedules_status\", {55555555-5555-5555-4344-e061000000ab}).&lt;00&gt; &lt;= k &lt; (24, 2985, \"schedules_status\", {55555555-5555-5555-4344-e061000000ab}).&lt;FF&gt;\n\u2502 4   c  \u2502 ___________________________`                            \u2502 T+ 32.679 ~  32.680 (      1 \u00b5s) \u2502    60       \u2502 Clear (24, 2985, \"schedules_by_ticket\", {aaaaaaaa-aaaa-aaaa-e5ff-cc3100000002}, {55555555-5555-5555-4344-e061000000ab})\n\u2502 5   R \u00b0\u2502 ___________________________$$                           \u2502 T+ 32.686 ~  34.001 (  1,315 \u00b5s) \u2502    62    59 \u2502 GetRange fGE{(24, 2985, \"devices_queues\", \"PRN0017\").&lt;00&gt;} &lt;= k &lt; fGE{(24, 2985, \"devices_queues\", \"PRN0017\").&lt;FF&gt;}, limit(1) =&gt; 1 result(s), has_more\n\u2502 6   G \u00b0\u2502 _____________________________x#####;                    \u2502 T+ 34.464 ~  39.201 (  4,737 \u00b5s) \u2502    38   205 \u2502 Get (24, 2985, \"schedules_meta\", {55555555-5555-5555-4344-e061000000ac}) =&gt; {\"id\":\"55555555-5555-5555-4344-e061000000ac\",\"usr\":\"DOMACME\\\\dupond\",\"tid\":\"aaaa...017\",\"dt\":\"2018-05-29T17:05:04.8936595Z\",\"ix\":1,\"st\":0,\"act\":\"SRV006\",\"r\":false}\n\u2502 7   a  \u2502 ___________________________________`                    \u2502 T+ 39.641 ~  39.671 (     29 \u00b5s) \u2502    34       \u2502 Atomic_Add (24, 2985, \"server_commands\", \"SRV006\"), &lt;01 00 00 00&gt;\n\u2502 8   a  \u2502 ___________________________________`                    \u2502 T+ 39.780 ~  39.798 (     18 \u00b5s) \u2502   166       \u2502 Atomic_VersionStampedKey (24, 2985, \"server_commands\", \"SRV006\", @?#1), &lt;7B 22 63 6D 64 22 3A 22 70 72 69 6E 74 22 2C 22 73 69 64 22 3A 22 35 35 35 35 35 35 35 35 2D 35 35 35 35 2D 35 35 35 35 2D 34 33 34 34 2D 65 30 36 31 30 30 30 30 30 30 61 63 22 2C 22 74 69 64 22 3A 22 61 61 61 61 61 61 61 61 2D 61 61 61 61 2D 61 61 61 61 2D 65 35 66 66 2D 63 63 33 31 30 30 30 30 30 30 32 66 22 2C 22 64 65 76 22 3A 22 50 52 4E 30 30 31 37 22 7D&gt;\n\u2502 9   Co*\u2502 ____________________________________################### \u2502 T+ 39.803 ~  55.105 ( 15,303 \u00b5s) \u2502             \u2502 Commit\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt; Read 276 bytes and Committed 679 bytes in 55.115 ms and 1 attempt(s)\n</code></pre>\n<p>You can see that the very first <code>Get</code> is \u201cslow\u201d (21.8 ms) compared to the next <code>GetRange</code> (1.5 ms) because the <code>Get</code> is actually a <code>GetReadVersion</code> followed by a <code>Get</code>. If I would explicitly call  <code>GetReadVersion</code> <em>then</em> <code>Get</code>, I would see 20ms + 1.5 ms because obtaining the read version is more complex than just querying a storage process (especially if the client already has cached the \u201cmap\u201d of which shards are located where).</p>\n<p>Also, all the Clear, ClearRange and AtomicAdd are \u201cinstant\u201d (sub microsecond, the chart is probably rounding up) because its just updating some state in memory.</p>\n<p>Then finally the commit is doing all the mutation work (sending the mutation and conflict ranges lists to the cluster, waiting for the result).</p>\n<p>So yeah, it is possible that both the first (implicit) GetReadVersion and Commit would take the bulk of the transaction time.</p>\n<p>Last thing to note: technically this transaction handle lasted 55.1 ms (from creation to end), but since the first read starts a T+10.8 ms, the actual lifetime, as seen by fdb, is about 45ms.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-19T23:23:32.127Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 78,
        "readers_count": 77,
        "score": 35.6,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3433,
        "name": "A.J. Beamon",
        "username": "ajbeamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "created_at": "2019-02-20T01:57:33.716Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"KrzysFR\" data-post=\"4\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/krzysfr/48/43_2.png\" class=\"avatar\"> KrzysFR:</div>\n<blockquote>\n<p>Yes, but I would imagine that acquiring the read version then happens \u201ccluster\u201d-side during the commit process, and so at least you would need one fewer network round-trip? Also, could the read version of a transaction that read nothing could simply be equal to its commit version?</p>\n</blockquote>\n</aside>\n<p>It does happen client-side and before the commit request is sent, but I believe it uses the casual_read_risky flag that makes it a little cheaper by avoiding the transaction logs.</p>\n<p>I don\u2019t know all of the constraints on the read version off the top is my head, and I\u2019m not in a position to easily look it up right now, but one important thing to note is that getting the read version is where ratekeeper adds latency to control the transaction rate if needed. Not doing the read version call would bypass the throttling mechanism.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-20T01:57:33.716Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 73,
        "readers_count": 72,
        "score": 19.6,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "A.J. Beamon",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 12,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3479,
        "name": "James Thompson",
        "username": "JamesThompson",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
        "created_at": "2019-02-21T04:32:29.664Z",
        "cooked": "<p>Thank you all for your responses! In particular I found the distinction between read-only, write-only, and read-write queries very helpful.</p>\n<p>For <span class=\"hashtag\">#3</span>, it sounds like maybe write-only, atomic-only transaction could be \u201cfixed\u201d by generating a UUID before the retry loop, and just inserting a tuple key <code>(serverProcessUUID, txnUUID)</code>. Checking if this key exists makes the transaction idempotent, and some cleanup process can later delete any throwaway keys that belong to a serverProcessUUID that has been harvested.</p>\n<p>For <span class=\"hashtag\">#6</span>, co-locating worker processes with storage is interesting. I did not realize that clients could optimize their access in that way. Calculating partial aggregates on-line may be an easier approach though, I will need to think more about machine sizing first.</p>\n<p>For <span class=\"hashtag\">#7</span>, the directory layer approach seems tricky, unless I\u2019m missing something I think the migrator would still have to empty (part of) the queue after making the move, because the first attempt could conflict and need to retry. Maybe versionstamps in the queue items could help there. I think the \u201clazy\u201d approach is probably easier to get right, our suggestions are pretty close there.</p>\n<p>Last question: what\u2019s that tracing tool? <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=6\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"> Is it built into Go / FDB?</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-21T04:32:29.664Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 70,
        "readers_count": 69,
        "score": 29.0,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "James Thompson",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 519,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3485,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2019-02-21T19:51:53.686Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"9\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<p>Checking if this key exists makes the transaction idempotent, and some cleanup process can later delete any throwaway keys that belong to a serverProcessUUID that has been harvested.</p>\n</blockquote>\n</aside>\n<p>That\u2019s what I was calling a \u201cwitness\u201d key. Sometimes you can re-use an existing field, like a <code>last-modified</code> or <code>document-version</code> field.</p>\n<p>Other times, if the transaction is completing a work-item or command that is in a queue somewhere, and the transaction also deletes that entry from the command queue, you can use that as well\u2026</p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"9\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<p>For <span class=\"hashtag-raw\">#7</span>, the directory layer approach seems tricky, unless I\u2019m missing something I think the migrator would still have to empty (part of) the queue after making the move, because the first attempt could conflict and need to retry. Maybe versionstamps in the queue items could help there. I think the \u201clazy\u201d approach is probably easier to get right, our suggestions are pretty close there.</p>\n</blockquote>\n</aside>\n<p>Maybe this thread could be interesting as well: <a href=\"https://forums.foundationdb.org/t/implementing-atomic-ddl-for-sql-schema/678\" class=\"inline-onebox\">Implementing atomic DDL for SQL schema</a></p>\n<aside class=\"quote no-group\" data-username=\"JamesThompson\" data-post=\"9\" data-topic=\"1153\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c67d28/48.png\" class=\"avatar\"> JamesThompson:</div>\n<blockquote>\n<p>Last question: what\u2019s that tracing tool? <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> Is it built into Go / FDB?</p>\n</blockquote>\n</aside>\n<p>This is a feature of the .NET Binding. I wrote it because I needed it and nothing like that was available in fdb out of the box at the time.</p>\n<p>I don\u2019t know how I would have been able to build complex layers without this, so it\u2019s a mystery to me how everyone else is able to do it \u201cin the blind\u201d <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>I hope that either this come as a native feature of the C client library some day, or that authors of other bindings will port it to their language. It\u2019s not very complex to do and the code for this part can be found <a href=\"https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Client/Filters/Logging\" rel=\"noopener nofollow ugc\">here</a> and the ASCII-art goodness can be found <a href=\"https://github.com/Doxense/foundationdb-dotnet-client/blob/master/FoundationDB.Client/Filters/Logging/FdbTransactionLog.cs#L314\" rel=\"noopener nofollow ugc\">here</a></p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2019-02-21T19:53:48.504Z",
        "reply_count": 0,
        "reply_to_post_number": 9,
        "quote_count": 1,
        "incoming_link_count": 8,
        "reads": 71,
        "readers_count": 70,
        "score": 54.2,
        "yours": false,
        "topic_id": 1153,
        "topic_slug": "a-few-design-pattern-check-my-understanding-questions",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Client/Filters/Logging",
            "internal": false,
            "reflection": false,
            "title": "foundationdb-dotnet-client/FoundationDB.Client/Filters/Logging at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
            "clicks": 6
          },
          {
            "url": "https://forums.foundationdb.org/t/implementing-atomic-ddl-for-sql-schema/678",
            "internal": true,
            "reflection": false,
            "title": "Implementing atomic DDL for SQL schema",
            "clicks": 5
          },
          {
            "url": "https://github.com/Doxense/foundationdb-dotnet-client/blob/master/FoundationDB.Client/Filters/Logging/FdbTransactionLog.cs#L314",
            "internal": false,
            "reflection": false,
            "title": "foundationdb-dotnet-client/FdbTransactionLog.cs at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
            "clicks": 3
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/a-few-design-pattern-check-my-understanding-questions/1153/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      3415,
      3418,
      3423,
      3424,
      3425,
      3426,
      3427,
      3433,
      3479,
      3485
    ]
  },
  "timeline_lookup": [
    [
      1,
      2436
    ],
    [
      9,
      2435
    ],
    [
      10,
      2434
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "A few design-pattern + check-my-understanding questions",
  "id": 1153,
  "title": "A few design-pattern + check-my-understanding questions",
  "posts_count": 10,
  "created_at": "2019-02-19T15:18:58.329Z",
  "views": 2273,
  "reply_count": 6,
  "like_count": 1,
  "last_posted_at": "2019-02-21T19:51:53.686Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "a-few-design-pattern-check-my-understanding-questions",
  "category_id": 7,
  "word_count": 4257,
  "deleted_at": null,
  "user_id": 519,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1153",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 10,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Questions regarding FDB transaction conflict on two concurrent transactions",
      "id": 2913,
      "title": "Questions regarding FDB transaction conflict on two concurrent transactions",
      "slug": "questions-regarding-fdb-transaction-conflict-on-two-concurrent-transactions",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2021-09-28T06:26:34.642Z",
      "last_posted_at": "2021-10-28T08:17:02.264Z",
      "bumped": true,
      "bumped_at": "2021-10-28T09:13:59.130Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 2185,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 550,
            "username": "ntrhieu89",
            "name": "Hieu Nguyen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ntrhieu89/{size}/587_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Optimizing a single large transaction ( 10,000 keys)",
      "id": 1961,
      "title": "Optimizing a single large transaction ( 10,000 keys)",
      "slug": "optimizing-a-single-large-transaction-10-000-keys",
      "posts_count": 12,
      "reply_count": 10,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2020-02-17T13:36:55.355Z",
      "last_posted_at": "2020-02-24T11:30:42.854Z",
      "bumped": true,
      "bumped_at": "2020-02-24T11:30:42.854Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2373,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 645,
            "username": "subramaniamr",
            "name": "Subramaniam R",
            "avatar_template": "/user_avatar/forums.foundationdb.org/subramaniamr/{size}/658_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Implementing atomic DDL for SQL schema",
      "id": 678,
      "title": "Implementing atomic DDL for SQL schema",
      "slug": "implementing-atomic-ddl-for-sql-schema",
      "posts_count": 9,
      "reply_count": 2,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-09-03T19:04:26.293Z",
      "last_posted_at": "2018-09-08T15:28:47.996Z",
      "bumped": true,
      "bumped_at": "2018-09-08T15:28:47.996Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2146,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 251,
            "username": "George",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Understanding inter communication",
      "id": 745,
      "title": "Understanding inter communication",
      "slug": "understanding-inter-communication",
      "posts_count": 12,
      "reply_count": 7,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2018-10-05T00:51:33.531Z",
      "last_posted_at": "2018-10-11T17:16:52.613Z",
      "bumped": true,
      "bumped_at": "2018-10-11T17:16:52.613Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 10,
      "views": 3588,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 384,
            "username": "Chandru4u",
            "name": "Chandrashekar",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/c/b487fb/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Technical overview of the database",
      "id": 135,
      "title": "Technical overview of the database",
      "slug": "technical-overview-of-the-database",
      "posts_count": 27,
      "reply_count": 15,
      "highest_post_number": 27,
      "image_url": null,
      "created_at": "2018-04-20T15:30:31.788Z",
      "last_posted_at": "2019-01-11T23:25:47.462Z",
      "bumped": true,
      "bumped_at": "2019-01-11T23:25:47.462Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 64,
      "views": 12958,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 96,
            "username": "idiot",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/i/f04885/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 443,
            "username": "junius",
            "name": "junius",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/f08c70/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 5,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 12,
        "username": "ajbeamon",
        "name": "A.J. Beamon",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 519,
        "username": "JamesThompson",
        "name": "James Thompson",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 173,
        "username": "jkominek",
        "name": "Jay Kominek",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 519,
      "username": "JamesThompson",
      "name": "James Thompson",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png"
    },
    "last_poster": {
      "id": 53,
      "username": "KrzysFR",
      "name": "Christophe Chevalier",
      "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/segmented-range-reads.html",
        "title": "Segmented Range Reads \u2014 FoundationDB 6.0",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 12,
        "user_id": 519,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#transactions-with-unknown-results",
        "title": "Developer Guide \u2014 FoundationDB 6.0",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 10,
        "user_id": 519,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/Doxense/foundationdb-dotnet-client/tree/master/FoundationDB.Client/Filters/Logging",
        "title": "foundationdb-dotnet-client/FoundationDB.Client/Filters/Logging at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 53,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://forums.foundationdb.org/t/implementing-atomic-ddl-for-sql-schema/678",
        "title": "Implementing atomic DDL for SQL schema",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 53,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/apple/foundationdb/issues/718",
        "title": "Use snapshot transactions in our bindings for read-only retry loops. \u00b7 Issue #718 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 12,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/Doxense/foundationdb-dotnet-client/blob/master/FoundationDB.Client/Filters/Logging/FdbTransactionLog.cs#L314",
        "title": "foundationdb-dotnet-client/FdbTransactionLog.cs at master \u00b7 Doxense/foundationdb-dotnet-client \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 53,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}