{
  "post_stream": {
    "posts": [
      {
        "id": 8764,
        "name": "Jun Li",
        "username": "jltz",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c0e974/{size}.png",
        "created_at": "2020-11-12T10:24:46.703Z",
        "cooked": "<p>Hi:</p>\n<p>I have an application that uses FDB Java Binding. The application makes an array of range queries to FDB. The current implementation is to have each range query to return as an AsyncIterator. Then the application scan through the array of the iterators, iterator by iterator.</p>\n<p>According to the inline documentation of RangeQuery at: <a href=\"https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/RangeQuery.java#L37\" rel=\"noopener nofollow ugc\">https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/RangeQuery.java#L37</a></p>\n<blockquote>\n<p>If the calling program uses an asynchronous paradigm, a non-blocking {<span class=\"mention\">@link</span> AsyncIterator} is returned from {<span class=\"mention\">@link</span> <span class=\"hashtag-raw\">#iterator</span>()}. Both of these constructions will not begin to query the database until the first call to {<span class=\"mention\">@code</span> hasNext()}</p>\n</blockquote>\n<p>The actual query to remote FDB does not start only when the first hasNext() actually happens. While the application is iterating over the array of the iterators, it would be great if the iterators can already start to fetch query results, thus pre-fetching.</p>\n<p>To achieve pre-fetching, the proposal is the following.  The application can issue the following calls, right after the return of the array of the iterators, but before actually using the iterators, via:</p>\n<pre><code>for (AsycIterator iter: CollectedIterators) {\n        iter.hasNext(); \n}\n</code></pre>\n<p>Each hasNext() call then forces query invocation to FDB and return the first chunk of the query result.</p>\n<p>So my question is whether the above pre-fetching proposal makes sense from performance improvement point of view, more specially:</p>\n<p>(1)  Does the hasNext() call on all of these iterators make use of the FDB Java binding managed thread pool, thus we can achieve concurrent pre-fetching of the iterators, up to the number of the threads allocated at the thread pool?</p>\n<p>(2) Since we use StreamingMode.WANT_ALL, the first chunk of up to 8196 bytes will be returned from the Iterator hasNext() call.  As most of our query results will not be larger than 8KB, so the first pre-fetching mostly will get back all of the results that the application wants. Is this correct?</p>\n<p>(3) Eventually, if the application issues a large number of the AsyncIterators, the bottleneck will be at the FDB Java Binding\u2019s network thread, which is just a single thread. Is this correct?  If so, is there some way to mitigate this single thread  problem, to drive more query throughputs from the FDB client?</p>\n<p>Thanks!</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2020-11-12T10:26:34.938Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 73,
        "reads": 23,
        "readers_count": 22,
        "score": 374.6,
        "yours": false,
        "topic_id": 2434,
        "topic_slug": "is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client",
        "display_username": "Jun Li",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/RangeQuery.java#L37",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/RangeQuery.java at master \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 531,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client/2434/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 8766,
        "name": "Sam Pullara",
        "username": "spullara",
        "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
        "created_at": "2020-11-13T00:21:25.653Z",
        "cooked": "<p>Some of this behavior is controlled with StreamingMode, though if you want to do read ahead I would wrap the AsyncIterator with your own that does those prefetches as you consume the stream. WANT_ALL grabs the entire thing and no prefetching would be necessary. If your streams are that small, WANT_ALL is probably what you want.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2020-11-13T00:21:25.653Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 23,
        "readers_count": 22,
        "score": 14.6,
        "yours": false,
        "topic_id": 2434,
        "topic_slug": "is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client",
        "display_username": "Sam Pullara",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 156,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client/2434/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 8783,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2020-11-16T17:39:48.396Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"jltz\" data-post=\"1\" data-topic=\"2434\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c0e974/48.png\" class=\"avatar\"> jltz:</div>\n<blockquote>\n<p>(1) Does the hasNext() call on all of these iterators make use of the FDB Java binding managed thread pool, thus we can achieve concurrent pre-fetching of the iterators, up to the number of the threads allocated at the thread pool?</p>\n</blockquote>\n</aside>\n<p>Kind of. The way that it works is that:</p>\n<ol>\n<li>All network calls actually happen in the C library, which is called from the Java library using a JNI bridge. The C library is single-threaded <em>but</em> it uses a callback-based mechanism to allow for multiple concurrent requests to happen simultaneously. This means that in practice, the single-threadedness is only a problem when the CPU work exceeds that of a single core.</li>\n<li>When a future completes, it schedules a callback that will execute in the Java bindings managed thread pool. It\u2019s on this thread pool that things like marshaling data from C to Java happens, and where any callbacks the user sets on futures (using <code>.thenApply</code> or <code>.thenCompose</code>, etc.) will be executed. So there can be as many callbacks executing at any given time as there are threads in the thread pool</li>\n<li>The <code>.hasNext</code> method is a blocking method, so if you called <code>iter.hasNext()</code> on each <code>AsyncIterator</code>, that will end up starting the first iterator and blocking, and then when that\u2019s done, it will start the next iterator.</li>\n</ol>\n<p>The consequence of that is that the number of outstanding requests to the database is not really linked to the number of threads in the thread pool, as it\u2019s the FDB C client that manages actually talking to the database, and it doesn\u2019t use the Java threads for that purpose. (The thread pool size instead puts an upper limit on the number of concurrent requests that can be marshaled from C to Java at any given time.)</p>\n<p>That being said, I think you can achieve a similar result by doing something like:</p>\n<pre data-code-wrap=\"java\"><code class=\"lang-java\">for (AsyncIterator iter : CollectedIterators) {\n    iter.onHasNext();\n}\n</code></pre>\n<p>The <code>onHasNext</code> method is the asynchronous version of <code>hasNext</code>, and it will start work on the iterator and give you a future for when it\u2019s done. So the above snippet ensures that all of the iterators have started, but it doesn\u2019t wait for any of them. You can then either collect the returned futures and wait for any/all of them to complete, or you can call <code>.hasNext()</code> or <code>.next()</code> on one iterator, which will block the thread your code is currently in, but the other iterators will still be (pre-)fetching in the background.</p>\n<p><strong>tl;dr</strong> You can call <code>.onHasNext</code> instead of <code>.hasNext</code> to start the query without blocking, and then you can use that to begin pre-fetching all the iterators in parallel.</p>\n<aside class=\"quote no-group\" data-username=\"jltz\" data-post=\"1\" data-topic=\"2434\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c0e974/48.png\" class=\"avatar\"> jltz:</div>\n<blockquote>\n<p>(2) Since we use StreamingMode.WANT_ALL, the first chunk of up to 8196 bytes will be returned from the Iterator hasNext() call. As most of our query results will not be larger than 8KB, so the first pre-fetching mostly will get back all of the results that the application wants. Is this correct?</p>\n</blockquote>\n</aside>\n<p>Yeah, that sounds right to me. The <code>WANT_ALL</code> semantics will give you a chunk of results, and then the <code>AsyncIterator</code> implementation will iterate over the key-value pairs in that chunk. If your data is typically smaller than that chunk size, then you should only need to make the one fetch.</p>\n<aside class=\"quote no-group\" data-username=\"jltz\" data-post=\"1\" data-topic=\"2434\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://avatars.discourse-cdn.com/v4/letter/j/c0e974/48.png\" class=\"avatar\"> jltz:</div>\n<blockquote>\n<p>(3) Eventually, if the application issues a large number of the AsyncIterators, the bottleneck will be at the FDB Java Binding\u2019s network thread, which is just a single thread. Is this correct? If so, is there some way to mitigate this single thread problem, to drive more query throughputs from the FDB client?</p>\n</blockquote>\n</aside>\n<p>It\u2019s correct that the network thread is single-threaded, though as mentioned above, it uses a callback-based concurrency model that allows it to execute many tasks concurrently, even if it\u2019s limited to a single core for CPU work. That being said, the CPU can become a bottleneck, particularly for some workloads. At the moment, the simplest solution for that is to run multiple clients (where each client is 1 process, i.e., one JVM, in this case). (So for example, rather than running one process with a large thread pool, to better soak up all the available CPU, you might consider something like running multiple processes with smaller thread pools.) However, that does imply that your application can then effectively load balance between these multiple database clients, which may or may not be simple</p>\n<p>Another problem that sometimes manifests as poor throughput is insufficient parallelism (e.g., blocking on futures instead of firing off multiple futures at once), and for that, doing things like the pre-fetch proposal you\u2019re asking about here is the right solution. More on that in the developer guide: <a href=\"https://apple.github.io/foundationdb/developer-guide.html#throughput-requires-concurrency\" class=\"inline-onebox\">Developer Guide \u2014 FoundationDB 7.1</a></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2020-11-16T17:40:38.437Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 19,
        "readers_count": 18,
        "score": 13.8,
        "yours": false,
        "topic_id": 2434,
        "topic_slug": "is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#throughput-requires-concurrency",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 6.2",
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 156,
          "username": "spullara",
          "name": "Sam Pullara",
          "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client/2434/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      8764,
      8766,
      8783
    ]
  },
  "timeline_lookup": [
    [
      1,
      1805
    ],
    [
      2,
      1804
    ],
    [
      3,
      1800
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings",
    "performance"
  ],
  "tags_descriptions": {},
  "fancy_title": "Is That Possible to Force Prefetching on AsyncIterators at FDB Client?",
  "id": 2434,
  "title": "Is That Possible to Force Prefetching on AsyncIterators at FDB Client?",
  "posts_count": 3,
  "created_at": "2020-11-12T10:24:46.625Z",
  "views": 737,
  "reply_count": 1,
  "like_count": 0,
  "last_posted_at": "2020-11-16T17:39:48.396Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "is-that-possible-to-force-prefetching-on-asynciterators-at-fdb-client",
  "category_id": 7,
  "word_count": 1269,
  "deleted_at": null,
  "user_id": 531,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2434",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 3,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Java: concurrency questions",
      "id": 1571,
      "title": "Java: concurrency questions",
      "slug": "java-concurrency-questions",
      "posts_count": 7,
      "reply_count": 5,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-08-07T19:22:14.348Z",
      "last_posted_at": "2020-06-18T15:02:27.357Z",
      "bumped": true,
      "bumped_at": "2020-06-18T15:02:27.357Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1793,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 307,
            "username": "jwr",
            "name": "Jan Rychter",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jwr/{size}/302_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "AsyncIterator `hasNext` method not returning value",
      "id": 1718,
      "title": "AsyncIterator `hasNext` method not returning value",
      "slug": "asynciterator-hasnext-method-not-returning-value",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-11-06T20:55:47.298Z",
      "last_posted_at": "2019-11-08T23:40:07.479Z",
      "bumped": true,
      "bumped_at": "2019-11-08T23:40:07.479Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 816,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 660,
            "username": "kc626",
            "name": "Kevin Chan",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/k/4af34b/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "How does FDB execute multiple getRange requests in parallel?",
      "id": 1316,
      "title": "How does FDB execute multiple getRange requests in parallel?",
      "slug": "how-does-fdb-execute-multiple-getrange-requests-in-parallel",
      "posts_count": 6,
      "reply_count": 4,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2019-04-18T01:34:17.414Z",
      "last_posted_at": "2019-04-21T04:35:24.749Z",
      "bumped": true,
      "bumped_at": "2019-04-21T04:35:24.749Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1690,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 567,
            "username": "kunren",
            "name": "Kun Ren",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/k/f475e1/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "[Java] FoundationDB client thread related question",
      "id": 599,
      "title": "[Java] FoundationDB client thread related question",
      "slug": "java-foundationdb-client-thread-related-question",
      "posts_count": 3,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-07-29T10:57:29.288Z",
      "last_posted_at": "2018-08-08T16:45:45.782Z",
      "bumped": true,
      "bumped_at": "2018-08-08T16:45:45.782Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 9111,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 38,
            "username": "panghy",
            "name": "Clement Pang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Latency of range queries that return large number of key-value pairs",
      "id": 1291,
      "title": "Latency of range queries that return large number of key-value pairs",
      "slug": "latency-of-range-queries-that-return-large-number-of-key-value-pairs",
      "posts_count": 10,
      "reply_count": 7,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-04-10T08:50:34.502Z",
      "last_posted_at": "2023-06-13T18:07:51.074Z",
      "bumped": true,
      "bumped_at": "2023-06-13T18:07:51.074Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2107,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 550,
            "username": "ntrhieu89",
            "name": "Hieu Nguyen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ntrhieu89/{size}/587_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 1271,
            "username": "swatej",
            "name": "Swatej",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/0ea827/{size}.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 156,
        "username": "spullara",
        "name": "Sam Pullara",
        "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 531,
        "username": "jltz",
        "name": "Jun Li",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c0e974/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 531,
      "username": "jltz",
      "name": "Jun Li",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c0e974/{size}.png"
    },
    "last_poster": {
      "id": 8,
      "username": "alloc",
      "name": "Alec Grieser",
      "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#throughput-requires-concurrency",
        "title": "Developer Guide \u2014 FoundationDB 6.2",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 8,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/RangeQuery.java#L37",
        "title": "foundationdb/RangeQuery.java at master \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 531,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}