{
  "post_stream": {
    "posts": [
      {
        "id": 2378,
        "name": "",
        "username": "atombender",
        "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
        "created_at": "2018-10-19T19:24:02.187Z",
        "cooked": "<p>One of FoundationDB\u2019s original call to fame was the ability to use it an SQL database (via FoundationDB\u2019s aqcuisition of Akiban). Have there been any good writeups on strategies one can employ to efficiently layer indexes on top of FDB, or on top of key/value databases in general (TiDB and CockroachDB use similar approaches)?</p>\n<p>I can see different ways of using a key/value store as an index. For example, one could index an integer column as a series of tuples with empty values:</p>\n<pre><code class=\"lang-auto\">  [\"price\", 100, \"record345\"] =&gt; ''\n  [\"price\", 150, \"record567\"] =&gt; ''\n</code></pre>\n<p>Then to find all records with <code>price = 100</code>, one simply does a prefix search on <code>price:100:</code>, which effectively gets you all the record IDs in order.</p>\n<p>This gets trickier if you want to combine multiple indexes in a query. For example, let\u2019s say we have category and price:</p>\n<pre><code class=\"lang-auto\">  [\"price\", 100, \"record345\"] =&gt; ''\n  [\"price\", 150, \"record567\"] =&gt; ''\n  [\"category\", \"appliances\", \"record345\"] =&gt; ''\n  [\"category\", \"toys\", \"record876\"] =&gt; ''\n</code></pre>\n<p>A query such as <code>price = 100 and category = toys</code> gets trickier. If we think there are fewer records matching the price, we can scan all the keys returned for the range <code>price:100:</code> and concurrently scan all the keys returned for the range <code>category:toys:</code>, and to a kind of sort-merge join to intersect the two streaming sets. The downside is that if the \u201cleft\u201d side of this intersection is big, it can scan for a long time before hitting the the first <code>category:toys:</code> record.</p>\n<p>An optimization would be to first try to find the lowest and highest keys for each \u201ccolumn\u201d: For the <code>price:100:</code> key, the lowest would be <code>price:100:record345</code> and <code>category:toys:record876</code> respectively. Since <code>record876 &gt; record345</code>, that\u2019s our minimum, and we can start both range scans there. We can stop at the lowest high key. However, this search still performs badly if there\u2019s little overlap between the two result sets. I imagine you can go further in optimizing this by collecting statistics about the correlations between column values.</p>\n<p>Are there any good papers on strategies to do this better?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-19T19:24:02.187Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 1199,
        "reads": 87,
        "readers_count": 86,
        "score": 5997.4,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 391,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 2381,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-10-19T22:09:35.441Z",
        "cooked": "<p>The jargon you are looking for to start your literature search is probably \u201cindex intersection query\u201d.  Maybe also \u201ccompressed bitmap indices\u201d.</p>\n<p>Of course, if you are designing for that specific query, you can just make a compound index on both fields (\u201cprice_category\u201d,100,\u201cappliances\u201d,\u201crecord345\u201d).</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-19T22:09:35.441Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 79,
        "readers_count": 78,
        "score": 35.8,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2382,
        "name": "",
        "username": "atombender",
        "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
        "created_at": "2018-10-19T22:20:41.028Z",
        "cooked": "<p>Thanks. I know a lot about database theory, but FDB introduces constraints that affect what kind of strategies you would use. For example, the fact that FDB is always remote means that every key/range access has a much higher penalty than, say, node-local B-tree indexes.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-19T22:20:41.028Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 10,
        "reads": 81,
        "readers_count": 80,
        "score": 66.2,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 391,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2383,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-10-19T23:16:29.803Z",
        "cooked": "<p>To get good performance, you need to have many concurrent reads in flight at the same time. Cardinality statistics will help to know how many reads to do in each range of keys that represents the index. High cardinality range would require lots of reads, low cardinality range just one read. Split into non-overlapping chunks as appropriate. This is pretty easy since the primary keys at the end of the index key are already sorted for you for each index prefix.</p>\n<p>I wrote a basic version just now in Node that does the actual calculation of the index intersection by assigning each primary key an offset for a bitmap using a counter and a hash table (an actual hash table not a JavaScript object <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=6\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"> ). Then I intersected them with Roaring Bitmap and outputted the result into a Uint32Array. The data itself was two large buffers of 16 byte keys that you could imagine representing keys in FoundationDB.</p>\n<p>At two indexes, one with 1 million items and the other with 500k, the entire process took ~500ms or 333ns per processed index entry. A C++ implementation with codegen could do better, but an interpreted model would probably be worse due to cache misses. The majority of the time in this example is taken up by the hash table lookups (100ns for check key, 200ns for write key).</p>\n<p>Reading 1.5m keys from FoundationDB would take quite a while and you\u2019d eventually start running up against the transaction size limit. Just keys alone, without any overhead, for that specific example query would be 24mb.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-19T23:26:20.851Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 5,
        "reads": 82,
        "readers_count": 81,
        "score": 56.4,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2387,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2018-10-20T10:39:48.637Z",
        "cooked": "<p>I\u2019ve played with compressed bitmaps for indexing, but one issue I\u2019ve had is that they assume that primary keys are sequential integers without (or very few) gaps. This does not work well with scenarios were UUID (or even VersionStamps) are required.</p>\n<p>I could add a \u201cshadow\u201d primary key that is an integer just for the purpose of indexing, but then I shift the problem to the write side: a sequential global id creates potential conflicts, and also requires that you have to successfully talk to the db before knowing the id of new items, while uuids can be generated in advance.</p>\n<p>Are there any good strategy to still get the benefits of compressed bitmaps but keep (random) UUIDs or very sparse sequence numbers like Versionstamps? Right know, I\u2019ve had to resort to doing a combination of merge sorts on parallel index range reads, and finishing up with an optional filter on the raw documents for non-indexed fields, which is a bit wasteful in term of network bandwidth.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-20T10:40:39.648Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 10,
        "reads": 78,
        "readers_count": 77,
        "score": 65.6,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2388,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-10-20T13:47:59.502Z",
        "cooked": "<p>If you only need it in the context of a single query, you can just build the bitmap at runtime. You can dictionary encode keys using a hash table and use an integer counter variable to hand out indexes in the bitmap.</p>\n<p>This can be parallelized by reading non-overlapping ranges of keys. The resulting bitmaps are not comparable to each other in that case though without extra work.</p>\n<p>If you have reasonable number of \u201croot\u201d entities that only compare and join to their children, you could create and update an individual counter for each one of the root entities. Then you would be able to create the bitmap without the dictionary encoding step for each root entity.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-20T13:47:59.502Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 14,
        "reads": 74,
        "readers_count": 73,
        "score": 89.8,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2389,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-10-20T15:08:09.001Z",
        "cooked": "<p>One approach to use compressed bitmaps for indexing mutable collections (over FDB or elsewhere) is to basically keep two index partitions: one compressed bitmap and one \u201cstandard\u201d (value, pk) secondary index, such that each row is in one of them.  Insertions and updates go into the standard index, a background process rebuilds the bitmaps \u201cslowly\u201d so as to keep the standard index small, and reads look at both.  (You might or might not actually do an index intersection query for the second part of a read; you also have the option of doing a nested loop intersection where you just scan the smallest index and look up the rows in question.  But either way you are only reading a fraction of rows from the (expensive to read) standard index and only updating the (expensive to write) compressed bitmap index at a fraction of your actual write rate.  And you only need to assign the bitmap index IDs as you rebuild the bitmaps, so the concurrency problems with that are minimal.</p>\n<p>Another approach is to try to update the compressed bitmaps in place.  As Christophe says, you need to have an efficient way of allocating reasonably compact identifiers without causing transaction conflicts.  The directory layer\u2019s allocator doesn\u2019t meet all the requirements but I think that something that does is doable.  If this turns out to be an important approach, it would probably be worth adding some atomic operations for updating compressed bitmap blocks.</p>\n<p>Whether you are doing this or something less sophisticated, of course you need to make sure you keep parallel queries outstanding to hide network latency.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 7,
        "updated_at": "2018-10-20T15:08:09.001Z",
        "reply_count": 0,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 11,
        "reads": 72,
        "readers_count": 71,
        "score": 69.4,
        "yours": false,
        "topic_id": 792,
        "topic_slug": "secondary-indexing-approaches",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 81,
          "username": "ryanworl",
          "name": "Ryan Worl",
          "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/secondary-indexing-approaches/792/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      2378,
      2381,
      2382,
      2383,
      2387,
      2388,
      2389
    ]
  },
  "timeline_lookup": [
    [
      1,
      2559
    ],
    [
      6,
      2558
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Secondary indexing approaches",
  "id": 792,
  "title": "Secondary indexing approaches",
  "posts_count": 7,
  "created_at": "2018-10-19T19:24:02.093Z",
  "views": 2905,
  "reply_count": 2,
  "like_count": 1,
  "last_posted_at": "2018-10-20T15:08:09.001Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "secondary-indexing-approaches",
  "category_id": 7,
  "word_count": 1259,
  "deleted_at": null,
  "user_id": 391,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_792",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 7,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Any chance of server-side Boolean operations like intersection?",
      "id": 445,
      "title": "Any chance of server-side Boolean operations like intersection?",
      "slug": "any-chance-of-server-side-boolean-operations-like-intersection",
      "posts_count": 9,
      "reply_count": 3,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-05-21T10:01:41.965Z",
      "last_posted_at": "2018-05-22T16:57:56.442Z",
      "bumped": true,
      "bumped_at": "2018-05-22T16:57:56.442Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 1706,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Implementing sorting by one field and filtering by another",
      "id": 1276,
      "title": "Implementing sorting by one field and filtering by another",
      "slug": "implementing-sorting-by-one-field-and-filtering-by-another",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2019-04-02T12:42:34.217Z",
      "last_posted_at": "2019-04-03T08:23:30.090Z",
      "bumped": true,
      "bumped_at": "2019-04-03T08:23:30.090Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1015,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 554,
            "username": "chanon",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/c/a587f6/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        }
      ]
    },
    {
      "fancy_title": "Best way to add an index on already-existing data?",
      "id": 97,
      "title": "Best way to add an index on already-existing data?",
      "slug": "best-way-to-add-an-index-on-already-existing-data",
      "posts_count": 3,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-04-20T04:59:04.978Z",
      "last_posted_at": "2018-04-21T14:52:02.378Z",
      "bumped": true,
      "bumped_at": "2018-04-21T14:52:02.378Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 3525,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 67,
            "username": "bpartridge",
            "name": "Brenton Partridge",
            "avatar_template": "/user_avatar/forums.foundationdb.org/bpartridge/{size}/50_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 30,
            "username": "wwilson",
            "name": "Will Wilson",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wwilson/{size}/88_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Emulate secondary index",
      "id": 430,
      "title": "Emulate secondary index",
      "slug": "emulate-secondary-index",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-05-18T07:04:04.967Z",
      "last_posted_at": "2018-05-21T14:11:05.503Z",
      "bumped": true,
      "bumped_at": "2018-05-21T14:11:05.503Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1123,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 268,
            "username": "urykhy",
            "name": "Yury",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 190,
            "username": "itp",
            "name": "Ian Peters",
            "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Query practices with FDB",
      "id": 4369,
      "title": "Query practices with FDB",
      "slug": "query-practices-with-fdb",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2024-02-25T19:41:05.910Z",
      "last_posted_at": "2024-02-25T19:41:06.065Z",
      "bumped": true,
      "bumped_at": "2024-02-25T19:41:06.065Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1022,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 1387,
            "username": "Jamamp",
            "name": "James Linnell",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jamamp/{size}/1754_2.png",
            "trust_level": 0
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 391,
        "username": "atombender",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 391,
      "username": "atombender",
      "name": "",
      "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png"
    },
    "last_poster": {
      "id": 22,
      "username": "dave",
      "name": "David Scherer",
      "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
    }
  },
  "bookmarks": []
}