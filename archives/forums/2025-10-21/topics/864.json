{
  "post_stream": {
    "posts": [
      {
        "id": 2629,
        "name": "Jeff Baker",
        "username": "jwb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png",
        "created_at": "2018-11-12T18:15:45.640Z",
        "cooked": "<p>I have a small test cluster with three machines.  Under a single-threaded range scan workload every fdbserver process in the cluster crashes with OutOfMemory in a loop forever.  Has anyone else experienced a similar phenomenon?</p>\n<p>Details: Each of my machines has 17 procs.  The cluster is in double redundancy mode with ssd storage engine. Servers are given 16GiB of memory. The database contains 25GiB logical / 72GiB physical bytes of keys uniformly distributed over the 128-bit hex-formatted numbers, such as 012341463b7c48dc6d2c84f6e25d1e01, and values are 1000-byte-long strings of the ASCII letter \u2018x\u2019.</p>\n<p>The read-only workload is a sequence of 10000-row range scans with random starting keys, generated with this shell fragment:</p>\n<p><code>paste -d \" \" &lt;(yes getrange) &lt;(hexdump -e '3/1 \"%02x\" \" ~ 10000\" \"\\n\"' /dev/urandom) | fdbcli</code></p>\n<p>Which generates an infinite stream of commands such as</p>\n<pre><code class=\"lang-auto\">getrange 4c5d4b ~ 10000\ngetrange e15b7d ~ 10000\ngetrange c17229 ~ 10000\ngetrange 002e54 ~ 10000\n[etc]\n</code></pre>\n<p>The fdbserver processes crash, restart, begin with a normal amount of memory and slowly increase to 16GiB whereupon they commit suicide.  For example here are the first 8 processes in my cluster at the moment, according to <code>status details</code>.  They have more or less memory based on their uptime.</p>\n<pre><code class=\"lang-auto\">Process performance details:\n  10.58.227.29:5000      (  2% cpu;  5% machine; 0.038 Gbps; 11% disk IO; 2.3 GB / 21.8 GB RAM  )\n  10.58.227.29:5001      (  3% cpu;  5% machine; 0.038 Gbps; 12% disk IO;13.9 GB / 21.8 GB RAM  )\n  10.58.227.29:5002      (  3% cpu;  5% machine; 0.038 Gbps; 12% disk IO;11.9 GB / 21.8 GB RAM  )\n  10.58.227.29:5003      (  2% cpu;  5% machine; 0.038 Gbps; 12% disk IO; 6.7 GB / 21.8 GB RAM  )\n  10.58.227.29:5004      (  2% cpu;  5% machine; 0.038 Gbps; 13% disk IO;15.4 GB / 21.8 GB RAM  )\n  10.58.227.29:5005      (  2% cpu;  5% machine; 0.038 Gbps; 11% disk IO; 2.4 GB / 21.8 GB RAM  )\n  10.58.227.29:5006      (  2% cpu;  5% machine; 0.038 Gbps; 12% disk IO; 3.8 GB / 21.8 GB RAM  )\n  10.58.227.29:5007      (  2% cpu;  5% machine; 0.038 Gbps; 13% disk IO;11.1 GB / 21.8 GB RAM  )\n</code></pre>\n<p>fdbmonitor logs these forever:</p>\n<pre><code class=\"lang-auto\">Time=\"1542044692.128336\" Severity=\"40\" LogGroup=\"default\" Process=\"fdbserver.5016\": ERROR: Out of memory\nTime=\"1542044692.348744\" Severity=\"40\" LogGroup=\"default\" Process=\"fdbserver.5016\": Process 17614 exited 20, restarting in 0 seconds\nTime=\"1542044692.349131\" Severity=\"10\" LogGroup=\"default\" Process=\"fdbserver.5016\": Launching /home/jbaker/fdbserver/fdbserver (46165) for fdbserver.5016\nTime=\"1542044692.393349\" Severity=\"10\" LogGroup=\"default\" Process=\"fdbserver.5016\": FDBD joined cluster.\nTime=\"1542044692.825305\" Severity=\"40\" LogGroup=\"default\" Process=\"fdbserver.5010\": ERROR: Out of memory\nTime=\"1542044693.004250\" Severity=\"40\" LogGroup=\"default\" Process=\"fdbserver.5010\": Process 17635 exited 20, restarting in 0 seconds\nTime=\"1542044693.004585\" Severity=\"10\" LogGroup=\"default\" Process=\"fdbserver.5010\": Launching /home/jbaker/fdbserver/fdbserver (46169) for fdbserver.5010\nTime=\"1542044693.114201\" Severity=\"10\" LogGroup=\"default\" Process=\"fdbserver.5010\": FDBD joined cluster.\nTime=\"1542044695.363137\" Severity=\"40\" LogGroup=\"default\" Process=\"fdbserver.5015\": ERROR: Out of memory\nTime=\"1542044695.552435\" Severity=\"40\" LogGroup=\"default\" Process=\"fdbserver.5015\": Process 22673 exited 20, restarting in 0 seconds\nTime=\"1542044695.552915\" Severity=\"10\" LogGroup=\"default\" Process=\"fdbserver.5015\": Launching /home/jbaker/fdbserver/fdbserver (46186) for fdbserver.5015\nTime=\"1542044695.720293\" Severity=\"10\" LogGroup=\"default\" Process=\"fdbserver.5015\": FDBD joined cluster.\n</code></pre>\n<p>Just before they die, the fdbserver processes log traces like these, which lead me to believe that the allocator is unaware of the memory situation:</p>\n<pre><code class=\"lang-auto\">&lt;Event Severity=\"10\" Time=\"1542040214.826810\" Type=\"MemoryMetrics\" ID=\"0000000000000000\" \nAllocatedMemory16=\"131072\" ApproximateUnusedMemory16=\"0\" AllocatedMemory32=\"1179648\" \nApproximateUnusedMemory32=\"786432\" AllocatedMemory64=\"17432576\" \nApproximateUnusedMemory64=\"1441792\" AllocatedMemory128=\"66846720\" \nApproximateUnusedMemory128=\"0\" AllocatedMemory256=\"1441792\" \nApproximateUnusedMemory256=\"1179648\" AllocatedMemory512=\"393216\" \nApproximateUnusedMemory512=\"131072\" AllocatedMemory1024=\"131072\" \nApproximateUnusedMemory1024=\"0\" AllocatedMemory2048=\"4194304\" \nApproximateUnusedMemory2048=\"3932160\" AllocatedMemory4096=\"962330624\" \nApproximateUnusedMemory4096=\"2883584\" Machine=\"10.58.75.25:5016\" LogGroup=\"default\" Roles=\"SS\" \n/&gt;\n</code></pre>\n<p>The process seems to have relatively little RSS and quite a large VM:</p>\n<pre><code class=\"lang-auto\">$ grep -E 'Rss|Vm' status\nVmPeak: 13888952 kB\nVmSize: 13888952 kB\nVmLck:         0 kB\nVmPin:         0 kB\nVmHWM:     72996 kB\nVmRSS:     72996 kB\nRssAnon:           53412 kB\nRssFile:           19584 kB\nRssShmem:              0 kB\nVmData: 13714524 kB\nVmStk:       132 kB\nVmExe:     23144 kB\nVmLib:      4712 kB\nVmPTE:       240 kB\nVmPMD:        64 kB\nVmSwap:        0 kB\n</code></pre>\n<p>And smaps confirms that most of this space is not in Rss, it\u2019s in private anonymous hugetlb maps:</p>\n<pre><code class=\"lang-auto\">Size:               2048 kB\nRss:                   0 kB\nPss:                   0 kB\nShared_Clean:          0 kB\nShared_Dirty:          0 kB\nPrivate_Clean:         0 kB\nPrivate_Dirty:         0 kB\nReferenced:            0 kB\nAnonymous:             0 kB\nAnonHugePages:         0 kB\nShmemPmdMapped:        0 kB\nShared_Hugetlb:        0 kB\nPrivate_Hugetlb:    2048 kB\nSwap:                  0 kB\nSwapPss:               0 kB\nKernelPageSize:     2048 kB\nMMUPageSize:        2048 kB\nLocked:                0 kB\n</code></pre>\n<p>It looks like the process has limited itself or been limited by fdbmonitor to a virtual address space equal to the memory I\u2019ve configured for it (16GiB)</p>\n<pre><code class=\"lang-auto\">$ grep address /proc/35546/limits\nMax address space         17179869184          unlimited            bytes     \n</code></pre>\n<p>and I can see that the fdbserver process does a lot of these 128KiB mmaps:</p>\n<pre><code class=\"lang-auto\">$ strace -e mmap -p 35546\nmmap(NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_HUGETLB, -1, 0) = 0x7f01e0000000\nmmap(NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_HUGETLB, -1, 0) = 0x7f01dfe00000\nmmap(NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_HUGETLB, -1, 0) = 0x7f01dfc00000\nmmap(NULL, 131072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_HUGETLB, -1, 0) = 0x7f01dfa00000\n</code></pre>\n<p>So it appears to leak these maps without paging them in.  It\u2019s leaking 2MiB per 128KiB map because it\u2019s explicitly requesting a huge page. How can I debug this further, or fix it?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-12T18:15:45.640Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 154,
        "reads": 63,
        "readers_count": 62,
        "score": 784.6,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Jeff Baker",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 424,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 2635,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-11-12T20:21:34.745Z",
        "cooked": "<p>You basically debugged 99% of this already.  At this point, you can just do what I did, and search the codebase for <code>MAP_HUGETLB</code>.  Or if you wished to debug this as a black box, you would need a symbolicated fdbserver binary, and probably to write a tiny shim library that wraps mmap, checks to see if MAP_HUGETLB is set in flags, and if so, call some function that crashes / you have a gdb breakpoint set on.</p>\n<p>But, you\u2019ve laid out enough detail that I believe I can fill in the rest for you anyway.  So the background of what\u2019s happening here:</p>\n<p>FoundationDB is written in a style where arena allocation is frequently used to speed up request handling.  The arenas are formed from chunks of 128KiB which are pulled from a freelist.  If there aren\u2019t any, we allocate another one, and when the arena is destroyed, its 128KiB chunks are added to the freelist.</p>\n<p>You are correct that there exists code in FDB to <a href=\"https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/Platform.cpp#L1481\" rel=\"nofollow noopener\">explicitly request huge pages</a>, and this is indeed <a href=\"https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/FastAlloc.cpp#L377\" rel=\"nofollow noopener\">requested if supported</a> when allocating a 128KiB chunk.  Looking at this now, I\u2019m kind of not clear why.  I\u2019m going to guess that FDB hasn\u2019t really been tested on systems that support large pages before, because it\u2019s not clear to me why this wouldn\u2019t always quickly OOM.  Although we do always request huge pages, if the system ever doesn\u2019t have one to offer, we never ask for them again.</p>\n<p>There is unfortunately no knob offered that you can easily tweak to get out of this situation.  Disabling hugepages on your systems would probably be the only sensible way forward.  A similar trick of replacing mmap via LD_PRELOAD to return <code>MAP_FAILED</code> if <code>MAP_HUGETLB</code> is set would be an obscenely hacky workaround.</p>\n<p>This really reads like what we should be doing is viewing <a href=\"https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/FastAlloc.h#L123\" rel=\"nofollow noopener\">magazine_size</a> as 128KiB if huge pages aren\u2019t supported, and 2MiB if they are supported.</p>\n<p>You\u2019re welcome to file an issue on GitHub about inappropriately requesting hugepages, or I\u2019ll get around to filing one sometime later today.  This also means I need to go figure out how to set up a VM with hugepage support\u2026 hrm.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-12T20:21:34.745Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 57,
        "readers_count": 56,
        "score": 31.4,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/Platform.cpp#L1481",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/Platform.cpp at 6bb1f4093d9b363a350831341230c6cb46e3c906 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 4
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/FastAlloc.cpp#L377",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/FastAlloc.cpp at 6bb1f4093d9b363a350831341230c6cb46e3c906 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 4
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/FastAlloc.h#L123",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/FastAlloc.h at 6bb1f4093d9b363a350831341230c6cb46e3c906 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2637,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-11-12T21:35:18.498Z",
        "cooked": "<p>We\u2019re going to be cutting a hopefully-publishable 6.0 release real soon now, so I filed <a href=\"https://github.com/apple/foundationdb/issues/909\" rel=\"nofollow noopener\">#909</a> and will try to quickly submit a PR that disables our requesting of huge pages, as it appears to be obviously broken.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-12T21:35:18.498Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 54,
        "readers_count": 53,
        "score": 25.8,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/issues/909",
            "internal": false,
            "reflection": false,
            "title": "Consistent OOMs seen on huge page enabled systems \u00b7 Issue #909 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 7
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2639,
        "name": "Jeff Baker",
        "username": "jwb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png",
        "created_at": "2018-11-12T21:52:18.170Z",
        "cooked": "<p>Thanks.  Is that why I\u2019m the first person to hit this?  It\u2019s new in v6?</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-12T21:52:18.170Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 49,
        "readers_count": 48,
        "score": 14.8,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Jeff Baker",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 424,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2643,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-11-12T23:31:45.495Z",
        "cooked": "<p>Not many people run their systems with huge pages enabled.  The implication here is that you\u2019re using some servers that someone, likely other than you, configured to run a bunch of services on, and also went through the effort of flipping on Hugepage support.  Which is also why if you disable huge pages on your system, then FDB will stop doing the wrong thing.</p>\n<pre><code class=\"lang-auto\">$ cat /proc/meminfo | grep Huge\nAnonHugePages:         0 kB\nShmemHugePages:        0 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\n</code></pre>\n<p>Shows them as disabled by default on my Ubuntu 16.04 VM that\u2019s used for most of my development.</p>\n<p>You might be able to just do <code>sudo sysctl -w vm.nr_hugepages=0</code> to flip them off, if there\u2019s nothing else running on your machines that\u2019ll be impacted.</p>\n<p>It\u2019ll be fixed in 6.0, as <a href=\"https://github.com/apple/foundationdb/pull/910\" rel=\"nofollow noopener\">#910</a> was merged in time to make the cut.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-12T23:31:45.495Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 47,
        "readers_count": 46,
        "score": 19.4,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/pull/910",
            "internal": false,
            "reflection": false,
            "title": "Don't allocate magazines backed by hugepages on systems that support them. by alexmiller-apple \u00b7 Pull Request #910 \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 424,
          "username": "jwb",
          "name": "Jeff Baker",
          "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2644,
        "name": "Jeff Baker",
        "username": "jwb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png",
        "created_at": "2018-11-12T23:41:40.151Z",
        "cooked": "<p>I already have vm.nr_hugepages=0.  I don\u2019t believe that effectively disables hugepages, it only makes them non-persistent.  I have nr_overcommit_hugepages=200000, intentionally.  The output you show does not necessarily indicate that your system has huge pages disabled, although the absence of them is strong evidence.  Mine looks like this. You can see that my hugepages are \u201csurplus\u201d, that is, over and above nr_hugepages.</p>\n<pre><code class=\"lang-auto\">$ grep -i huge /proc/meminfo\nAnonHugePages:         0 kB\nShmemHugePages:        0 kB\nHugePages_Total:   88563\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:    88563\nHugepagesize:       2048 kB\n</code></pre>\n<p>But anyway, have you considered simply getting your 128KiB blocks of memory from <code>operator new[]</code>? instead of the FoundationDB-defined <code>::allocate</code>? That would allow the user to build with their favorite allocator.  Some of these allocators are quite battle-tested and some of them are even hugepages-aware.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-12T23:41:40.151Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 46,
        "readers_count": 45,
        "score": 24.2,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Jeff Baker",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 424,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2646,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-11-13T00:43:09.444Z",
        "cooked": "<p>Ah, you\u2019re more knowledgeable than me on the subject then.  If you have a link to suggest on the current state of Hugepage support and configuration for it, I\u2019d be interested.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"jwb\" data-post=\"6\" data-topic=\"864\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/jwb/48/413_2.png\" class=\"avatar\"> jwb:</div>\n<blockquote>\n<p>But anyway, have you considered simply getting your 128KiB blocks of memory from <code>operator new[]</code> instead of the FoundationDB-defined <code>::allocate</code> ?</p>\n</blockquote>\n</aside>\n<p>I mean, it\u2019s a surprise to me that we\u2019re directly calling mmap, and that we\u2019re requesting huge pages.  I think <a class=\"mention\" href=\"/u/dave\">@Dave</a> would be the only person that might know why this code exists.  It kind of looks like it might have been a performance experiment that wasn\u2019t finished, as the test for it is commented out?</p>\n<p>I\u2019d expect that replacing <code>mmap</code> with <code>malloc</code> would have no effect, as default glibc malloc would just call <code>mmap</code> anyway, but this is the sort of thing one would have to spend some moderate time performance testing to make sure that there\u2019s not something that\u2019d be subtly different in a way that would affect performance.</p>\n<p>I see that tcmalloc has an <a href=\"https://github.com/jemalloc/jemalloc/issues/932\">open issue for Hugepage support</a>, and I don\u2019t see any comment about it in tcmalloc.  Would you happen to be able to point me towards a description of which allocators do more intelligent things with Hugepage systems, and what those intelligent things are?</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-13T00:43:09.444Z",
        "reply_count": 0,
        "reply_to_post_number": 6,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 43,
        "readers_count": 42,
        "score": 18.6,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/jemalloc/jemalloc/issues/932",
            "internal": false,
            "reflection": false,
            "title": "Think about hugepages \u00b7 Issue #932 \u00b7 jemalloc/jemalloc \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2651,
        "name": "David Scherer",
        "username": "dave",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "created_at": "2018-11-13T19:08:48.669Z",
        "cooked": "<p>IIRC we long ago enabled large page support because it reduces TLB pressure, and thus improves performance a bit everywhere. I don\u2019t have access to deep source control history, but I\u2019m guessing the bug under discussion was introduced by reducing the size of allocations done by fast allocator, which was probably 2MiB+ originally.</p>\n<p>Fast allocator never frees these blocks, so a fix that grabs memory in 2MiB chunks and gives it to fast allocator in smaller chunks, wouldn\u2019t be rocket science. Getting the memory from a malloc that supports large pages would also probably be fine, though it could be bad if it tries to interleave unnecessary (because no free) bookkeeping information with otherwise perfectly aligned chunks.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-13T19:08:48.669Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 39,
        "readers_count": 38,
        "score": 12.8,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "David Scherer",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 22,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2652,
        "name": "Jeff Baker",
        "username": "jwb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png",
        "created_at": "2018-11-13T19:40:20.904Z",
        "cooked": "<p>TLB pressure is very important so I definitely agree with the idea of using huge pages where applicable.  jemalloc 5 and later are hugepages-friendly.  tcmalloc may someday be (I have seen versions of tcmalloc that are). As far as alignment goes, are there particular requirements?  <code>operator new[]</code> always returns a pointer aligned as requested.  The metadata and disadvantageous alignment you are thinking of comes from calling <code>foo = new T[5]</code> instead of <code>operator new[]</code> itself.  The compiler adds metadata so you can later do an unsized delete as in <code>delete[] foo</code>.  If you intend to call a sized delete, or to never delete, then you can call <code>operator new[]</code> directly.</p>\n<p>I\u2019m going to play around with this and see what happens if I replace FDB\u2019s <code>::allocate</code> with something else.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-13T19:40:49.361Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 41,
        "readers_count": 40,
        "score": 18.2,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Jeff Baker",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 22,
          "username": "dave",
          "name": "David Scherer",
          "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 424,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2655,
        "name": "Jeff Baker",
        "username": "jwb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png",
        "created_at": "2018-11-13T22:03:20.420Z",
        "cooked": "<p>Stumbling over the answer to my own question: the results of ::allocate must be aligned to 4096, or the process will suicide.</p>\n<p><code>ASSERT( int64_t(io-&gt;buf) % 4096 == 0 &amp;&amp; io-&gt;offset % 4096 == 0 &amp;&amp; io-&gt;nbytes % 4096 == 0 );</code></p>\n<p>Which means that the <code>operator new[](size_t, align_t, nothrow_t)</code> form can be used, but that requires c++17.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 10,
        "updated_at": "2018-11-13T22:03:20.420Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 39,
        "readers_count": 38,
        "score": 7.8,
        "yours": false,
        "topic_id": 864,
        "topic_slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
        "display_username": "Jeff Baker",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 424,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload/864/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      2629,
      2635,
      2637,
      2639,
      2643,
      2644,
      2646,
      2651,
      2652,
      2655
    ]
  },
  "timeline_lookup": [
    [
      1,
      2535
    ],
    [
      8,
      2534
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Continuous out-of-memory crashes in small cluster with modest read-only workload",
  "id": 864,
  "title": "Continuous out-of-memory crashes in small cluster with modest read-only workload",
  "posts_count": 10,
  "created_at": "2018-11-12T18:15:45.539Z",
  "views": 1256,
  "reply_count": 6,
  "like_count": 0,
  "last_posted_at": "2018-11-13T22:03:20.420Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "continuous-out-of-memory-crashes-in-small-cluster-with-modest-read-only-workload",
  "category_id": 7,
  "word_count": 2251,
  "deleted_at": null,
  "user_id": 424,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_864",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 10,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Foundationdb 6.2 - fdbserver going out of memory",
      "id": 2080,
      "title": "Foundationdb 6.2 - fdbserver going out of memory",
      "slug": "foundationdb-6-2-fdbserver-going-out-of-memory",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2020-04-20T14:55:39.274Z",
      "last_posted_at": "2020-04-23T04:34:49.858Z",
      "bumped": true,
      "bumped_at": "2020-04-23T04:34:49.858Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1037,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 714,
            "username": "tuk",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/b5ac83/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Large spikes in memory usage on storage processes, 6.0.18",
      "id": 2115,
      "title": "Large spikes in memory usage on storage processes, 6.0.18",
      "slug": "large-spikes-in-memory-usage-on-storage-processes-6-0-18",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": "https://global.discourse-cdn.com/foundationdb/optimized/1X/4c7f8a022ee38e69df8abe772878aff823a76550_2_1024x320.png",
      "created_at": "2020-05-12T19:17:47.329Z",
      "last_posted_at": "2020-05-12T21:58:14.570Z",
      "bumped": true,
      "bumped_at": "2020-05-12T21:58:14.570Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 582,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 490,
            "username": "rjenkins",
            "name": "Ray Jenkins",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rjenkins/{size}/487_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FDB out of memory",
      "id": 3460,
      "title": "FDB out of memory",
      "slug": "fdb-out-of-memory",
      "posts_count": 6,
      "reply_count": 2,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2022-07-20T03:12:58.094Z",
      "last_posted_at": "2022-07-22T12:33:26.077Z",
      "bumped": true,
      "bumped_at": "2022-07-22T12:54:40.104Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 962,
      "category_id": 17,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 1126,
            "username": "CodingSuen",
            "name": "CodingSuen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/codingsuen/{size}/1367_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 454,
            "username": "jzhou",
            "name": "Jingyu Zhou",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
            "admin": true,
            "moderator": true,
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 164,
            "username": "Imperatorx",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/i/d2c977/{size}.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Segmentation fault error and broken cluster",
      "id": 483,
      "title": "Segmentation fault error and broken cluster",
      "slug": "segmentation-fault-error-and-broken-cluster",
      "posts_count": 17,
      "reply_count": 12,
      "highest_post_number": 17,
      "image_url": null,
      "created_at": "2018-05-31T15:34:28.123Z",
      "last_posted_at": "2018-06-11T17:31:13.656Z",
      "bumped": true,
      "bumped_at": "2018-06-11T17:31:13.656Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 4331,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 211,
            "username": "brk0v",
            "name": "Viacheslav Biriukov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "&lsquo;ERROR: Out of memory&rsquo; crashed from fdbserver",
      "id": 3556,
      "title": "'ERROR: Out of memory' crashed from fdbserver",
      "slug": "error-out-of-memory-crashed-from-fdbserver",
      "posts_count": 4,
      "reply_count": 1,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2022-09-21T17:45:03.267Z",
      "last_posted_at": "2022-09-28T06:50:59.544Z",
      "bumped": true,
      "bumped_at": "2022-09-28T06:50:59.544Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings",
        "performance"
      ],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 519,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 1134,
            "username": "ZhangHuiGui",
            "name": "Zhang Hui Gui",
            "avatar_template": "/user_avatar/forums.foundationdb.org/zhanghuigui/{size}/1377_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 1133,
            "username": "redcuckoo",
            "name": "Yurii Momotenko",
            "avatar_template": "/user_avatar/forums.foundationdb.org/redcuckoo/{size}/1660_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 424,
        "username": "jwb",
        "name": "Jeff Baker",
        "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png",
        "post_count": 5,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 22,
        "username": "dave",
        "name": "David Scherer",
        "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 424,
      "username": "jwb",
      "name": "Jeff Baker",
      "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png"
    },
    "last_poster": {
      "id": 424,
      "username": "jwb",
      "name": "Jeff Baker",
      "avatar_template": "/user_avatar/forums.foundationdb.org/jwb/{size}/413_2.png"
    },
    "links": [
      {
        "url": "https://github.com/apple/foundationdb/issues/909",
        "title": "Consistent OOMs seen on huge page enabled systems \u00b7 Issue #909 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/pull/910",
        "title": "Don't allocate magazines backed by hugepages on systems that support them. by alexmiller-apple \u00b7 Pull Request #910 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/FastAlloc.cpp#L377",
        "title": "foundationdb/FastAlloc.cpp at 6bb1f4093d9b363a350831341230c6cb46e3c906 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/6bb1f4093d9b363a350831341230c6cb46e3c906/flow/Platform.cpp#L1481",
        "title": "foundationdb/Platform.cpp at 6bb1f4093d9b363a350831341230c6cb46e3c906 \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/jemalloc/jemalloc/issues/932",
        "title": "Think about hugepages \u00b7 Issue #932 \u00b7 jemalloc/jemalloc \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}