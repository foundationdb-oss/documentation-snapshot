{
  "post_stream": {
    "posts": [
      {
        "id": 8895,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2020-12-19T09:10:53.542Z",
        "cooked": "<p>I am restarting my work on <a href=\"https://forums.foundationdb.org/t/ann-python-asyncio-bindings-asyncio-foundationdb/605\">python asyncio foundationdb bindings</a>.</p>\n<p>One feedback I get a lot about foundationdb is about how to query the database: \u201cWhere is the declarative language\u201d\u2026 This is mostly in comparison with SQL databases, even if eventually most people hide the SQL with an API with something like an ORM!</p>\n<p>In fact, there is really 6 methods to know about to be able to be productive:</p>\n<ul>\n<li>get (read)</li>\n<li>set (create or update)</li>\n<li>range (read)</li>\n<li>range_startswith (read)</li>\n<li>clear (delete)</li>\n<li>clear_range (delete)</li>\n</ul>\n<p>We can add to that <code>get_key</code> but so far I do not use it.</p>\n<p>I want to reduce further the API surface in (my) python asyncio bindings and introduce a <code>Transaction.query</code> method that will merge the behavior of <code>get</code>, <code>range</code> and <code>range_startswith</code> together, also <code>clear</code> and <code>clear_range</code> will be a single method.</p>\n<p>Here is the signature of <code>Transaction.query</code>:</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">Transaction.query(selector, other=None, limit=None)\n</code></pre>\n<p>In particular if <code>other.key &lt; selector.key</code> then it means that results should be returned reversed and is equivalent to <code>tr.range(selector, other, reverse=True)</code></p>\n<p>Also, will make <code>tuple.strinc</code> public to be able to query by prefix (or add a <code>prefix</code> keyword argument?)</p>\n<p>Similarly, to clear a range or single key there will be:</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">Transaction.delete(selector, other=None)\n</code></pre>\n<p>Case in point: I think this is more explicit how to query since there is a method called <code>query</code>.</p>\n<p>Long story, I struggle with <code>KeySelector</code>:</p>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216\" target=\"_blank\" rel=\"noopener nofollow ugc\">apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216</a></h4>\n\n\n\n    <pre class=\"onebox\"><code class=\"lang-py\">\n      <ol class=\"start lines\" start=\"1187\" style=\"counter-reset: li-counter 1186 ;\">\n          <li>class KeySelector(object):</li>\n          <li>    def __init__(self, key, or_equal, offset):</li>\n          <li>        self.key = key</li>\n          <li>        self.or_equal = or_equal</li>\n          <li>        self.offset = offset</li>\n          <li></li>\n          <li>    def __add__(self, offset):</li>\n          <li>        return KeySelector(self.key, self.or_equal, self.offset + offset)</li>\n          <li></li>\n          <li>    def __sub__(self, offset):</li>\n          <li>        return KeySelector(self.key, self.or_equal, self.offset - offset)</li>\n          <li></li>\n          <li>    @classmethod</li>\n          <li>    def last_less_than(cls, key):</li>\n          <li>        return cls(key, False, 0)</li>\n          <li></li>\n          <li>    @classmethod</li>\n          <li>    def last_less_or_equal(cls, key):</li>\n          <li>        return cls(key, True, 0)</li>\n          <li></li>\n      </ol>\n    </code></pre>\n\n\n  This file has been truncated. <a href=\"https://github.com/apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>I will not explain what I do not understand to avoid to add confusion except ask the question:</p>\n<blockquote>\n<p>Why <code>first_greater_or_equal</code> has <code>or_equal == False</code></p>\n</blockquote>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2020-12-19T09:10:53.542Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 315,
        "reads": 45,
        "readers_count": 44,
        "score": 1584.0,
        "yours": false,
        "topic_id": 2492,
        "topic_slug": "another-api-for-querying-and-keyselector",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/ann-python-asyncio-bindings-asyncio-foundationdb/605",
            "internal": true,
            "reflection": false,
            "title": "[ANN] Python asyncio bindings - asyncio-foundationdb",
            "clicks": 7
          },
          {
            "url": "https://github.com/apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/impl.py at 0254869dd667f334196d6a3dd7888d2cf175d80d \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/another-api-for-querying-and-keyselector/2492/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 8983,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2021-01-25T20:08:28.921Z",
        "cooked": "<p>Key selectors are used to implement a \u201ccursor\u201d that scans the B-Tree, in lexicographical order, looking for \u201creal\u201d keys that match the selector. Basically it scans existing keys one after the other until the key-selector \u201cmatches\u201d, and then applies the specified offset (which can also be negative!)</p>\n<p><a href=\"https://apple.github.io/foundationdb/developer-guide.html#key-selectors\" rel=\"noopener nofollow ugc\">From the documentation</a></p>\n<blockquote>\n<p>To \u201cresolve\u201d these key selectors FoundationDB first finds the last key less than the reference key (or equal to the reference key, if the equality flag is true), then moves forward a number of keys equal to the offset (or backwards, if the offset is negative).</p>\n</blockquote>\n<p>So in the case of the <code>first_greater_or_equal</code> (or_equal = false, offset = 1) it tries to find the last key that is <em>NOT</em> equal to what you want, and then advance by one.</p>\n<p>For example if the db contains keys <code>A B C D E F</code> and you create a key selector <code>(D, false, 1)</code>, it will try to find the last key that is before and NOT equal to <code>D</code>, which in this case is <code>C</code>. Then it will advance by 1 and will return <code>D</code>.</p>\n<p>In the case where <code>D</code> does not exist (so db contains the keys <code>A B C E F</code>), it will still end up on key <code>C</code>, but when it advance by 1 key, it will return <code>E</code>.</p>\n<p>If you look at <code>first_greater_than</code> it uses <code>or_equal = true</code> instead of <code>false</code>, but still with offset 1: In the case where key <code>D</code> exists, then the cursor will stop on <code>D</code> (which is the last key that is &lt;= <code>D</code>), but still advance by 1 and end up on <code>E</code>. If <code>D</code> does not exist, then the cursor will stop on <code>C</code>, advance by 1 and end up on <code>E</code> again.</p>\n<p>Finally, when thinking about end selectors for <code>get_range</code> there is an extra step: the end selector also selects a key (using the same logic as the begin key), but the range operator STOPS READING WHEN IT REACHES THAT KEY. So when you are dealing with the end selector, your job is to be able to select a key that is AFTER the last key you want in your range. This explains why begin selectors usually are some variation of <code>first_great_or_equal</code>, while the end selectors are usually a variation of <code>first_greater_than</code>. You could be tempted to use a <code>last_less_than</code> or <code>last_less_or_equal</code> for the end selector but then you may select the last key of your range by mistake, and the get_range would NOT return this key.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2021-01-27T17:16:22.383Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 19,
        "reads": 30,
        "readers_count": 29,
        "score": 116.0,
        "yours": false,
        "topic_id": 2492,
        "topic_slug": "another-api-for-querying-and-keyselector",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#key-selectors",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 6.2",
            "clicks": 4
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/another-api-for-querying-and-keyselector/2492/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 8990,
        "name": "Christophe Chevalier",
        "username": "KrzysFR",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "created_at": "2021-01-27T17:21:55.083Z",
        "cooked": "<p>One more thing: <code>get(key)</code> can be emulated with a <code>get_range</code> using begin selector <code>first_greater_or_equal(key)</code>, and end selector <code>first_greater_than(key)</code>. It will return either an empty range, or a range with a single result, depending on if the key exists or not.</p>\n<p>Another variant is to use <code>first_greater_or_equal(key + '\\0')</code> as the end selector, but it requires an extra memory allocation.</p>\n<p>So you could have helpers that create a <code>query</code> that matches a single key that way.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2021-01-27T17:22:13.371Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 26,
        "readers_count": 25,
        "score": 20.2,
        "yours": false,
        "topic_id": 2492,
        "topic_slug": "another-api-for-querying-and-keyselector",
        "display_username": "Christophe Chevalier",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 53,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/another-api-for-querying-and-keyselector/2492/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9027,
        "name": "Amirouche",
        "username": "amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "created_at": "2021-01-31T14:06:58.669Z",
        "cooked": "<p>Thanks. I figured why I was confused: <code>getRange(start, end)</code> documentation is clear:</p>\n<blockquote>\n<p><code>Database.</code> <code>get_range</code> ( <em>begin</em> , <em>end</em> [, <em>limit</em> , <em>reverse</em> , <em>streaming_mode</em> ])</p>\n<p>Returns all keys <code>k</code> such that <code>begin &lt;= k &lt; end</code> and their associated values as a list of <a href=\"https://apple.github.io/foundationdb/api-python.html?highlight=range#fdb.KeyValue\" rel=\"noopener nofollow ugc\"> <code>KeyValue</code> </a> objects. Note the exclusion of <code>end</code> from the range. This read is fully synchronous.</p>\n</blockquote>\n<p>I always forget that <code>end</code> is excluded.</p>\n<p>Going through a REPL makes it clear what the KeySelector does:</p>\n<pre><code class=\"lang-auto\">\nIn [2]: import fdb\n\nIn [3]: import fdb.tuple\n\nIn [4]: fdb.api_version(620)\n\nIn [5]: db = fdb.open()\n\nIn [7]: for byte in b'ABCDEF':\n   ...:     db[bytes([byte])] = bytes([byte])\n   ...: \n   ...: \n\nIn [8]: db.get_key(fdb.KeySelector.last_less_than(b'C'))\nOut[8]: b'B'\n\nIn [9]: db.get_key(fdb.KeySelector.last_less_or_equal(b'C'))\nOut[9]: b'C'\n\nIn [10]: db.get_key(fdb.KeySelector.first_greater_or_equal(b'C'))\nOut[10]: b'C'\n\nIn [11]: db.get_key(fdb.KeySelector.first_greater_than(b'C'))\nOut[11]: b'D'\n\n</code></pre>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 4,
        "updated_at": "2021-01-31T14:06:58.669Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 17,
        "reads": 25,
        "readers_count": 24,
        "score": 90.0,
        "yours": false,
        "topic_id": 2492,
        "topic_slug": "another-api-for-querying-and-keyselector",
        "display_username": "Amirouche",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-python.html?highlight=range#fdb.KeyValue",
            "internal": false,
            "reflection": false,
            "title": "Python API \u2014 FoundationDB 6.2",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 41,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/another-api-for-querying-and-keyselector/2492/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      8895,
      8983,
      8990,
      9027
    ]
  },
  "timeline_lookup": [
    [
      1,
      1768
    ],
    [
      2,
      1730
    ],
    [
      3,
      1728
    ],
    [
      4,
      1724
    ]
  ],
  "suggested_topics": [],
  "tags": [
    "bindings"
  ],
  "tags_descriptions": {},
  "fancy_title": "Another API for querying and KeySelector",
  "id": 2492,
  "title": "Another API for querying and KeySelector",
  "posts_count": 4,
  "created_at": "2020-12-19T09:10:53.452Z",
  "views": 1178,
  "reply_count": 0,
  "like_count": 2,
  "last_posted_at": "2021-01-31T14:06:58.669Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "another-api-for-querying-and-keyselector",
  "category_id": 7,
  "word_count": 956,
  "deleted_at": null,
  "user_id": 41,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2492",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 4,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Use KeySelector.firstGreaterThan or just skip one KeyValue during iteration?",
      "id": 378,
      "title": "Use KeySelector.firstGreaterThan or just skip one KeyValue during iteration?",
      "slug": "use-keyselector-firstgreaterthan-or-just-skip-one-keyvalue-during-iteration",
      "posts_count": 14,
      "reply_count": 7,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-08T07:52:22.261Z",
      "last_posted_at": "2018-05-12T00:34:14.837Z",
      "bumped": true,
      "bumped_at": "2018-05-12T00:34:14.837Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 1929,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 244,
            "username": "notxcain",
            "name": "Denis",
            "avatar_template": "/user_avatar/forums.foundationdb.org/notxcain/{size}/213_2.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 38,
            "username": "panghy",
            "name": "Clement Pang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Last less than or last less or equal with limit added to keyselector returns different values",
      "id": 392,
      "title": "Last less than or last less or equal with limit added to keyselector returns different values",
      "slug": "last-less-than-or-last-less-or-equal-with-limit-added-to-keyselector-returns-different-values",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-05-10T05:13:03.437Z",
      "last_posted_at": "2018-05-10T06:40:07.295Z",
      "bumped": true,
      "bumped_at": "2018-05-10T06:40:07.295Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1008,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 231,
            "username": "xtreak",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/x/ad7895/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "How to get exact range of keys using fdb_transaction_get_range in C Programming",
      "id": 1355,
      "title": "How to get exact range of keys using fdb_transaction_get_range in C Programming",
      "slug": "how-to-get-exact-range-of-keys-using-fdb-transaction-get-range-in-c-programming",
      "posts_count": 5,
      "reply_count": 3,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-05-09T12:22:07.878Z",
      "last_posted_at": "2019-05-20T14:14:50.692Z",
      "bumped": true,
      "bumped_at": "2019-05-20T14:14:50.692Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1573,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 511,
            "username": "sakthivelpvs",
            "name": "Sakthivel",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9dc877/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 219,
            "username": "MMcM",
            "name": "Mike McMahon",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/d07c76/{size}.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "C API: How to get keys with matching prefix?",
      "id": 1448,
      "title": "C API: How to get keys with matching prefix?",
      "slug": "c-api-how-to-get-keys-with-matching-prefix",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2019-06-13T04:06:51.508Z",
      "last_posted_at": "2019-06-13T15:52:02.221Z",
      "bumped": true,
      "bumped_at": "2019-06-13T15:52:02.221Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1024,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 542,
            "username": "jonahwest",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/90db22/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Is it possible to fetch two different keys using &ldquo;fdb_transaction_get_range&rdquo; API in C program",
      "id": 1388,
      "title": "Is it possible to fetch two different keys using \"fdb_transaction_get_range\" API in C program",
      "slug": "is-it-possible-to-fetch-two-different-keys-using-fdb-transaction-get-range-api-in-c-program",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-05-23T08:14:07.379Z",
      "last_posted_at": "2019-05-23T15:43:55.444Z",
      "bumped": true,
      "bumped_at": "2019-05-23T15:43:55.444Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [
        "bindings"
      ],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 591,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 511,
            "username": "sakthivelpvs",
            "name": "Sakthivel",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9dc877/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 41,
        "username": "amirouche",
        "name": "Amirouche",
        "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 53,
        "username": "KrzysFR",
        "name": "Christophe Chevalier",
        "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 41,
      "username": "amirouche",
      "name": "Amirouche",
      "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png"
    },
    "last_poster": {
      "id": 41,
      "username": "amirouche",
      "name": "Amirouche",
      "avatar_template": "/user_avatar/forums.foundationdb.org/amirouche/{size}/1911_2.png"
    },
    "links": [
      {
        "url": "https://forums.foundationdb.org/t/ann-python-asyncio-bindings-asyncio-foundationdb/605",
        "title": "[ANN] Python asyncio bindings - asyncio-foundationdb",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 41,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#key-selectors",
        "title": "Developer Guide \u2014 FoundationDB 6.2",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 53,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/0254869dd667f334196d6a3dd7888d2cf175d80d/bindings/python/fdb/impl.py#L1187-L1216",
        "title": "foundationdb/impl.py at 0254869dd667f334196d6a3dd7888d2cf175d80d \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 41,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}