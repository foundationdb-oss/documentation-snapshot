{
  "post_stream": {
    "posts": [
      {
        "id": 9971,
        "name": "Clement Pang",
        "username": "panghy",
        "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
        "created_at": "2021-09-16T03:58:23.145Z",
        "cooked": "<p>It seems like the record layer currently expects all nodes to upgrade or downgrade at the same time, and even with the usage of <code>FDBMetaDataStore</code>, there is no easy way to revert an upgrade (or otherwise run compatible but different versions of the proto definition concurrently, assuming they are compatible).</p>\n<p>The ideal situation is as follow:</p>\n<ul>\n<li>A central library that compiles and publishes the java proto artifacts as well as configuration of indices/primary keys</li>\n<li>Services that depend on said library but deploys in their own cadence</li>\n<li>Assuming that metadata versions only moves forward, if a service has an out-of-date version of the proto library, indices would be honored (with the latest metadata) and records could be written at with an older proto definition (fields could be missing for instance)</li>\n</ul>\n<p>The above doesn\u2019t seem to be possible even if we read <code>RecordMetaData</code> from the store at each start on the transaction (let\u2019s assume what\u2019s stored on disk is metadata with a higher version and the code is baked with a proto/index configuration from a previous time):</p>\n<pre><code class=\"lang-java\">    RecordMetaData recordMetaData = getLocalRecordMetaData(); // what's baked into the service (from the proto library)\n    \n    // builder for every transaction.\n    FDBRecordStore.Builder builder = FDBRecordStore.newBuilder().\n        setMetaDataProvider(recordMetaData).\n        setKeySpacePath(keySpacePath);\n\n    RecordStoreProvider recordStoreProvider = cx -&gt; {\n      FDBMetaDataStore mds = new FDBMetaDataStore(cx, metadataKeySpacePath);\n      mds.setLocalFileDescriptor(recordMetaData.getRecordsDescriptor());\n      return builder.copyBuilder().\n          setMetaDataStore(mds). // sets context\n          createOrOpen();\n    };\n</code></pre>\n<p>The issue is that <code>setLocalFileDescriptor</code> causes <code>loadFromProto</code> in <code>RecordMetaDataBuilder</code> to call <code>evolutionValidator.validateUnion()</code> which checks that the evolution is valid from what\u2019s currently stored inside FDB (via <code>FDBMetaDataStore</code>) to the \u201cnew\u201d descriptor (which is what\u2019s baked into the service). What\u2019s odd is that the \u201cnew\u201d descriptor in this case is actually old (a service can be behind in terms of deployment cadence, or simply behind w.r.t. its peers) and this will fail if the proto has evolved to add a new field for instance.</p>\n<p>It seems to me that the only way to fix this is to not allow multiple services to have different local versions of RecordMetaData (assuming that one does need to manipulate messages with local proto classes) or effectively put all services into maintenance mode while metadata upgrades are done. This, however, still puts into question how one could roll-back a release without it complaining that the metadata version is newer but the code is behind and hence fields could be missing.</p>\n<p>Or is there a whole different way to handle this situation?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-09-16T03:59:41.672Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 161,
        "reads": 42,
        "readers_count": 41,
        "score": 813.4,
        "yours": false,
        "topic_id": 2887,
        "topic_slug": "schema-evolution-with-multiple-services",
        "display_username": "Clement Pang",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 38,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/schema-evolution-with-multiple-services/2887/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 9980,
        "name": "Clement Pang",
        "username": "panghy",
        "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
        "created_at": "2021-09-20T03:44:16.343Z",
        "cooked": "<p>Seems like this is captured in: <a href=\"https://github.com/FoundationDB/fdb-record-layer/issues/965\" rel=\"noopener nofollow ugc\">https://github.com/FoundationDB/fdb-record-layer/issues/965</a> and is hence still a WIP to support multi-clients, multi-version deployment strategies. Seems like work on that particular section of the code has stalled though (is help wanted?). The point raised in <a href=\"https://github.com/FoundationDB/fdb-record-layer/issues/843\" rel=\"noopener nofollow ugc\">https://github.com/FoundationDB/fdb-record-layer/issues/843</a> is also not fully addressed even if <code>FDBMetadataStore</code> is used (adding a new field for instance would not be downgradable).</p>\n<p>I can only guess how Apple is using this internally but it would seem to me that metadata is managed completely outside of the record layer and is upgraded separately. For instance if multiple services require access to the store, one would need to know that all in-the-wild services have upgraded to a particular baked proto (local file descriptors can be ahead but not behind) and then there\u2019s a central system that bumps the stored metadata version upwards (which also bumps the MetaDataCache).</p>\n<p>I could imagine that the code could allow the local file descriptor to be behind (or at least allow fields to be added in the stored RecordMetaData) and this could fix the issue but the unit tests seems to be explicitly asserting this to fail so perhaps the original devs can comment on whether that\u2019s really safe to do.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-09-20T03:44:16.343Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 6,
        "reads": 38,
        "readers_count": 37,
        "score": 42.6,
        "yours": false,
        "topic_id": 2887,
        "topic_slug": "schema-evolution-with-multiple-services",
        "display_username": "Clement Pang",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/issues/965",
            "internal": false,
            "reflection": false,
            "clicks": 20
          },
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/issues/843",
            "internal": false,
            "reflection": false,
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 38,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/schema-evolution-with-multiple-services/2887/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9987,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2021-09-21T18:57:32.018Z",
        "cooked": "<p>The issue you\u2019ve pointed to is, in fact, all about improving the meta-data story. I\u2019d say that yes, help is wanted there, though it would probably good to coordinate any action in that area before significant work is undertaken to make sure that the new work aligns with the project\u2019s goals and won\u2019t cause problems with some of the other work that\u2019s currently being done in and around that area.</p>\n<p>The local file descriptor stuff is all a part of that, though that\u2019s not strictly speaking about upgrades. The idea of the local file descriptor is that you might want to use the <code>FDBMetaDataStore</code> to store your meta-data, but if you did so, you would get different file descriptor objects than the ones you\u2019d expect because of how proto descriptors are constructed (i.e., pointer equality between descriptors would be lost), which violates part of the contract we had internally. So, the local file descriptor was really more of a pre-requisite for using the <code>FDBMetaDataStore</code> with anything other than dynamic messages. And yes, the idea is that you explicitly might want to have that file be ahead but not behind. The reasoning is that that won\u2019t always be safe (for example, if a field is added and then an index is added on that field, the indexing might not happen correctly; even if it\u2019s not indexed, there are situations where message deserialization and deserialization can drop the fields, e.g., an \u201cincrement field on record\u201d method could drop unknown fields, and so we want to make sure that anyone reading the data has a complete view of what the data actually are).</p>\n<p>The approach to schema evolution that we\u2019re sort of trying to suggest is that either:</p>\n<ol>\n<li>A service may choose to manage the meta-data in code, but then it needs to be able to guarantee that when it upgrades, everything that is using the meta-data can see the newest version of the meta-data before the meta-data is actually upgraded. This implies something like being able to dynamically generate the meta-data at different versions, and then swapping in the right version. You can do this today with the right <code>RecordMetaDataProvider</code> assuming that you also have the right hooks to start using the new meta-data when the time arises. For example, you could create a <code>RecordMetaDataProvider</code> that is also a <code>UserVersionChecker</code> and then control the meta-data version based on the user-version that is read. But it\u2019s a bit delicate and not currently implemented in the Record Layer directly. As you point out, this doesn\u2019t really scale to multiple services, though, unless they all can share the same logic and meta-data generation, and it also couples your schema evolution with your release cycle (i.e., a release that updates the meta-data cannot be rolled back).</li>\n<li>The service manages its meta-data in some kind of centralized store, e.g., in the <code>FDBMetaDataStore</code> or an external database. I believe this works today fairly reliably assuming that you read the meta-data from the store each time, but the problem there is that we expect that for large users, that reading the meta-data each time will cause hot shards (or the equivalent thereof on whatever external database they use), and so for performance reasons, some level of caching is necessary. If so inclined, logic can be written around the current abstractions to do something like catch the stale meta-data exception and then flush the cache. The proposal for future improvements laid out in that issue is to make cache invalidation more natural by, for example, including the expected meta-data version in the \u201cget meta-data from cache\u201d request to know if the cached value is stale.</li>\n</ol>\n<p>Both of those options have a fair amount of fiddly bits that need to live in application rather than Record Layer code (hence the issue to improve it), but it is doable.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-09-21T18:57:32.018Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 8,
        "reads": 37,
        "readers_count": 36,
        "score": 67.4,
        "yours": false,
        "topic_id": 2887,
        "topic_slug": "schema-evolution-with-multiple-services",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 38,
          "username": "panghy",
          "name": "Clement Pang",
          "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/schema-evolution-with-multiple-services/2887/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 9999,
        "name": "Clement Pang",
        "username": "panghy",
        "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
        "created_at": "2021-09-23T02:10:04.480Z",
        "cooked": "<p>Thanks <a class=\"mention\" href=\"/u/alloc\">@alloc</a>, with the approaches given, I am assuming that using dynamic messages is a requirement still? If we use <code>FDBMetaDataStore</code> and read meta-data each time it seems to me that it is still going to throw if I supply a local file descriptor and the metadata in FDBMDS is ahead (\u201cfield removed\u201d). Since you mentioned that this method should work today fairly reliably, I am trying to understand whether that statement implies using dynamic messages for all interactions instead (meaning do <em>not</em> use a local file descriptor and handle serialization/deserialization manually).</p>\n<p>In the ideal world, protobufs allow co-existence of code at different version, ahead or behind (understanding that if you read a new <code>byte[]</code> representation of a message, one might lose fields). I am curious to know how the system \u201cmight\u201d break if the requirement that fields can be dropped is relaxed. Specifically, you mentioned that the indexing might not happen correctly, assuming that the rest of the metadata is valid, would that just look like a field is now set to null if we read and then write a record that\u2019s originally written with a definition that\u2019s newer than the current code\u2019s definition? If so, one might be able to live with that as long as one understand the implications. Essentially data stored in new fields might be lost but indices are still maintained properly. Competing writes might happen and a no-op write could cause an index to be added and removed rapidly as expected between two versions.</p>\n<p>The best case scenario for folks just starting to use the library (myself included) would be that one can have concurrent upgrade/downgrades, multiple in-the-wild proto versions, proto baked into code or a dependency, i.e. not requiring an external metadata management system, etc. with the caveat that once you deploy code that increments the metadata, it never goes backwards, and that fields can be lost when one read and then write the same record with an older protocol definition. If one desires stricter limitations to that, perhaps they can set <code>MetadataEvolutionValidator</code> to a stricter version. There also should be a way to deprecate fields permanently too (for that matter).</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-09-23T02:10:04.480Z",
        "reply_count": 0,
        "reply_to_post_number": 3,
        "quote_count": 0,
        "incoming_link_count": 6,
        "reads": 30,
        "readers_count": 29,
        "score": 36.0,
        "yours": false,
        "topic_id": 2887,
        "topic_slug": "schema-evolution-with-multiple-services",
        "display_username": "Clement Pang",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "reply_to_user": {
          "id": 8,
          "username": "alloc",
          "name": "Alec Grieser",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 38,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/schema-evolution-with-multiple-services/2887/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 10218,
        "name": "Clement Pang",
        "username": "panghy",
        "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
        "created_at": "2021-11-03T02:20:32.498Z",
        "cooked": "<p>Just to update the thread, I think we\u2019ve largely figured out how to make this happen after a couple releases, basically:</p>\n<ul>\n<li>Evolve the proto in a release first (add a field, etc.)</li>\n<li>Ensure all \u201cin-the-wild\u201d processes that access the RL has that proto</li>\n<li>Evolve indices that depends on those fields in a separate release (for that matter, any change to the metadata version would depend on step 2 being done or else the dreaded incompatible evolution exception would be thrown)</li>\n</ul>\n<p>Originally, it seemed like step 1 wouldn\u2019t work but it\u2019s because we are also evolving the indices in the same release. The metadata version wouldn\u2019t change if you\u2019re just evolving the proto (a warning message might pop up saying that there\u2019s an un-parsable field but that\u2019s fine).</p>\n<p>Hope that helps someone planning for micro-service, independent cadence releases with RL.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 5,
        "updated_at": "2021-11-03T02:20:32.498Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 9,
        "reads": 22,
        "readers_count": 21,
        "score": 64.4,
        "yours": false,
        "topic_id": 2887,
        "topic_slug": "schema-evolution-with-multiple-services",
        "display_username": "Clement Pang",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 38,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/schema-evolution-with-multiple-services/2887/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      9971,
      9980,
      9987,
      9999,
      10218
    ]
  },
  "timeline_lookup": [
    [
      1,
      1497
    ],
    [
      2,
      1493
    ],
    [
      3,
      1491
    ],
    [
      4,
      1490
    ],
    [
      5,
      1449
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Schema evolution with multiple services",
  "id": 2887,
  "title": "Schema evolution with multiple services",
  "posts_count": 5,
  "created_at": "2021-09-16T03:58:23.081Z",
  "views": 992,
  "reply_count": 2,
  "like_count": 2,
  "last_posted_at": "2021-11-03T02:20:32.498Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "schema-evolution-with-multiple-services",
  "category_id": 12,
  "word_count": 1829,
  "deleted_at": null,
  "user_id": 38,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_2887",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 5,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Ignoring Presence of New Indexes",
      "id": 3146,
      "title": "Ignoring Presence of New Indexes",
      "slug": "ignoring-presence-of-new-indexes",
      "posts_count": 4,
      "reply_count": 2,
      "highest_post_number": 4,
      "image_url": null,
      "created_at": "2022-01-31T17:35:34.942Z",
      "last_posted_at": "2022-02-01T19:17:25.321Z",
      "bumped": true,
      "bumped_at": "2022-02-01T19:17:25.321Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 731,
      "category_id": 12,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 369,
            "username": "ricky.saltzer",
            "name": "Ricky Saltzer",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/r/f17d59/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Implementing atomic DDL for SQL schema",
      "id": 678,
      "title": "Implementing atomic DDL for SQL schema",
      "slug": "implementing-atomic-ddl-for-sql-schema",
      "posts_count": 9,
      "reply_count": 2,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-09-03T19:04:26.293Z",
      "last_posted_at": "2018-09-08T15:28:47.996Z",
      "bumped": true,
      "bumped_at": "2018-09-08T15:28:47.996Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 2146,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 251,
            "username": "George",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/george/{size}/620_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A new tool for managing layer metadata",
      "id": 1191,
      "title": "A new tool for managing layer metadata",
      "slug": "a-new-tool-for-managing-layer-metadata",
      "posts_count": 11,
      "reply_count": 4,
      "highest_post_number": 11,
      "image_url": null,
      "created_at": "2019-03-02T02:24:25.605Z",
      "last_posted_at": "2019-04-03T23:30:21.306Z",
      "bumped": true,
      "bumped_at": "2019-04-03T23:30:21.306Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 2506,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Upgrading FoundationDB",
      "id": 191,
      "title": "Upgrading FoundationDB",
      "slug": "upgrading-foundationdb",
      "posts_count": 11,
      "reply_count": 5,
      "highest_post_number": 11,
      "image_url": null,
      "created_at": "2018-04-21T23:51:26.311Z",
      "last_posted_at": "2018-08-27T03:33:51.669Z",
      "bumped": true,
      "bumped_at": "2018-08-27T03:33:51.669Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 9,
      "views": 3852,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 133,
            "username": "titanous",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/titanous/{size}/94_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Should mutations performed via fdbcli always update the \\xff/metadataVersion key?",
      "id": 2093,
      "title": "Should mutations performed via fdbcli always update the \\xff/metadataVersion key?",
      "slug": "should-mutations-performed-via-fdbcli-always-update-the-xff-metadataversion-key",
      "posts_count": 6,
      "reply_count": 2,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2020-04-29T11:39:06.923Z",
      "last_posted_at": "2020-05-14T13:46:08.081Z",
      "bumped": true,
      "bumped_at": "2020-05-14T13:46:08.081Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 938,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 38,
        "username": "panghy",
        "name": "Clement Pang",
        "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 38,
      "username": "panghy",
      "name": "Clement Pang",
      "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png"
    },
    "last_poster": {
      "id": 38,
      "username": "panghy",
      "name": "Clement Pang",
      "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png"
    },
    "links": [
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/issues/965",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 20,
        "user_id": 38,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/issues/843",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 38,
        "domain": "github.com",
        "root_domain": "github.com"
      }
    ]
  },
  "bookmarks": []
}