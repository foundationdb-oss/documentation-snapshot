{
  "post_stream": {
    "posts": [
      {
        "id": 11114,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2022-05-16T15:38:24.707Z",
        "cooked": "<p>This post is meant to be the developer-equivalent of <a href=\"https://forums.foundationdb.org/t/what-do-you-monitor/184\">What do you monitor?</a> post.</p>\n<p>How are you testing your layers? Are you testing special behaviors like <a href=\"https://apple.github.io/foundationdb/developer-guide.html#transactions-with-unknown-results\" rel=\"noopener nofollow ugc\">Transactions with unknown results</a>? Is there a way to manipulate the simulation from a binding?</p>\n<h2><a name=\"related-posts-1\" class=\"anchor\" href=\"#related-posts-1\"></a>Related posts</h2>\n<aside class=\"quote\" data-post=\"1\" data-topic=\"3235\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rajivr/48/1100_2.png\" class=\"avatar\">\n    <a href=\"https://forums.foundationdb.org/t/recordlayer-testing/3235\">RecordLayer testing</a> <a class=\"badge-category__wrapper \" href=\"/c/development/fdb-layers/9\"><span data-category-id=\"9\" data-parent-category-id=\"5\" data-drop-close=\"true\" class=\"badge-category --has-parent\" title=\"For discussing the development of FoundationDB layers, software that extend the project core.\"><span class=\"badge-category__name\">FoundationDB Layers</span></span></a>\n  </div>\n  <blockquote>\n    Is there documentation available on the testing approach followed by RecordLayer? \nBesides unit and integration tests, does RecordLayer also employ simulation testing in some way? If so, I would be really interested in learning more about it.\n  </blockquote>\n</aside>\n",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-16T15:38:24.707Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 143,
        "reads": 41,
        "readers_count": 40,
        "score": 723.2,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/what-do-you-monitor/184",
            "internal": true,
            "reflection": false,
            "title": "What do you monitor?",
            "clicks": 6
          },
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#transactions-with-unknown-results",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 7.1",
            "clicks": 2
          },
          {
            "url": "https://forums.foundationdb.org/t/recordlayer-testing/3235",
            "internal": true,
            "reflection": false,
            "title": "RecordLayer testing",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 11132,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2022-05-17T09:44:47.837Z",
        "cooked": "<p>I don\u2019t think it was advertised much, but I\u2019d suggest looking into the <a href=\"https://apple.github.io/foundationdb/client-testing.html#testing-error-handling-with-buggify\">client buggify</a> support if you haven\u2019t seen it.  I think the only adopters were CouchDB (as IIRC it was implemented specifically with supporting them in mind), and <a href=\"https://github.com/apache/couchdb/search?q=buggify\">their codebase</a> still shows the artifacts of its integration.</p>\n<p>It looks like that integration was done by <a class=\"mention\" href=\"/u/nickva\">@nickva</a>, who might be a nice enough person to comment on how useful it was (or wasn\u2019t) in terms of actually finding, reproducing, and fixing bugs, or if there\u2019s any caveats of note. <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>I at least see a couple bug fix commits which specifically reference issues it found:</p>\n<ul>\n<li><a href=\"https://github.com/apache/couchdb/commit/acb43e12fd7fddc6f606246875909f7c7df27324\" class=\"inline-onebox\">Improve retryable FDB error handling \u00b7 apache/couchdb@acb43e1 \u00b7 GitHub</a></li>\n<li><a href=\"https://github.com/apache/couchdb/commit/d7011765673e649ac2adcde3db2beede920f40be\" class=\"inline-onebox\">Improve tx retry resilience when transaction restart \u00b7 apache/couchdb@d701176 \u00b7 GitHub</a></li>\n</ul>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-17T09:44:47.837Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 40,
        "readers_count": 39,
        "score": 58.0,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/client-testing.html#testing-error-handling-with-buggify",
            "internal": false,
            "reflection": false,
            "title": "Client Testing \u2014 FoundationDB 7.1",
            "clicks": 11
          },
          {
            "url": "https://github.com/apache/couchdb/search?q=buggify",
            "internal": false,
            "reflection": false,
            "title": "Search \u00b7 buggify \u00b7 GitHub",
            "clicks": 4
          },
          {
            "url": "https://github.com/apache/couchdb/commit/acb43e12fd7fddc6f606246875909f7c7df27324",
            "internal": false,
            "reflection": false,
            "title": "Improve retryable FDB error handling \u00b7 apache/couchdb@acb43e1 \u00b7 GitHub",
            "clicks": 3
          },
          {
            "url": "https://github.com/apache/couchdb/commit/d7011765673e649ac2adcde3db2beede920f40be",
            "internal": false,
            "reflection": false,
            "title": "Improve tx retry resilience when transaction restart \u00b7 apache/couchdb@d701176 \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 2
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11133,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2022-05-17T13:38:06.736Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>I don\u2019t think it was advertised much, but I\u2019d suggest looking into the <a href=\"https://apple.github.io/foundationdb/client-testing.html#testing-error-handling-with-buggify\" rel=\"noopener nofollow ugc\">client buggify </a> support if you haven\u2019t seen it.</p>\n</blockquote>\n</aside>\n<p>I missed it somehow, thanks <img src=\"https://emoji.discourse-cdn.com/twitter/smile.png?v=12\" title=\":smile:\" class=\"emoji\" alt=\":smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> I\u2019m not seeing any way to provide a defined seed to drive the <code>client_buggify</code>, is this the expected behavior? I was expecting something like the <code>bindingTester</code> with seeds that can be injected/replayed.</p>\n<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>It looks like that integration was done by <a class=\"mention\" href=\"/u/nickva\">@nickva</a>, who might be a nice enough person to comment on how useful it was (or wasn\u2019t) in terms of actually finding, reproducing, and fixing bugs, or if there\u2019s any caveats of note. <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>I at least see a couple bug fix commits which specifically reference issues it found:</p>\n<ul>\n<li><a href=\"https://github.com/apache/couchdb/commit/acb43e12fd7fddc6f606246875909f7c7df27324\" rel=\"noopener nofollow ugc\">Improve retryable FDB error handling \u00b7 apache/couchdb@acb43e1 \u00b7 GitHub</a></li>\n<li><a href=\"https://github.com/apache/couchdb/commit/d7011765673e649ac2adcde3db2beede920f40be\" rel=\"noopener nofollow ugc\">Improve tx retry resilience when transaction restart \u00b7 apache/couchdb@d701176 \u00b7 GitHub</a></li>\n</ul>\n</blockquote>\n</aside>\n<p>Thanks for the links!</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-17T13:38:06.736Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 38,
        "readers_count": 37,
        "score": 22.6,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11135,
        "name": "",
        "username": "andrew.noyes",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "created_at": "2022-05-17T18:06:49.975Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"3\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>I\u2019m not seeing any way to provide a defined seed to drive the <code>client_buggify</code> , is this the expected behavior?</p>\n</blockquote>\n</aside>\n<p>I think we didn\u2019t bother since we kind of expect client applications to make heavy use of threads and even if the client is single-threaded the ordering of events (i.e. calling callbacks when futures become ready) still depends on what order the server responds to requests. That said I don\u2019t think we\u2019d be opposed to say a network option which sets the state of the random number generator.</p>\n<p>My personal pet client testing crusade has to do with \u201cin-flight\u201d commits. Usually when a commit future becomes ready, the fdb client has taken great care to ensure that the commit is not in flight. For <code>transaction_timed_out</code> and <code>cluster_version_changed</code> though, the commit might still be in flight! A reasonable user might do the following:</p>\n<ol>\n<li>Attempt to commit a transaction</li>\n<li>That commit future fails with <code>transaction_timed_out</code></li>\n<li>Read a unique key that was to be set in that transaction</li>\n<li>Observe that the key is absent and conclude incorrectly that the transaction did not commit and will never commit</li>\n<li>The commit (which has been \u201cin-flight\u201d this whole time) succeeds after the read in step 4</li>\n</ol>\n<p>For <code>transaction_timed_out</code> this isn\u2019t so bad, as the default retry loop (i.e. <code>on_error</code>) does not consider <code>transaction_timed_out</code> to be retryable. It does however consider <code>cluster_version_changed</code> to be retryable.</p>\n<p>Client buggify does attempt to simulate this situation if you have a timeout set on your transaction. I suppose we could do the same with <code>cluster_version_changed</code> if you\u2019re using the multiversion client (or maybe just unconditionally?)</p>\n<p><a href=\"https://apple.github.io/foundationdb/developer-guide.html#error-handling\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Developer Guide \u2014 FoundationDB 7.1</a> has some more detail about this (and should probably be updated to mention <code>cluster_version_changed</code>). It also mentions that cancelling a commit future also <em>does not</em> stop that commit from being in-flight.</p>\n<p>Here\u2019s a few more popular ways of writing bugs that don\u2019t show up in local testing:</p>\n<ol>\n<li>\n<p>Attempt to maintain an in-memory data structure that is derived from database state. This turns out to be tricky to get right. Importantly, if you set <code>$key</code> to some <code>$value</code> in a transaction, and commit that transaction with <code>$commit_version</code>, you <em>cannot</em> assume that the <code>$key</code> is set to <code>$value</code> at <code>$commit_version</code>. This is because commits are done in batches, and the entire batch of commits gets the same commit version. A transaction appearing later in the batch may have performed a blind write to <code>$key</code>. It\u2019s much easier if you maintain your in-memory data structure based <em>only on reads</em>. If you\u2019re making decisions about what keys to write based on the state of this in-memory data structure this gets even more complicated. I would consider just actually performing the necessary reads to re-derive the data structure in every transaction, but this might cause a read hotspot. Otherwise you could carefully track the read version and keys your data structure is derived from, and use that read version as the read snapshot of your transaction and add those keys to your read conflict range. If you need to avoid a read hotspot <em>and</em> need linearizability (i.e. a fresh read version) then you can look into a scheme using <code>\\xff/metadataVersionKey</code> (again also tricky).</p>\n</li>\n<li>\n<p>Performing operations on a transaction outside of a retry loop. Most bindings come with some kind of <code>doTransaction</code> function that accepts a lambda and implements the default retry loop, so if you use that you probably don\u2019t need to worry about this.</p>\n</li>\n<li>\n<p>Reading at snapshot isolation. If you don\u2019t test with concurrency then you may find that you\u2019re missing a read conflict you actually wanted.</p>\n</li>\n<li>\n<p>Interacting with mutable data structures that have a lifetime longer than the body of your retry loop. E.g. if you append to the same list every time you retry.</p>\n</li>\n</ol>\n<p>If you\u2019re using the default retry loop, using snapshot isolation sparingly, testing with concurrency, checking invariants in your data model, and making sure your transactions actually do a lap around the retry loop sometimes you\u2019re probably in pretty good shape.</p>\n<p>Btw if you\u2019re using client buggify I would recommend introducing a few bugs intentionally and tweaking the \u201csection_activated\u201d and \u201csection_fired\u201d probabilities until you are actually catching those bugs, but still completing transactions.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-17T18:06:49.975Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 36,
        "readers_count": 35,
        "score": 22.2,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/developer-guide.html#error-handling",
            "internal": false,
            "reflection": false,
            "title": "Developer Guide \u2014 FoundationDB 7.1",
            "clicks": 6
          },
          {
            "url": "https://forums.foundationdb.org/t/make-commit-unknown-results-unlikely-pr-status/3413/7",
            "internal": true,
            "reflection": true,
            "title": "Make commit_unknown_results unlikely - PR status",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 14,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11136,
        "name": "Nick Vatamaniuc",
        "username": "nickva",
        "avatar_template": "/user_avatar/forums.foundationdb.org/nickva/{size}/704_2.png",
        "created_at": "2022-05-17T19:21:17.244Z",
        "cooked": "<p>Thanks <a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a>! Running CouchDB tests with client buggify [1], we discovered quite a few bugs. A good number of those have been randomly popping up in production but were tricky to reproduce during testing. The best part is how easy it was to enable it as it\u2019s just a few environment variable toggles. I highly recommend giving it a try, it\u2019s an awesome FoundationDB feature.</p>\n<p>Also, agree with <a class=\"mention\" href=\"/u/andrew.noyes\">@andrew.noyes</a> on the lack of seed support. At least for Erlang, with lots of concurrently running Erlang processes, a deterministic seed wouldn\u2019t have helped us as much there.</p>\n<p>[1]  <code>ERL_ZFLAGS=\"-erlfdb network_options '[client_buggify_enable, {client_buggify_section_activated_probability, 25}, {client_buggify_section_fired_probability, 25}]'\" make elixir tests=...</code></p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-17T19:21:17.244Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 28,
        "readers_count": 27,
        "score": 30.6,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Nick Vatamaniuc",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 676,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11137,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2022-05-17T22:47:27.661Z",
        "cooked": "<p>As Andrew pointed out, setting a seed will not make client buggify deterministic. This is true even if the client is single threaded and behaving completely deterministic. Mostly this is because all system calls (network, disk etc) are not deterministic. In the simulator we work around this problem by simulating system calls, but in normal operation this doesn\u2019t work.</p>\n<p>If you want determinism the right solution would be to run your whole layer <a href=\"https://apple.github.io/foundationdb/client-testing.html#simulation-and-cluster-workloads\">in the simulator</a>. Now this is not widely used (and therefore probably has bugs and you might need to recompile fdb in order to use it). But I do believe it would be the most thorough testing you can get out of it.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-17T22:47:27.661Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 27,
        "readers_count": 26,
        "score": 10.4,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/client-testing.html#simulation-and-cluster-workloads",
            "internal": false,
            "reflection": false,
            "title": "Client Testing \u2014 FoundationDB 7.1",
            "clicks": 6
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11142,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2022-05-18T08:03:24.018Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"4\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>My personal pet client testing crusade has to do with \u201cin-flight\u201d commits. Usually when a commit future becomes ready, the fdb client has taken great care to ensure that the commit is not in flight. For <code>transaction_timed_out</code> and <code>cluster_version_changed</code> though, the commit might still be in flight! A reasonable user might do the following:</p>\n<ol>\n<li>Attempt to commit a transaction</li>\n<li>That commit future fails with <code>transaction_timed_out</code></li>\n<li>Read a unique key that was to be set in that transaction</li>\n<li>Observe that the key is absent and conclude incorrectly that the transaction did not commit and will never commit</li>\n<li>The commit (which has been \u201cin-flight\u201d this whole time) succeeds after the read in step 4</li>\n</ol>\n<p>For <code>transaction_timed_out</code> this isn\u2019t so bad, as the default retry loop (i.e. <code>on_error</code> ) does not consider <code>transaction_timed_out</code> to be retryable. It does however consider <code>cluster_version_changed</code> to be retryable.</p>\n</blockquote>\n</aside>\n<p>I wasn\u2019t aware of of these behaviors <img src=\"https://emoji.discourse-cdn.com/twitter/upside_down_face.png?v=12\" title=\":upside_down_face:\" class=\"emoji\" alt=\":upside_down_face:\" loading=\"lazy\" width=\"20\" height=\"20\"> Thanks for sharing. Are they any weird behavior I should be aware?</p>\n<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"4\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<ul>\n<li>Attempt to maintain an in-memory data structure that is derived from database state. This turns out to be tricky to get right. Importantly, if you set <code>$key</code> to some <code>$value</code> in a transaction, and commit that transaction with <code>$commit_version</code> , you <em>cannot</em> assume that the <code>$key</code> is set to <code>$value</code> at <code>$commit_version</code> . This is because commits are done in batches, and the entire batch of commits gets the same commit version. A transaction appearing later in the batch may have performed a blind write to <code>$key</code> . It\u2019s much easier if you maintain your in-memory data structure based <em>only on reads</em> . If you\u2019re making decisions about what keys to write based on the state of this in-memory data structure this gets even more complicated. I would consider just actually performing the necessary reads to re-derive the data structure in every transaction, but this might cause a read hotspot. Otherwise you could carefully track the read version and keys your data structure is derived from, and use that read version as the read snapshot of your transaction and add those keys to your read conflict range. If you need to avoid a read hotspot <em>and</em> need linearizability (i.e. a fresh read version) then you can look into a scheme using <code>\\xff/metadataVersionKey</code> (again also tricky).</li>\n</ul>\n</blockquote>\n</aside>\n<p>You confirmed an intuition I had about caching.</p>\n<aside class=\"quote no-group\" data-username=\"andrew.noyes\" data-post=\"4\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/andrew.noyes/48/443_2.png\" class=\"avatar\"> andrew.noyes:</div>\n<blockquote>\n<p>If you\u2019re using the default retry loop, using snapshot isolation sparingly, testing with concurrency, checking invariants in your data model, and making sure your transactions actually do a lap around the retry loop sometimes you\u2019re probably in pretty good shape.</p>\n</blockquote>\n</aside>\n<p>Sounds like a testing plan to me <img src=\"https://emoji.discourse-cdn.com/twitter/+1.png?v=12\" title=\":+1:\" class=\"emoji\" alt=\":+1:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"nickva\" data-post=\"5\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/nickva/48/704_2.png\" class=\"avatar\"> nickva:</div>\n<blockquote>\n<p>Thanks <a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a>! Running CouchDB tests with client buggify [1], we discovered quite a few bugs. A good number of those have been randomly popping up in production but were tricky to reproduce during testing. The best part is how easy it was to enable it as it\u2019s just a few environment variable toggles. I highly recommend giving it a try, it\u2019s an awesome FoundationDB feature.</p>\n</blockquote>\n</aside>\n<p>It get the \u201cpop the issue during testing and not in prod\u201d, but I\u2019m not sure on how to industrialize this, as you cannot reproduce it locally. From my point-of-view, you can only blindly \u201cbrute-force\u201d the issue and hopefully find the problem fast enough.</p>\n<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"6\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p>As Andrew pointed out, setting a seed will not make client buggify deterministic. This is true even if the client is single threaded and behaving completely deterministic. Mostly this is because all system calls (network, disk etc) are not deterministic. In the simulator we work around this problem by simulating system calls, but in normal operation this doesn\u2019t work.</p>\n</blockquote>\n</aside>\n<p>Determinism is pretty awesome, I was mind-blown by the productivity I have when running the <code>bindingTester</code>. The whole <code>find a faulty seed, fix it, repeat</code> dev experience has been great to stabilize the rust bindings, but I don\u2019t feel we need it <em>yet</em> as a first testing layer strategy(I might be wrong on this <img src=\"https://emoji.discourse-cdn.com/twitter/thinking.png?v=12\" title=\":thinking:\" class=\"emoji\" alt=\":thinking:\" loading=\"lazy\" width=\"20\" height=\"20\">).</p>\n<p>A first testing strategy I had in mind was be sure that we are handling errors correctly in our work-in-progress layer sdk in a <code>bindingTester</code> fashion-way:</p>\n<ul>\n<li>Generate a seed,</li>\n<li>Run a workload which will fire some errors on the bindings,</li>\n<li>validate the state of the keys in fdb.</li>\n</ul>\n<p>Checking concurrency is another step, and at that point, I agree with you <a class=\"mention\" href=\"/u/markus.pilman\">@markus.pilman</a>, we need determinism for that <img src=\"https://emoji.discourse-cdn.com/twitter/smile.png?v=12\" title=\":smile:\" class=\"emoji\" alt=\":smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> In Rust, Async runtimes are in <a href=\"https://www.ncameron.org/blog/portable-and-interoperable-async-rust/\" rel=\"noopener nofollow ugc\">theory swappable</a>, so we may be able to provide determinism. In fact, I was so curious towards FDB\u2019s simulation framework and how it could behave in Rust that <a href=\"https://github.com/PierreZ/circus/blob/main/circus-simulation/examples/simulation.rs\" rel=\"noopener nofollow ugc\">I tested things for fun</a>.</p>\n<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"6\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p>If you want determinism the right solution would be to run your whole layer <a href=\"https://apple.github.io/foundationdb/client-testing.html#simulation-and-cluster-workloads\" rel=\"noopener nofollow ugc\">in the simulator </a>. Now this is not widely used (and therefore probably has bugs and you might need to recompile fdb in order to use it). But I do believe it would be the most thorough testing you can get out of it.</p>\n</blockquote>\n</aside>\n<p>I wasn\u2019t aware of this, thanks a lot! I was searching for a way to do something similar, we are going to try this <img src=\"https://emoji.discourse-cdn.com/twitter/smile.png?v=12\" title=\":smile:\" class=\"emoji\" alt=\":smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> Why do you think we might need to recompile fdb?</p>\n<p>Out of curiosity, did you already discuss about the possibility to expose some simulation stuff through the C API? I haven\u2019t wrote any Flow yet and have very light knowledge about the Simulation, so I could be completely off the mark, but I\u2019m wondering if a layer could be asking things directly to the simulation framework, like:</p>\n<ul>\n<li>next random value,</li>\n<li>should I buggify this line,</li>\n<li>what (simulated) time is it,</li>\n<li>and a lot of complicated things I cannot imagine right now <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue_closed_eyes.png?v=12\" title=\":stuck_out_tongue_closed_eyes:\" class=\"emoji\" alt=\":stuck_out_tongue_closed_eyes:\" loading=\"lazy\" width=\"20\" height=\"20\"></li>\n</ul>\n<p>What do you think?</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-18T08:03:24.018Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 3,
        "incoming_link_count": 2,
        "reads": 26,
        "readers_count": 25,
        "score": 20.2,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/PierreZ/circus/blob/main/circus-simulation/examples/simulation.rs",
            "internal": false,
            "reflection": false,
            "title": "circus/simulation.rs at main \u00b7 PierreZ/circus \u00b7 GitHub",
            "clicks": 1
          },
          {
            "url": "https://www.ncameron.org/blog/portable-and-interoperable-async-rust/",
            "internal": false,
            "reflection": false,
            "title": "Portable and interoperable async Rust",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11146,
        "name": "Markus Pilman",
        "username": "markus.pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "created_at": "2022-05-19T22:58:55.462Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"PierreZ\" data-post=\"7\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/pierrez/48/866_2.png\" class=\"avatar\"> PierreZ:</div>\n<blockquote>\n<p>Why do you think we might need to recompile fdb?</p>\n</blockquote>\n</aside>\n<p>My memory was off, I don\u2019t think you would need to compile your own FDB, it should work (although I never tested this with an installed version of FDB). Generally though: be aware we\u2019re not really using this feature so I would expect some bugs.</p>\n<p>In simulation there is no C API. I think you\u2019re thinking of binding tester which is different (the fdb simulator will run a chaos-test while the binding tester is more intended to test that multiple bindings implement the same logic).</p>\n<p>So what you\u2019re suggesting would be only useful in a fully simulated workload and these are usually implemented in Flow and utilize the native API (so you can do all the things you describe and much more).</p>\n<p>You\u2019re right that the current feature of embedding a binding-workload in the fdb simulator is of limited use because a lot of thing you might want to do are not possible anymore or they will at least change determinism (you can get away with a lot of stuff as long as you don\u2019t use threads or any async APIs \u2013 but for example you can\u2019t even use time).</p>\n<p>It would be a really cool project to make this mechanism more available though. Basically, we would need to provide a framework and some kind of standard library replacement that an application could call to and get simulated behavior. Then you could chaos test your application. You could also do other interesting stuff that are hard to implement outside of the simulator. Stuff like start a new process on a different machine (maybe even in a different data center), send network messages between clients, kill processes, introduce network partitions etc. You could build this to the extreme where you could even use the simulator to test applications that don\u2019t even use FDB.</p>\n<p>While this would be cool (and probably useful), there\u2019s currently just nobody even using the simulator outside of FDB core testing. A project like this would be a huge investment and I don\u2019t think we would get enough value out of this to prioritize this. So for now it is just a cool idea.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-19T22:58:55.462Z",
        "reply_count": 1,
        "reply_to_post_number": 7,
        "quote_count": 1,
        "incoming_link_count": 2,
        "reads": 21,
        "readers_count": 20,
        "score": 19.2,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Markus Pilman",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": true,
        "staff": true,
        "user_id": 15,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 11151,
        "name": "Pierre Zemb",
        "username": "PierreZ",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "created_at": "2022-05-22T17:18:45.461Z",
        "cooked": "<p>Thanks <a class=\"mention\" href=\"/u/markus.pilman\">@markus.pilman</a> for your detailed answer <img src=\"https://emoji.discourse-cdn.com/twitter/smile.png?v=12\" title=\":smile:\" class=\"emoji\" alt=\":smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"8\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p>Generally though: be aware we\u2019re not really using this feature so I would expect some bugs.</p>\n</blockquote>\n</aside>\n<p>I will give it a try anyway <img src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=12\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"markus.pilman\" data-post=\"8\" data-topic=\"3324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/markus.pilman/48/379_2.png\" class=\"avatar\"> markus.pilman:</div>\n<blockquote>\n<p>While this would be cool (and probably useful), there\u2019s currently just nobody even using the simulator outside of FDB core testing. A project like this would be a huge investment and I don\u2019t think we would get enough value out of this to prioritize this. So for now it is just a cool idea.</p>\n</blockquote>\n</aside>\n<p>I agree, cool idea, but with huge investment.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2022-05-22T17:18:45.461Z",
        "reply_count": 0,
        "reply_to_post_number": 8,
        "quote_count": 1,
        "incoming_link_count": 0,
        "reads": 19,
        "readers_count": 18,
        "score": 3.8,
        "yours": false,
        "topic_id": 3324,
        "topic_slug": "how-are-you-testing-your-layers",
        "display_username": "Pierre Zemb",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 534,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-are-you-testing-your-layers/3324/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      11114,
      11132,
      11133,
      11135,
      11136,
      11137,
      11142,
      11146,
      11151
    ]
  },
  "timeline_lookup": [
    [
      1,
      1254
    ],
    [
      3,
      1253
    ],
    [
      8,
      1251
    ],
    [
      9,
      1248
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "How are you testing your layers?",
  "id": 3324,
  "title": "How are you testing your layers?",
  "posts_count": 9,
  "created_at": "2022-05-16T15:38:24.633Z",
  "views": 895,
  "reply_count": 6,
  "like_count": 2,
  "last_posted_at": "2022-05-22T17:18:45.461Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "how-are-you-testing-your-layers",
  "category_id": 9,
  "word_count": 2942,
  "deleted_at": null,
  "user_id": 534,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_3324",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 9,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 5,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "A precise test oracle for FoundationDB simulation workloads",
      "id": 289,
      "title": "A precise test oracle for FoundationDB simulation workloads",
      "slug": "a-precise-test-oracle-for-foundationdb-simulation-workloads",
      "posts_count": 11,
      "reply_count": 7,
      "highest_post_number": 11,
      "image_url": null,
      "created_at": "2018-04-27T14:04:16.394Z",
      "last_posted_at": "2018-04-30T00:17:47.601Z",
      "bumped": true,
      "bumped_at": "2018-04-30T00:20:48.970Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1249,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 54,
            "username": "Evan",
            "name": "Evan Tschannen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/evan/{size}/104_2.png",
            "moderator": true,
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Simulation testing of FoundationDb",
      "id": 2654,
      "title": "Simulation testing of FoundationDb",
      "slug": "simulation-testing-of-foundationdb",
      "posts_count": 7,
      "reply_count": 4,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2021-04-14T16:05:30.941Z",
      "last_posted_at": "2021-07-14T15:07:05.107Z",
      "bumped": true,
      "bumped_at": "2021-07-14T15:07:05.107Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 1371,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 711,
            "username": "osamarin",
            "name": "Oleg Samarin",
            "avatar_template": "/user_avatar/forums.foundationdb.org/osamarin/{size}/905_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 454,
            "username": "jzhou",
            "name": "Jingyu Zhou",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
            "admin": true,
            "moderator": true,
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Porting FoundationDB to Power (ppc64le)",
      "id": 1115,
      "title": "Porting FoundationDB to Power (ppc64le)",
      "slug": "porting-foundationdb-to-power-ppc64le",
      "posts_count": 23,
      "reply_count": 9,
      "highest_post_number": 23,
      "image_url": null,
      "created_at": "2019-02-05T10:43:39.843Z",
      "last_posted_at": "2019-09-20T22:27:07.374Z",
      "bumped": true,
      "bumped_at": "2019-09-20T22:27:07.374Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 2372,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 505,
            "username": "seth-priya",
            "name": "Priya Seth",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/db5fbb/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 158,
            "username": "aseipp",
            "name": "Austin Seipp",
            "avatar_template": "/user_avatar/forums.foundationdb.org/aseipp/{size}/124_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 454,
            "username": "jzhou",
            "name": "Jingyu Zhou",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
            "admin": true,
            "moderator": true,
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Show the FDB Forums: prototyping simulation runs on Kubernetes",
      "id": 1357,
      "title": "Show the FDB Forums: prototyping simulation runs on Kubernetes",
      "slug": "show-the-fdb-forums-prototyping-simulation-runs-on-kubernetes",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2019-05-13T15:01:31.101Z",
      "last_posted_at": "2019-05-13T20:44:25.692Z",
      "bumped": true,
      "bumped_at": "2019-05-13T20:44:25.692Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 1046,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 158,
            "username": "aseipp",
            "name": "Austin Seipp",
            "avatar_template": "/user_avatar/forums.foundationdb.org/aseipp/{size}/124_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FDB Simulate with fdbserver - documentation?",
      "id": 1594,
      "title": "FDB Simulate with fdbserver - documentation?",
      "slug": "fdb-simulate-with-fdbserver-documentation",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2019-08-26T18:23:33.098Z",
      "last_posted_at": "2019-08-26T18:42:19.426Z",
      "bumped": true,
      "bumped_at": "2019-08-26T18:42:19.426Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 818,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 596,
            "username": "JoeD",
            "name": "Joe D",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/77aa72/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 15,
            "username": "markus.pilman",
            "name": "Markus Pilman",
            "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 534,
        "username": "PierreZ",
        "name": "Pierre Zemb",
        "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 15,
        "username": "markus.pilman",
        "name": "Markus Pilman",
        "avatar_template": "/user_avatar/forums.foundationdb.org/markus.pilman/{size}/379_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "admin": true,
        "trust_level": 4
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 14,
        "username": "andrew.noyes",
        "name": "",
        "avatar_template": "/user_avatar/forums.foundationdb.org/andrew.noyes/{size}/443_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 676,
        "username": "nickva",
        "name": "Nick Vatamaniuc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/nickva/{size}/704_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      }
    ],
    "created_by": {
      "id": 534,
      "username": "PierreZ",
      "name": "Pierre Zemb",
      "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png"
    },
    "last_poster": {
      "id": 534,
      "username": "PierreZ",
      "name": "Pierre Zemb",
      "avatar_template": "/user_avatar/forums.foundationdb.org/pierrez/{size}/866_2.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/client-testing.html#testing-error-handling-with-buggify",
        "title": "Client Testing \u2014 FoundationDB 7.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 11,
        "user_id": 13,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/client-testing.html#simulation-and-cluster-workloads",
        "title": "Client Testing \u2014 FoundationDB 7.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 15,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#error-handling",
        "title": "Developer Guide \u2014 FoundationDB 7.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 14,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://forums.foundationdb.org/t/what-do-you-monitor/184",
        "title": "What do you monitor?",
        "internal": true,
        "attachment": false,
        "reflection": false,
        "clicks": 6,
        "user_id": 534,
        "domain": "forums.foundationdb.org",
        "root_domain": "foundationdb.org"
      },
      {
        "url": "https://github.com/apache/couchdb/search?q=buggify",
        "title": "Search \u00b7 buggify \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 4,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apache/couchdb/commit/acb43e12fd7fddc6f606246875909f7c7df27324",
        "title": "Improve retryable FDB error handling \u00b7 apache/couchdb@acb43e1 \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apache/couchdb/commit/d7011765673e649ac2adcde3db2beede920f40be",
        "title": "Improve tx retry resilience when transaction restart \u00b7 apache/couchdb@d701176 \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 13,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://apple.github.io/foundationdb/developer-guide.html#transactions-with-unknown-results",
        "title": "Developer Guide \u2014 FoundationDB 7.1",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 534,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      },
      {
        "url": "https://github.com/PierreZ/circus/blob/main/circus-simulation/examples/simulation.rs",
        "title": "circus/simulation.rs at main \u00b7 PierreZ/circus \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 534,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://www.ncameron.org/blog/portable-and-interoperable-async-rust/",
        "title": "Portable and interoperable async Rust",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 534,
        "domain": "www.ncameron.org",
        "root_domain": "ncameron.org"
      }
    ]
  },
  "bookmarks": []
}