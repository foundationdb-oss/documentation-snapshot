{
  "post_stream": {
    "posts": [
      {
        "id": 2860,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-12-12T17:32:11.032Z",
        "cooked": "<p>I did a bit of thinking on the way back from FDB Summit about how to implement predicate pushdown at the storage process layer.</p>\n<p>Today the only option is to check the layout of the keyspace and send requests outside of FDB to a layer process running on the same machine. This limits you to only the data stored on that machine, which is useful for some applications but probably not all. It also requires every layer to implement that router and correctly handle failures that are already handled by FDB.</p>\n<p>My idea for implementation is to extend the <code>transaction_get_range</code> API to add the ability to send arbitrary predicate data and an arbitrary filtering process name as a part of the <code>transaction_get_range</code> API call</p>\n<pre><code class=\"lang-auto\">FDBFuture* fdb_transaction_get_range_predicate(\n   FDBTransaction* transaction,\n   uint8_t const* begin_key_name,\n   int begin_key_name_length,\n   fdb_bool_t begin_or_equal,\n   int begin_offset,\n   uint8_t const* end_key_name,\n   int end_key_name_length,\n   fdb_bool_t end_or_equal,\n   int end_offset,\n   uint8_t const** predicate_filter_names,\n   uint8_t const** predicates,\n   int limit,\n   int target_bytes,\n   FDBStreamingMode mode,\n   int iteration,\n   fdb_bool_t snapshot,\n   fdb_bool_t reverse\n)\n</code></pre>\n<p>In the <code>foundationdb.conf</code>, you would specify predicate filter processes like this</p>\n<pre><code class=\"lang-auto\">[predicate_filters.FILTER_NAME]\ncommand = /usr/bin/...\nport = 7654\n</code></pre>\n<p>Where <code>FILTER_NAME</code> is the value used in <code>uint8_t const** predicate_filter_names</code>. This would allow multiple different filter processes to live on the same machine at different ports.</p>\n<p>Some protocol would be established to send each KV pair to the filter process, along with the data from the corresponding <code>uint8_t const** predicates</code> index. It would parse the predicate in whatever way it wants to for the layer\u2019s goal (regex, comparing numbers, etc.) and return <code>true</code> or <code>false</code> to indicate whether the data should be filtered from the storage server response.</p>\n<p>A new client library and set of bindings could be developed to make this part easier on developers. From there, they would just implement the parser for their layer\u2019s predicate payload and execute the logic to filter based that payload.</p>\n<p><strong>How this interacts with r/w conflict ranges</strong></p>\n<p>Conflict checking would remain the same, this is just a performance optimization. Any data not returned to the client is still assumed to be read during the transaction.</p>\n<p><strong>Downsides to this approach</strong></p>\n<ul>\n<li>Requires work from layer developers</li>\n<li>Copying data around internally more than before</li>\n<li>More syscalls moving data around than if it were in-process</li>\n</ul>\n<p><strong>Benefits to this approach</strong></p>\n<ul>\n<li>Doesn\u2019t allow CPU-hungry filters to block the Flow thread</li>\n<li>Allows arbitrary filters to be implemented</li>\n<li>Allows developers to use any language</li>\n</ul>\n<p>Did I miss anything critical that would prevent this from moving forward? Has there been any discussion in the past on how best to implement this?</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-12T17:33:47.159Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 194,
        "reads": 81,
        "readers_count": 80,
        "score": 1006.2,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://forums.foundationdb.org/t/possibility-of-server-side-operations-on-versionstamp/1577/3",
            "internal": true,
            "reflection": true,
            "title": "Possibility of Server side operations on VersionStamp",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 2867,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-12-13T00:42:14.431Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"ryanworl\" data-post=\"1\" data-topic=\"954\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ryanworl/48/440_2.png\" class=\"avatar\"> ryanworl:</div>\n<blockquote>\n<p>Has there been any discussion in the past on how best to implement this?</p>\n</blockquote>\n</aside>\n<p>I don\u2019t think there\u2019s been a solid discussion of what the requirements are of predicate pushdown support, and I\u2019d be interested in seeing the requirements and desires of various potential layers\u2019 uses of a predicate pushdown API before considering how to implement one.</p>\n<p>\u0010Specifically, if you and anyone else interested in the feature could please detail:</p>\n<ul>\n<li>What data model you have, and what predicate/computation you want to be able to push down to FDB?</li>\n<li>Why does this predicate/computation need to be pushed down to FDB, and can\u2019t as effectively or easily be a part of a layer?</li>\n</ul>\n<p>I\u2019m concerned that there\u2019s probably a number of issues that complicate creating a layer that\u2019s very efficient and tightly integrated to FDB, and I\u2019d like to make sure we understand specifically what slice of that would be best solved by predicate pushdown (and thus define our requirements), and what problems could be better improved by some other piece of work.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-13T00:42:14.431Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 15,
        "reads": 70,
        "readers_count": 69,
        "score": 89.0,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2868,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-12-13T02:48:26.777Z",
        "cooked": "<p>We can use the document layer as an example. To implement a full collection scan and filter on an unindexed attribute, the layer would need to move all the data from each storage server across the network. You can also imagine a query planner deciding a full collection scan is cheaper than using a secondary index because the filter is not selective enough to outweigh the cost of all the PK lookups.</p>\n<p>If you use the boundary keys API to target requests above FDB to your colocated layer process, you will reduce bandwidth used for some subset of the data within the range of the collection, but unless the collection fits entirely on that shard, you will still transfer the rest of the collection to your layer process. You could also implement a router on top of your layer to distribute the query across colocated layer - storage server pairs and set their read versions to be the same to scatter-gather the query at the layer level.</p>\n<p>Even if bandwidth were free and unlimited, external layer processes would need to implement the parallel processing themselves to filter the full collection in a reasonable amount of time as data volume increases.</p>\n<p>If the predicate could be pushed down into the storage layer in some way as an optional part of the <code>get_range</code> API, you would get parallel filtering to the degree of the number of servers involved in your query. Because this is outside of FDB, it could be implemented in any language and not block the Flow thread.</p>\n<p>I\u2019m <em>not</em> suggesting building any any data model specific features into the storage processes or any other part of FDB. Rather, you would register processes in <code>foundationdb.conf</code> that are colocated with the storage servers and expose a port. These processes would not be a part of the cluster and would not be reachable externally. The storage processes would send these colocated layer processes the KV pairs and the predicate data from the API. This is an arbitrary payload used by the colocated layer process performing the filter which contains the predicate in the format the layer expects.</p>\n<p>An example for the document layer could be something like <code>{\"age\" : [\"&gt;\", 30]}</code> to represent returning only documents with the <code>age</code> field <code>&gt; 30</code>. This data has no meaning to the storage server and is passed as-is to the colocated layer process performing the filtering.</p>\n<p>These processes would be represented by a string name in <code>foundationdb.conf</code>, and you include that string in the client API call to tell the storage server which port to contact for filtering.</p>\n<p>A goal when I was thinking about this solution was to avoid enforcing any specific data model and to minimize the CPU required in the storage processes.</p>\n<p>I realize this may add the complication of needing to key the client transaction\u2019s cache by not just the key range read but also the predicate filters too somehow.</p>\n<hr>\n<p><strong>To answer your questions directly:</strong></p>\n<blockquote>\n<p>What data model you have, and what predicate/computation you want to be able to push down to FDB?</p>\n</blockquote>\n<p>The data model is records with attributes that can be filtered out based entirely upon the contents of the record Keys are also included as a part of the record conceptually. For example, a collection of <code>customer</code> records being filtered by <code>age &gt; 30</code>. If this record is not already indexed by <code>age</code>, a full scan is required. You can imagine more complicated predicates like regular expressions or math which would require more specific indexes than are practical.</p>\n<blockquote>\n<p>Why does this predicate/computation need to be pushed down to FDB, and can\u2019t as effectively or easily be a part of a layer?</p>\n</blockquote>\n<ul>\n<li>Reducing network bandwidth between external layers and storage servers for large range reads</li>\n<li>Automatically parallelizing large range reads among multiple storage servers</li>\n<li>Existing solutions require each layer to implement a router to send queries above FDB to a colocated storage process</li>\n<li>Allows effectively more work to be done within the 5s transaction time limit by adding CPU parallelism to the existing IO parallelism.</li>\n</ul>\n<hr>\n<p>As an aside (feel free to ignore <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=12\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\" loading=\"lazy\" width=\"20\" height=\"20\">), I think this model could be expanded to allow the colocated process to <em>modify</em> the data before it is returned would also be useful. A motivating example would be performing an aggregation. Being able to push the aggregation into the context of a transaction, but also done in parallel across all the storage servers holding the data, would improve externally observed latency and reduce bandwidth usage for large scans.</p>\n<p>To extend the above example, reading the range <code>customers/\\x00</code> to <code>customers/\\xff</code> to calculate the average of the <code>age</code> field within the values could be pushed down to a colocated layer process. The keys returned from reading that range with the aggregate pushed down might look like this:</p>\n<p><code>customers/\\x00 =&gt; {\"age\": 20, \"count\": 500}</code><br>\n<code>customers/\\x01 =&gt; {\"age\": 42, \"count\": 1000}</code><br>\n<code>customers/\\x02 =&gt; {\"age\": 28, \"count\": 1200}</code></p>\n<p>Where <code>...\\x00</code>, <code>\\x01</code>, <code>\\x02</code> etc. are the boundaries between shards. The client making the <code>get_range</code> API call would know to combine the results into the final aggregate.</p>\n<p>(see above about needing to key the transaction cache by the predicates and not just the key range anymore)</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-13T02:52:19.402Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 5,
        "reads": 68,
        "readers_count": 67,
        "score": 43.6,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2871,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2018-12-13T08:27:43.199Z",
        "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"ryanworl\" data-post=\"3\" data-topic=\"954\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/ryanworl/48/440_2.png\" class=\"avatar\"> ryanworl:</div>\n<blockquote>\n<p>You could also implement a router on top of your layer to distribute the query across colocated layer - storage server pairs and set their read versions to be the same to scatter-gather the query at the layer level.<br>\n\u2026</p>\n<ul>\n<li>Existing solutions require each layer to implement a router to send queries above FDB to a colocated storage process</li>\n</ul>\n</blockquote>\n</aside>\n<p>Would it be unfair to summarize your desires for predicate pushdown as making this router easier to implement or unnecessary?  Are there improvements to the Locality API, or framework that the FDB client could provide to implement scatter/gather, that we could do instead to help make writing this router significantly easier?</p>\n<p>For example, if we offered a function</p>\n<pre><code class=\"lang-plaintext\">// Returns the list of IPs that a get_range(begin, end) would send requests to,\n// suffixed with the supplied port.\nSplitScan( Key begin, Key end, int port ) -&gt; [ ip:port of layer process ]\n</code></pre>\n<p>or maybe something like</p>\n<pre><code class=\"lang-plaintext\">// Given a function that sends a request to a layer process for a computation\n// done between `shardBegin` and `shardEnd`, return the list of responses.\n// Note:  the function may be called more than len(result) times, due to client\n// shard location caches being incorrect. \nScatterGather( Key begin, Key end,\n    Function CustomRequestSender( Key shardBegin, Key shardEnd ) -&gt; R) -&gt; [R]\n</code></pre>\n<p>If you had the tools available to be able to write a precise router, such that every scan that any layer process would do would be assured to be a local scan, would you still have a reason to want predicate pushdown support?</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-13T08:27:43.199Z",
        "reply_count": 1,
        "reply_to_post_number": 3,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 57,
        "readers_count": 56,
        "score": 21.4,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2872,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-12-13T12:46:20.156Z",
        "cooked": "<p>Yes, an easier way of implementing that router would be more than half of it in my opinion. I think some documentation on how to scatter-gather the query from there once you have that list would also be useful for the main documentation site (which I suppose I\u2019ve volunteered to write <img src=\"https://emoji.discourse-cdn.com/twitter/sweat_smile.png?v=6\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\">).</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-13T12:46:20.156Z",
        "reply_count": 0,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 56,
        "readers_count": 55,
        "score": 16.2,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2876,
        "name": "Steve Atherton",
        "username": "SteavedHams",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "created_at": "2018-12-13T23:32:42.779Z",
        "cooked": "<p>I just want to add that if a filter aims to accept or reject groups of consecutive key-value pairs where each group constitutes a logical \u201crecord\u201d or \u201cdocument\u201d then the boundary keys that could be used between independent filter instances are not necessarily also FDB shard boundaries.</p>\n<p>In the scatter-gather model using colocated layer instances, this is easy to work around because you can adjust the given begin and end keys of each query to ensure they are at the beginning and end of a logical record, respectively.  The colocated layer will still query mostly local data but possibly also a small amount of remote data.</p>\n<p>This is not so easy to address in the model where the storage server is calling some external filter on the result set composed of only local kv pairs.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-13T23:33:55.113Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 7,
        "reads": 54,
        "readers_count": 53,
        "score": 65.8,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Steve Atherton",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": "",
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 7,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 2877,
        "name": "Ryan Worl",
        "username": "ryanworl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "created_at": "2018-12-13T23:58:30.118Z",
        "cooked": "<p>I hadn\u2019t considered that aspect. That would complicate things a bit and is probably enough reason by itself to not implement it the way I described.</p>\n<p>Thanks!</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2018-12-13T23:58:30.118Z",
        "reply_count": 0,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 55,
        "readers_count": 54,
        "score": 11.0,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Ryan Worl",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 7,
          "username": "SteavedHams",
          "name": "Steve Atherton",
          "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 81,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 3862,
        "name": "Garren Smith",
        "username": "garrensmith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png",
        "created_at": "2019-04-08T13:18:45.867Z",
        "cooked": "<p>Hi All,</p>\n<p>I\u2019m part of the CouchDB and I am looking investigating how we would implement our <a href=\"https://docs.couchdb.org/en/2.2.0/api/database/find.html\" rel=\"nofollow noopener\">Mango</a> query engine in FDB.</p>\n<p><a class=\"mention\" href=\"/u/alexmiller\">@alexmiller</a> asked us to give an overview of our use case for using a Predicate pushdown. To be honest, <a class=\"mention\" href=\"/u/ryanworl\">@ryanworl</a> pretty much nailed our use case in his above post detailing the document layer. But I\u2019ll give a quick summary from CouchDB\u2019s perspective.</p>\n<p>CouchDB Mango is a query language that is based off of MongoDB\u2019s selector syntax. We recently implemented a predicate pushdown for mango. Previously how mango worked was an index was chosen for a query and a start key, end key for the index. Then each shard would stream every document in that range to the coordinating node. The coordinating node would then do an in-memory filter to see if the doc received from a shard matched the complete selector and if so return to the user. We recently changed it that before the shard sent a document to the coordinating node, it also did a full selector match. This resulted in only documents that fully matched the selector to be sent to the coordinating node. This lead to a really nice decrease in internal node network traffic. And it also opens up the possibility of adding aggregations to mango. The idea there being that we can do the aggregations at the shard level and then the coordinating node would do the final aggregation - again Ryan gave a decent summary in his post around that.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 8,
        "updated_at": "2019-04-08T13:18:45.867Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 42,
        "readers_count": 41,
        "score": 28.4,
        "yours": false,
        "topic_id": 954,
        "topic_slug": "feature-request-predicate-pushdown",
        "display_username": "Garren Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://docs.couchdb.org/en/2.2.0/api/database/find.html",
            "internal": false,
            "reflection": false,
            "title": "10.3.6. /db/_find \u2014 Apache CouchDB 2.2 Documentation",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 499,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/feature-request-predicate-pushdown/954/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      2860,
      2867,
      2868,
      2871,
      2872,
      2876,
      2877,
      3862
    ]
  },
  "timeline_lookup": [
    [
      1,
      2505
    ],
    [
      5,
      2504
    ],
    [
      8,
      2388
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Feature Request: Predicate pushdown",
  "id": 954,
  "title": "Feature Request: Predicate pushdown",
  "posts_count": 8,
  "created_at": "2018-12-12T17:32:10.909Z",
  "views": 1940,
  "reply_count": 3,
  "like_count": 2,
  "last_posted_at": "2019-04-08T13:18:45.867Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "feature-request-predicate-pushdown",
  "category_id": 8,
  "word_count": 2231,
  "deleted_at": null,
  "user_id": 81,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_954",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 8,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 4,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Distributed transaction with pushdown predicates",
      "id": 459,
      "title": "Distributed transaction with pushdown predicates",
      "slug": "distributed-transaction-with-pushdown-predicates",
      "posts_count": 3,
      "reply_count": 0,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-05-23T20:04:44.034Z",
      "last_posted_at": "2018-05-24T21:01:42.459Z",
      "bumped": true,
      "bumped_at": "2018-05-24T21:01:42.459Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 980,
      "category_id": 9,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 191,
            "username": "twilmes",
            "name": "Ted Wilmes",
            "avatar_template": "/user_avatar/forums.foundationdb.org/twilmes/{size}/552_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "FDB 7.0 Roadmap",
      "id": 1660,
      "title": "FDB 7.0 Roadmap",
      "slug": "fdb-7-0-roadmap",
      "posts_count": 7,
      "reply_count": 3,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-10-02T02:54:02.744Z",
      "last_posted_at": "2020-01-05T13:45:03.901Z",
      "bumped": true,
      "bumped_at": "2020-01-05T13:45:03.901Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 2453,
      "category_id": 5,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 174,
            "username": "seddonm1",
            "name": "seddonm1",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/e274bd/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 9,
            "username": "mbhaskar",
            "name": "Bhaskar Muppana",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 419,
            "username": "doublemax",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8e7dd6/{size}.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Any chance of server-side Boolean operations like intersection?",
      "id": 445,
      "title": "Any chance of server-side Boolean operations like intersection?",
      "slug": "any-chance-of-server-side-boolean-operations-like-intersection",
      "posts_count": 9,
      "reply_count": 3,
      "highest_post_number": 9,
      "image_url": null,
      "created_at": "2018-05-21T10:01:41.965Z",
      "last_posted_at": "2018-05-22T16:57:56.442Z",
      "bumped": true,
      "bumped_at": "2018-05-22T16:57:56.442Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 1706,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "A few design-pattern + check-my-understanding questions",
      "id": 1153,
      "title": "A few design-pattern + check-my-understanding questions",
      "slug": "a-few-design-pattern-check-my-understanding-questions",
      "posts_count": 10,
      "reply_count": 6,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2019-02-19T15:18:58.329Z",
      "last_posted_at": "2019-02-21T19:51:53.686Z",
      "bumped": true,
      "bumped_at": "2019-02-21T19:51:53.686Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2273,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 519,
            "username": "JamesThompson",
            "name": "James Thompson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/j/c67d28/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Coprocessors or modules",
      "id": 183,
      "title": "Coprocessors or modules",
      "slug": "coprocessors-or-modules",
      "posts_count": 11,
      "reply_count": 5,
      "highest_post_number": 11,
      "image_url": null,
      "created_at": "2018-04-21T17:04:48.883Z",
      "last_posted_at": "2018-04-24T03:27:19.187Z",
      "bumped": true,
      "bumped_at": "2018-04-24T03:27:19.187Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 2354,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 39,
            "username": "ddorian43",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ddorian43/{size}/91_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 30,
            "username": "wwilson",
            "name": "Will Wilson",
            "avatar_template": "/user_avatar/forums.foundationdb.org/wwilson/{size}/88_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 38,
            "username": "panghy",
            "name": "Clement Pang",
            "avatar_template": "/user_avatar/forums.foundationdb.org/panghy/{size}/19_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 81,
        "username": "ryanworl",
        "name": "Ryan Worl",
        "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 3
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 7,
        "username": "SteavedHams",
        "name": "Steve Atherton",
        "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 499,
        "username": "garrensmith",
        "name": "Garren Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 81,
      "username": "ryanworl",
      "name": "Ryan Worl",
      "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png"
    },
    "last_poster": {
      "id": 499,
      "username": "garrensmith",
      "name": "Garren Smith",
      "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png"
    },
    "links": [
      {
        "url": "https://docs.couchdb.org/en/2.2.0/api/database/find.html",
        "title": "10.3.6. /db/_find \u2014 Apache CouchDB 2.2 Documentation",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 499,
        "domain": "docs.couchdb.org",
        "root_domain": "couchdb.org"
      }
    ]
  },
  "bookmarks": []
}