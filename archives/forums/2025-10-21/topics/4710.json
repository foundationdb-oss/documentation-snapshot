{
  "post_stream": {
    "posts": [
      {
        "id": 14555,
        "name": "Dan Meyers",
        "username": "danm",
        "avatar_template": "/user_avatar/forums.foundationdb.org/danm/{size}/1393_2.png",
        "created_at": "2024-11-25T15:26:46.638Z",
        "cooked": "<p>The main mention of the multi-version client seems to be in the docs <a href=\"https://apple.github.io/foundationdb/api-general.html#multi-version-client\" rel=\"noopener nofollow ugc\">here</a>.</p>\n<p>I\u2019m trying to understand what exactly happens when. We\u2019ve got various systems that are currently loaded with 2 different FDB versions (7.1 and 7.3), and every now and again we\u2019ll see a <code>cluster_version_changed</code> error logged.</p>\n<p>We <em>mostly</em> use <code>.read</code> and <code>.run</code>, but occasionally for various reasons we manually create a transaction and choose when to complete it (We\u2019re using Java bindings to call FDB from Clojure, which has a lot of laziness. So in some places we were having issues with dropping out of the \u2018scope\u2019 of the read/run before we\u2019d actually made use of the returned data, so before the tx had actually been executed).</p>\n<p>So my first question is, is it possible to see <code>cluster_version_changed</code> returned as the final state from <code>.read</code>/<code>.run</code>, or is it always retried until some other state is returned there, and all our instances of it will be where we\u2019re manually creating and finishing txes?</p>\n<p>Secondly, how and when does the client decide which network thread is \u2018correct\u2019? We\u2019re calling <code>.open</code> to get a connection right as our app starts up, but we might not then create a tx and try to <code>.get</code> or <code>.set</code> until the first external request hits the JVM. My initial reading was (and our initial testing suggested) that every tx was sent to all version threads in parallel on the expectation that one would succeed and the others would throw, so if we were setting some external in-memory state within the tx, before the first get/set, we would see that updated twice instead of only once.</p>\n<p>But maybe that\u2019s only on the first tx after <code>.open</code>, and subsequent txes only use the one correct thread until <code>cluster_version_changed</code> is thrown again? Or is there some periodic time after which it\u2019ll retry all threads? Or does it pick a random one of the threads first and run it through that, and what read/run do if they get <code>cluster_version_changed</code> is try another, so they\u2019re never running a request for multiple versions in parallel? If they <em>are</em> running in parallel I\u2019m trying to understand what determines which result you get back? I\u2019d expect the failure-case to return first nearly all the time because it has the least to do (fail on first get/set), so does it only return that if the \u2018correct\u2019 version thread times out or similar? Or will it nearly always be the case that the transaction runs twice, once in the correct thread initially, and once as a retry that knows which version to use when the incorrect thread returns <code>cluster_version_changed</code>?</p>\n<p>We\u2019re trying to implement idempotency using something akin to the <code>atomic_idempotency</code> function from <a href=\"https://apple.github.io/foundationdb/automatic-idempotency.html\" rel=\"noopener nofollow ugc\">here</a> and understand how that interacts with the multi-version client (given that the inbuilt feature explicitly doesn\u2019t support it and isn\u2019t prod-ready yet) and if there\u2019s any pitfalls there where we could get caught out.</p>\n<p>In a lot of our code this is a non-issue, because the tx removes an item from a queue and processes it, adding more data to the DB as a result. So if there is any sort of conflict or error and retry, then if the transaction did actually succeed anywhere then the item will no longer be on the queue and something else will be pulled for processing. This is only a problem we are looking at in specific edge-cases where we are having to add idempotency on top of transactions that do not inherently have it \u2018inbuilt\u2019.</p>\n<p>At the moment our assumptions are that:</p>\n<ul>\n<li>It is not possible for a network thread of the wrong version to get \u2018past\u2019 an FDB get/set call in a tx, it will always throw a <code>cluster_version_changed</code> error at that point at the latest.</li>\n<li>When using the multi-version client, it\u2019s more likely that a transaction will be run against the cluster multiple times (first in parallel with \u2018bad\u2019 versions, then on the known-good version).</li>\n</ul>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2024-11-25T15:26:46.638Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 69,
        "reads": 24,
        "readers_count": 23,
        "score": 354.8,
        "yours": false,
        "topic_id": 4710,
        "topic_slug": "how-does-the-multi-version-client-handle-transactions",
        "display_username": "Dan Meyers",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://apple.github.io/foundationdb/api-general.html#multi-version-client",
            "internal": false,
            "reflection": false,
            "title": "Using FoundationDB Clients \u2014 FoundationDB ON documentation",
            "clicks": 7
          },
          {
            "url": "https://apple.github.io/foundationdb/automatic-idempotency.html",
            "internal": false,
            "reflection": false,
            "title": "Automatic Idempotency \u2014 FoundationDB ON documentation",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 1142,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-the-multi-version-client-handle-transactions/4710/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 14559,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2024-11-26T16:28:39.177Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"danm\" data-post=\"1\" data-topic=\"4710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/danm/48/1393_2.png\" class=\"avatar\"> danm:</div>\n<blockquote>\n<p>So my first question is, is it possible to see <code>cluster_version_changed</code> returned as the final state from <code>.read</code>/<code>.run</code>, or is it always retried until some other state is returned there, and all our instances of it will be where we\u2019re manually creating and finishing txes?</p>\n</blockquote>\n</aside>\n<p>The <code>.read</code> and and <code>.run</code> methods on <code>Database</code> both wrap retry loops, so you generally shouldn\u2019t see them return <code>cluster_version_changed</code> unless you set a retry limit via a transaction or database option. One other caveat there is that if you wrap the error in some error class of your own control, then those loops won\u2019t retry the wrapped error even if the cause is a retryable FDB error.</p>\n<aside class=\"quote no-group\" data-username=\"danm\" data-post=\"1\" data-topic=\"4710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/danm/48/1393_2.png\" class=\"avatar\"> danm:</div>\n<blockquote>\n<p>Secondly, how and when does the client decide which network thread is \u2018correct\u2019? We\u2019re calling <code>.open</code> to get a connection right as our app starts up, but we might not then create a tx and try to <code>.get</code> or <code>.set</code> until the first external request hits the JVM. My initial reading was (and our initial testing suggested) that every tx was sent to all version threads in parallel on the expectation that one would succeed and the others would throw, so if we were setting some external in-memory state within the tx, before the first get/set, we would see that updated twice instead of only once.</p>\n<p>But maybe that\u2019s only on the first tx after <code>.open</code> , and subsequent txes only use the one correct thread until <code>cluster_version_changed</code> is thrown again? Or is there some periodic time after which it\u2019ll retry all threads? Or does it pick a random one of the threads first and run it through that, and what read/run do if they get <code>cluster_version_changed</code> is try another, so they\u2019re never running a request for multiple versions in parallel?</p>\n</blockquote>\n</aside>\n<p>The requests shouldn\u2019t be scheduled in parallel, especially not in a way that is noticeable to the JVM. All of the multi-version logic is in the FDB C library that the Java bindings wrap. I believe it\u2019s more-or-less what you suggested at the end: a single version is initially chosen, and then we stick with that version until an operation fails due to a client/server versioning error (which the client and server can determine because each message passed between the two is encoded with a \u201cprotocol version\u201d which must match).</p>\n<aside class=\"quote no-group\" data-username=\"danm\" data-post=\"1\" data-topic=\"4710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/danm/48/1393_2.png\" class=\"avatar\"> danm:</div>\n<blockquote>\n<p>We\u2019re trying to implement idempotency using something akin to the <code>atomic_idempotency</code> function from <a href=\"https://apple.github.io/foundationdb/automatic-idempotency.html\">here</a> and understand how that interacts with the multi-version client (given that the inbuilt feature explicitly doesn\u2019t support it and isn\u2019t prod-ready yet) and if there\u2019s any pitfalls there where we could get caught out.</p>\n</blockquote>\n</aside>\n<p>I think that documentation might be a little out of date, because the multi-version client is prod ready and the retry loop it uses should work for <code>cluster_version_changed</code>. One thing that may be of note: in the retry loop, if you see that the idempotency ID is not set, that\u2019s not enough to guarantee that the transaction <em>wasn\u2019t</em> committed: it\u2019s possible that the commit of the first transaction is effectively in progress and the second transaction was just assigned a read version from before the transaction was committed. However, once the transaction has committed successfully, then you can be sure of what has happened.</p>\n<p>Here\u2019s the basic scenario (and also what can happen if there\u2019s a transaction time out):</p>\n<ol>\n<li>Transaction 1 is created</li>\n<li>Work is done for transaction 1</li>\n<li>The commit for transaction 1 is submitted</li>\n<li>An error happens before the transaction commit state is known (<code>cluster_version_changed</code>, timeout etc.)</li>\n<li>Transaction 2 is created. All reads done will be from a snapshot view of the database here</li>\n<li>Transaction 1 commit completes</li>\n<li>Transaction 2 sees that the idempotency key is not set and so re-runs the work done in step 2</li>\n<li>Transaction 2 commits, but the commit is failed to due to a conflict on the idempotency key</li>\n<li>Transaction 3 can be created that sees that transaction 1 was successfully created</li>\n</ol>\n<p>Note that you could get the exact same behavior if during the retry loop, rather than waiting for the commit response, you just created a new transaction, which is effectively what happens when you retry on a timeout. This is relevant for <code>cluster_version_changed</code> because the process of switching from one client to another ends up giving up on all currently outstanding transactions to a given cluster, including ones that are in the middle of committing, even if it\u2019s not that transaction that actually failed. That being said, assuming any actual cluster upgrades are one way (and even if there are downgrades), cases where a transaction commits late like this should be rare to never with <code>cluster_version_changed</code>, though this remains a real problem for retrying timeouts.</p>\n<p>There are some cases where this can be a problem. If you operation has any side effects, you have to be careful not to rely on the idempotency ID being empty being seen as signal that those side effects did <em>not</em> happen, though you can rely on its presence to let you know if they have already happened.</p>\n<aside class=\"quote no-group\" data-username=\"danm\" data-post=\"1\" data-topic=\"4710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/danm/48/1393_2.png\" class=\"avatar\"> danm:</div>\n<blockquote>\n<p>It is not possible for a network thread of the wrong version to get \u2018past\u2019 an FDB get/set call in a tx, it will always throw a <code>cluster_version_changed</code> error at that point at the latest.</p>\n</blockquote>\n</aside>\n<p>The <code>set</code> operations are actually done entirely locally and don\u2019t requiring talking to the cluster. A <code>get</code> call does have to talk to the cluster, and so it will throw <code>cluster_version_changed</code> if the chosen client isn\u2019t correct. However, if there is an actual upgrade happening simultaneously with the transaction, then the cluster version can change on any call that actually talks to the database.</p>\n<aside class=\"quote no-group\" data-username=\"danm\" data-post=\"1\" data-topic=\"4710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/danm/48/1393_2.png\" class=\"avatar\"> danm:</div>\n<blockquote>\n<p>When using the multi-version client, it\u2019s more likely that a transaction will be run against the cluster multiple times (first in parallel with \u2018bad\u2019 versions, then on the known-good version).</p>\n</blockquote>\n</aside>\n<p>I think that is true, except for the \u201cin parallel\u201d part. Maybe put another way, using the multi-version client can result in retryable errors in more cases than when you don\u2019t use it.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2024-11-26T16:31:37.730Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 9,
        "reads": 20,
        "readers_count": 19,
        "score": 64.0,
        "yours": false,
        "topic_id": 4710,
        "topic_slug": "how-does-the-multi-version-client-handle-transactions",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-the-multi-version-client-handle-transactions/4710/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 14563,
        "name": "Dan Meyers",
        "username": "danm",
        "avatar_template": "/user_avatar/forums.foundationdb.org/danm/{size}/1393_2.png",
        "created_at": "2024-11-27T16:40:53.153Z",
        "cooked": "<p>Exactly what we needed to know! Thank you very much <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 3,
        "updated_at": "2024-11-27T16:40:53.153Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 13,
        "readers_count": 12,
        "score": 2.6,
        "yours": false,
        "topic_id": 4710,
        "topic_slug": "how-does-the-multi-version-client-handle-transactions",
        "display_username": "Dan Meyers",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 1142,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/how-does-the-multi-version-client-handle-transactions/4710/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      14555,
      14559,
      14563
    ]
  },
  "timeline_lookup": [
    [
      1,
      330
    ],
    [
      2,
      329
    ],
    [
      3,
      328
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "How does the multi-version client handle transactions?",
  "id": 4710,
  "title": "How does the multi-version client handle transactions?",
  "posts_count": 3,
  "created_at": "2024-11-25T15:26:46.576Z",
  "views": 109,
  "reply_count": 0,
  "like_count": 1,
  "last_posted_at": "2024-11-27T16:40:53.153Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "how-does-the-multi-version-client-handle-transactions",
  "category_id": 7,
  "word_count": 1803,
  "deleted_at": null,
  "user_id": 1142,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_4710",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 3,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 2,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Transaction Too Old error when using a common read version with multiple client connections",
      "id": 2475,
      "title": "Transaction Too Old error when using a common read version with multiple client connections",
      "slug": "transaction-too-old-error-when-using-a-common-read-version-with-multiple-client-connections",
      "posts_count": 6,
      "reply_count": 1,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2020-12-08T17:00:23.978Z",
      "last_posted_at": "2020-12-09T20:50:30.650Z",
      "bumped": true,
      "bumped_at": "2020-12-09T20:50:30.650Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1155,
      "category_id": 14,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 860,
            "username": "TomG",
            "name": "Tom Guilderson",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/ac8455/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 679,
            "username": "Daniel-B-Smith",
            "name": "Daniel Smith",
            "avatar_template": "/user_avatar/forums.foundationdb.org/daniel-b-smith/{size}/743_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Understanding inter communication",
      "id": 745,
      "title": "Understanding inter communication",
      "slug": "understanding-inter-communication",
      "posts_count": 12,
      "reply_count": 7,
      "highest_post_number": 12,
      "image_url": null,
      "created_at": "2018-10-05T00:51:33.531Z",
      "last_posted_at": "2018-10-11T17:16:52.613Z",
      "bumped": true,
      "bumped_at": "2018-10-11T17:16:52.613Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 10,
      "views": 3588,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 384,
            "username": "Chandru4u",
            "name": "Chandrashekar",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/c/b487fb/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "How to setup multi-version clients with Java?",
      "id": 1549,
      "title": "How to setup multi-version clients with Java?",
      "slug": "how-to-setup-multi-version-clients-with-java",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2019-07-30T22:41:37.609Z",
      "last_posted_at": "2019-07-31T15:04:51.073Z",
      "bumped": true,
      "bumped_at": "2019-07-31T15:04:51.073Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1813,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 627,
            "username": "Dan",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/eada6e/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Set primary data center does not work as expected",
      "id": 1455,
      "title": "Set primary data center does not work as expected",
      "slug": "set-primary-data-center-does-not-work-as-expected",
      "posts_count": 14,
      "reply_count": 12,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2019-06-14T08:35:30.479Z",
      "last_posted_at": "2019-06-18T22:42:38.743Z",
      "bumped": true,
      "bumped_at": "2019-06-18T22:42:38.743Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 786,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 550,
            "username": "ntrhieu89",
            "name": "Hieu Nguyen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ntrhieu89/{size}/587_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Consistency guarantees in case of reusing committed versions",
      "id": 1256,
      "title": "Consistency guarantees in case of reusing committed versions",
      "slug": "consistency-guarantees-in-case-of-reusing-committed-versions",
      "posts_count": 7,
      "reply_count": 4,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2019-03-25T10:48:25.554Z",
      "last_posted_at": "2019-03-26T21:35:37.416Z",
      "bumped": true,
      "bumped_at": "2019-03-26T21:35:37.416Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 3,
      "views": 729,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 170,
            "username": "meln1k",
            "name": "Nikita Melkozerov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/meln1k/{size}/150_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 1142,
        "username": "danm",
        "name": "Dan Meyers",
        "avatar_template": "/user_avatar/forums.foundationdb.org/danm/{size}/1393_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 1142,
      "username": "danm",
      "name": "Dan Meyers",
      "avatar_template": "/user_avatar/forums.foundationdb.org/danm/{size}/1393_2.png"
    },
    "last_poster": {
      "id": 1142,
      "username": "danm",
      "name": "Dan Meyers",
      "avatar_template": "/user_avatar/forums.foundationdb.org/danm/{size}/1393_2.png"
    },
    "links": [
      {
        "url": "https://apple.github.io/foundationdb/api-general.html#multi-version-client",
        "title": "Using FoundationDB Clients \u2014 FoundationDB ON documentation",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 1142,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      }
    ]
  },
  "bookmarks": []
}