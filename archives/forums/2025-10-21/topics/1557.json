{
  "post_stream": {
    "posts": [
      {
        "id": 4781,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-02T13:21:27.437Z",
        "cooked": "<p>I have a single instance of Document Layer running in a k8s cluster.  Document Layer 1.6.3 and FDB 6.1.8 with 2 CPU/4 GB RAM requested and 4 CPU/4 GB RAM limits for the pod.  Upon testing with ~2.5 reads/second for a period of several hours, the pod fails with an OOM error.  The network traffic is mild 80 kB/sec.  Upon looking at the logs, there are 3 events that happen with a regular cadence that I\u2019m not familiar with:</p>\n<pre><code>&lt;Event Severity=\"30\" Time=\"1564750938.622142\" Type=\"Unable to write status\" ID=\"0000000000000000\" Error=\"Request for future version\" Machine=\"xxx.xxx.xxx.xxx:27016\" LogGroup=\"default\" /&gt;\n   \n&lt;Event Severity=\"20\" Time=\"1564745646.132590\" Type=\"N2_ReadError\" ID=\"9e9b2fdcfd1e419a\" SuppressedEventCount=\"7\" Message=\"2\" Machine=\"xxx.xxx.xxx.xxx:27016\" LogGroup=\"default\" /&gt;\n   \n&lt;Event Severity=\"20\" Time=\"1564745116.640767\" Type=\"Net2SlowTaskTrace\" ID=\"0000000000000000\" TraceTime=\"1564745116.640827\" Trace=\"addr2line -e fdbdoc.debug -p -C -f -i 0x7ff97273c890 0x7ff9712439e2 0x7ff9712477d8 0x7ff97124a2ed 0x8406b8 0x83f7f9 0x88df71 0x6682cb 0x670256 0x673df6 0x677431 0x452c36 0x457d66 0x45656a 0x41a69b 0x6b857f 0x447d00 0x7ff9711d4b97 0x40ca69\" Machine=\"xxx.xxx.xxx.xxx:27016\" LogGroup=\"default\" /&gt;\n</code></pre>\n<p>Any thoughts on logs and/or troubleshooting steps?</p>\n<p>Here are the resource usage charts for the pod:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/26a25499fb9c8a8f6d852074d60166410f020910.png\" data-download-href=\"/uploads/short-url/5vLVZlIW8GoMS04DDr8t59qGP5u.png?dl=1\" title=\"doclayer.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_690x91.png\" alt=\"doclayer\" data-base62-sha1=\"5vLVZlIW8GoMS04DDr8t59qGP5u\" width=\"690\" height=\"91\" srcset=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_690x91.png, https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_1035x136.png 1.5x, https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_1380x182.png 2x\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">doclayer.png</span><span class=\"informations\">1671\u00d7222 25.6 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></p>\n<p>UPDATE: Tested with Document Layer v1.7.1 with same results.</p>\n<p>UPDATE by 2.5 reads/second I mean 2.5 mongoAPI collection.find_one({_id: doc_id}) /second.  This workload results in the following metric logs:</p>\n<pre><code>&lt;Event Severity=\"10\" Time=\"1564753943.547671\" Type=\"ConsoleMetric\" ID=\"0000000000000000\" MetricId=\"queryLatency_us\" MetricType=\"TIMER\" Count=\"211\" Sum=\"356157\" Avg=\"1687.95\" Max=\"5105\" Min=\"22\" Top25%=\"28\" Top50%=\"39\" Top90%=\"4647\" Top99%=\"4972\" Top99.99%=\"5105\" Machine=\"xxx:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1564753943.547671\" Type=\"ConsoleMetric\" ID=\"0000000000000000\" MetricId=\"messageRate\" MetricType=\"METER (rate per second)\" Count=\"211\" Sum=\"211\" Avg=\"42.864\" Max=\"1\" Min=\"1\" Top25%=\"1\" Top50%=\"1\" Top90%=\"1\" Top99%=\"1\" Top99.99%=\"1\" Machine=\"xxx:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1564753943.547671\" Type=\"ConsoleMetric\" ID=\"0000000000000000\" MetricId=\"messageLength\" MetricType=\"HISTOGRAMS\" Count=\"211\" Sum=\"43792\" Avg=\"207.545\" Max=\"282\" Min=\"58\" Top25%=\"88\" Top50%=\"264\" Top90%=\"282\" Top99%=\"282\" Top99.99%=\"282\" Machine=\"xxx:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1564753943.547671\" Type=\"ConsoleMetric\" ID=\"0000000000000000\" MetricId=\"queryRate\" MetricType=\"METER (rate per second)\" Count=\"211\" Sum=\"211\" Avg=\"42.8646\" Max=\"1\" Min=\"1\" Top25%=\"1\" Top50%=\"1\" Top90%=\"1\" Top99%=\"1\" Top99.99%=\"1\" Machine=\"xxx:27016\" LogGroup=\"default\" /&gt;</code></pre>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-02T19:46:12.902Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 63,
        "reads": 50,
        "readers_count": 49,
        "score": 325.0,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 3,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/26a25499fb9c8a8f6d852074d60166410f020910.png",
            "internal": false,
            "reflection": false,
            "title": "26a25499fb9c8a8f6d852074d60166410f020910.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 4783,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-08-03T02:48:30.264Z",
        "cooked": "<p>Is this pod only for the document layer, or for FoundationDB also?</p>\n<p>That is a weird collection of errors though.  Would you be able to pastebin the full trace logs ?</p>\n<p>What version of the document layer did the Net2SlowTaskTrace line come from?</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-03T02:48:30.264Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 41,
        "readers_count": 40,
        "score": 18.2,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4786,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-03T13:01:11.280Z",
        "cooked": "<p>The pod is only running Document Layer.  The pasted errors came from version 1.6.3. It may be Monday before I can get the full trace.</p>\n<p>The FDB cluster is in a separate VPC with a peering connection. Functionally, the doc layer works fine with the resources I use the layer for. There appears to be something going on with the Net2 code or my configuration.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-03T13:46:57.432Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 40,
        "readers_count": 39,
        "score": 8.0,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4789,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-05T13:48:27.596Z",
        "cooked": "<p>Recreated leak condition this morning under the same load and grabbed trace.  Document Layer version 1.7.1:</p>\n<p><a href=\"https://pastebin.com/mVUx8sL2\" class=\"onebox\" target=\"_blank\" rel=\"nofollow noopener\">https://pastebin.com/mVUx8sL2</a></p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-05T13:48:27.596Z",
        "reply_count": 0,
        "reply_to_post_number": 2,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 39,
        "readers_count": 38,
        "score": 7.8,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://pastebin.com/mVUx8sL2",
            "internal": false,
            "reflection": false,
            "title": "[XML] doclayermemleak - Pastebin.com",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4790,
        "name": "Bhaskar Muppana",
        "username": "mbhaskar",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
        "created_at": "2019-08-05T14:03:44.951Z",
        "cooked": "<p>Can you also share the queries? It is quite easy to cause OOM with some kind of queries. For example, sort/orderby doesn\u2019t use indexes. So if you are trying to use orderby, it\u2019s quite possible for Doc Layer to attempt to keep the entire data in memory to sort. Having said that, I wouldn\u2019t rule out memory leaks.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-05T14:03:44.951Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 40,
        "readers_count": 39,
        "score": 18.0,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "Bhaskar Muppana",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 9,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4791,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-05T14:21:15.966Z",
        "cooked": "<p>Under this workload, there is roughly 2 requests per second.  Each request requires:</p>\n<ol>\n<li>\n<p>an auth step that checks permissions of requester, grabbing a single document that is quite small and from a collection that has maybe dozens of documents</p>\n<pre><code> self.collection.find_one({DOCID: rsc_id})\n</code></pre>\n</li>\n<li>\n<p>a meta lookup on the resource being modified.  This has the same exact query and collection parameters as above</p>\n</li>\n</ol>\n<p>Occasionally, there is also a meta update push on a separate resource in the back-end:</p>\n<pre><code> self.collection.update(\n        {'_id': self._meta_id_, tag_str: {'$exists': False}},\n        {'$set': {tag_str: ''}}\n    )\n</code></pre>\n<p>I did test the update above as being a source of the issue.  I removed the conditional update and ran the workload without updating the meta.  The problem persisted.</p>\n<p>All other fdb activities around this request workload are outside of Document Layer, but the FDB server itself has a healthy workload in parallel.  This is an ETL workload where the requests are dumps of time series data.  In production, this workload would have 10-200x the workload of this test.  The idea is to scale the services and Document Layer.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-05T14:21:15.966Z",
        "reply_count": 0,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 41,
        "readers_count": 40,
        "score": 8.2,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 9,
          "username": "mbhaskar",
          "name": "Bhaskar Muppana",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4792,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-05T15:10:19.800Z",
        "cooked": "<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458.png\" data-download-href=\"/uploads/short-url/6pus6xiC8Gp8SL8BOQ9lcXeFeCQ.png?dl=1\" title=\"longtermdoclayer.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458_2_690x96.png\" alt=\"longtermdoclayer\" data-base62-sha1=\"6pus6xiC8Gp8SL8BOQ9lcXeFeCQ\" width=\"690\" height=\"96\" srcset=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458_2_690x96.png, https://global.discourse-cdn.com/foundationdb/optimized/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458_2_1035x144.png 1.5x, https://global.discourse-cdn.com/foundationdb/optimized/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458_2_1380x192.png 2x\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">longtermdoclayer.png</span><span class=\"informations\">1645\u00d7230 11.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></p>\n<p>When I took a step back and looked at the memory history of the server running Document Layer, there is always memory creep, the rate of which increases as the workload increases.  There is a monitoring workload that queries once per minute on another resource.</p>\n<pre><code>self.collection.find(\n        {},\n        {FIELDS.data: 0}\n    )\n</code></pre>\n<p>There is also an N2_ReadError event in the trace at about the same frequency during the \u2018slow\u2019 times where I\u2019m not load testing.  My hypothesis right now is that the memory is creeping proportional to the amount of N2_ReadError events.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-05T15:10:19.800Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 40,
        "readers_count": 39,
        "score": 23.0,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458.png",
            "internal": false,
            "reflection": false,
            "title": "2ceeb70cd70d6987d65ff4dc9188dfdc79ce6458.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4793,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-05T18:34:39.749Z",
        "cooked": "<p>For better context of the origin of the server pod, the docker image for the pod is built from the repo\u2019s Dockerfile: <a href=\"https://github.com/FoundationDB/fdb-document-layer/blob/master/packaging/docker/Dockerfile\" rel=\"nofollow noopener\">https://github.com/FoundationDB/fdb-document-layer/blob/master/packaging/docker/Dockerfile</a></p>\n<p>Where the FDB_CLIENT_VERSION arg is set to 6.1.8, which is the FDB server version that the doc layer is connecting to.</p>\n<p>I have built with FDB_DOC_VERSION set to 1.6.3 and 1.7.1.  Both of these configurations result in the same Net2 errors.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-05T18:34:39.749Z",
        "reply_count": 0,
        "reply_to_post_number": 7,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 38,
        "readers_count": 37,
        "score": 17.6,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-document-layer/blob/master/packaging/docker/Dockerfile",
            "internal": false,
            "reflection": false,
            "title": "fdb-document-layer/Dockerfile at master \u00b7 FoundationDB/fdb-document-layer \u00b7 GitHub",
            "clicks": 3
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 611,
          "username": "yennie",
          "name": "",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4804,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-06T18:32:02.782Z",
        "cooked": "<p>The last docker build I tried was to install the entire client binary package instead of copying the libfdb so file.  Config: FDB Server 6.1.8, Doc Layer 1.7.1.  The problem persists.  I turned on verbose logging.  It is not giving me much in terms of a smoking gun.  There are 3 distinct query types that happen, for the most part, they execute with no problems:</p>\n<pre><code>&lt;Event Severity=\"10\" Time=\"1565037006.426282\" Type=\"BD_serverClosedConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.426282\" Type=\"BD_serverNewConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.427283\" Type=\"BD_processRequest\" ID=\"0000000000000000\" Message=\"QUERY: { &lt;connection_request&gt; }, collection=admin.$cmd, flags=0, numberToSkip=0, numberToReturn=-1 (HEADER: messageLength=264, requestID=1706328732, responseTo=0, opCode=2004)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.427283\" Type=\"BD_doRun\" ID=\"0000000000000000\" Reply=\"REPLY: documents=[ { ismaster: true, maxBsonObjectSize: 16777216, maxMessageSizeBytes: 48000000, maxWriteBatchSize: 1000, localTime: new Date(1565037006427), minWireVersion: 0, maxWireVersion: 3, ok: 1.0 } ], responseFlags=0, cursorID=0, startingFrom=0 (HEADER: messageLength=0, requestID=0, responseTo=1706328732, opCode=1)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.427283\" Type=\"BD_msgReply\" ID=\"0000000000000000\" Message=\"REPLY: documents=[ { ismaster: true, maxBsonObjectSize: 16777216, maxMessageSizeBytes: 48000000, maxWriteBatchSize: 1000, localTime: new Date(1565037006427), minWireVersion: 0, maxWireVersion: 3, ok: 1.0 } ], responseFlags=0, cursorID=0, startingFrom=0 (HEADER: messageLength=194, requestID=0, responseTo=1706328732, opCode=1)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.427283\" Type=\"BD_serverNewConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.428507\" Type=\"BD_processRequest\" ID=\"0000000000000000\" Message=\"QUERY: { ismaster: 1, client: { driver: { name: &amp;quot;PyMongo&amp;quot;, version: &amp;quot;3.7.1&amp;quot; }, os: { type: &amp;quot;Linux&amp;quot;, name: &amp;quot;Linux&amp;quot;, architecture: &amp;quot;x86_64&amp;quot;, version: &amp;quot;4.14.106-97.85.amzn2.x86_64&amp;quot; }, platform: &amp;quot;CPython 3.6.8.final.0&amp;quot; }, compression: {} }, collection=admin.$cmd, flags=0, numberToSkip=0, numberToReturn=-1 (HEADER: messageLength=282, requestID=245755489, responseTo=0, opCode=2004)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.428507\" Type=\"BD_doRun\" ID=\"0000000000000000\" Reply=\"REPLY: documents=[ { ismaster: true, maxBsonObjectSize: 16777216, maxMessageSizeBytes: 48000000, maxWriteBatchSize: 1000, localTime: new Date(1565037006428), minWireVersion: 0, maxWireVersion: 3, ok: 1.0 } ], responseFlags=0, cursorID=0, startingFrom=0 (HEADER: messageLength=0, requestID=0, responseTo=245755489, opCode=1)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.428507\" Type=\"BD_msgReply\" ID=\"0000000000000000\" Message=\"REPLY: documents=[ { ismaster: true, maxBsonObjectSize: 16777216, maxMessageSizeBytes: 48000000, maxWriteBatchSize: 1000, localTime: new Date(1565037006428), minWireVersion: 0, maxWireVersion: 3, ok: 1.0 } ], responseFlags=0, cursorID=0, startingFrom=0 (HEADER: messageLength=194, requestID=0, responseTo=245755489, opCode=1)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.428681\" Type=\"BD_processRequest\" ID=\"0000000000000000\" Message=\"QUERY: { _id: &lt;rsc_id&gt;; }, collection=&lt;some-collection&gt;, flags=4, numberToSkip=0, numberToReturn=-1 (HEADER: messageLength=88, requestID=1078780340, responseTo=0, opCode=2004)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.432421\" Type=\"BD_construct_filter_plan\" ID=\"0000000000000000\" source_plan=\"{ type: &amp;quot;table scan&amp;quot; }\" pushed_down_into=\"{ type: &amp;quot;PK lookup&amp;quot;, bounds: { begin: &amp;quot;&amp;quot;imperial&amp;quot;&amp;quot;, end: &amp;quot;&amp;quot;imperial&amp;quot;&amp;quot; } }\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.432421\" Type=\"BD_GetMatchingDocs\" ID=\"0000000000000000\" QueryPredicate=\"AND(ANY(ExtPath(_id) matching EQUALS('&lt;rsc_id&gt;')))\" SimplifiedPredicate=\"AND(ANY(ExtPath(_id) matching EQUALS('&lt;rsc_id&gt;')))\" Plan=\"{ type: &amp;quot;PK lookup&amp;quot;, bounds: { begin: &amp;quot;&lt;rsc_id&gt;;&amp;quot;, end: &amp;quot;&lt;rsc_id&gt;&amp;quot; } }\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.434524\" Type=\"BD_doRun\" ID=\"0000000000000000\" Reply=\"REPLY: documents=[ { &lt;the_correct_document&gt; } ], responseFlags=8, cursorID=0, startingFrom=0 (HEADER: messageLength=0, requestID=0, responseTo=1078780340, opCode=1)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.434524\" Type=\"BD_msgReply\" ID=\"0000000000000000\" Message=\"REPLY: documents=[ { &lt;the_correct_document&gt; } ], responseFlags=8, cursorID=0, startingFrom=0 (HEADER: messageLength=128, requestID=0, responseTo=1078780340, opCode=1)\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.449930\" Type=\"BD_serverClosedConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.450067\" Type=\"BD_serverClosedConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.450067\" Type=\"BD_serverNewConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n</code></pre>\n<p>Then, randomly, for any of the 3 query types, I will receive:</p>\n<pre><code>&lt;Event Severity=\"20\" Time=\"1565037006.875053\" Type=\"N2_ReadError\" ID=\"5d05202df29b42ce\" SuppressedEventCount=\"29\" Message=\"2\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n&lt;Event Severity=\"10\" Time=\"1565037006.875053\" Type=\"BD_serverClosedConnection\" ID=\"0000000000000000\" Machine=\"ip:27016\" LogGroup=\"default\" /&gt;\n</code></pre>\n<p>With the N2_ReadError inserted before the serverClosed log, but always at the same timestamp.  There is no apparent pattern for which query this happens after.  It does appear to happen about once / second, looking at the timestamps:</p>\n<pre><code>1565037009.232541\n1565037010.279092\n1565037011.403663\n1565037012.414639\n1565037013.510789\n1565037014.520024\n1565037015.523663\n</code></pre>\n<p>The memory leak continues at 16 MB/min.</p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-06T19:28:33.696Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 2,
        "reads": 37,
        "readers_count": 36,
        "score": 22.4,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 9,
          "username": "mbhaskar",
          "name": "Bhaskar Muppana",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4831,
        "name": "Bhaskar Muppana",
        "username": "mbhaskar",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
        "created_at": "2019-08-08T07:42:10.619Z",
        "cooked": "<p>Yeah, I agree with you. This has nothing to do with the kind of requests you are doing. I could reproduce this kind of behavior very easily locally with huge churn of connections with simple commands like <code>isMaster</code>. The leak is predominant, if I run a command like <code>listDatabases</code>. Probably we have more than one kind of leak.</p>\n<p>On FoundationDB server, we periodically run Valgrind to catch memory leaks. We never ran it on Document Layer. I have raised an GitHub issue to track this particular issue - <a href=\"https://github.com/FoundationDB/fdb-document-layer/issues/202\" rel=\"nofollow noopener\">https://github.com/FoundationDB/fdb-document-layer/issues/202</a>.</p>",
        "post_number": 10,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-08T07:42:10.619Z",
        "reply_count": 1,
        "reply_to_post_number": 9,
        "quote_count": 0,
        "incoming_link_count": 21,
        "reads": 38,
        "readers_count": 37,
        "score": 117.6,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "Bhaskar Muppana",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-document-layer/issues/202",
            "internal": false,
            "reflection": false,
            "title": "Memory leak on connections \u00b7 Issue #202 \u00b7 FoundationDB/fdb-document-layer \u00b7 GitHub",
            "clicks": 7
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 611,
          "username": "yennie",
          "name": "",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 9,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/10",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4833,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-08T13:20:31.653Z",
        "cooked": "<p>I suspect the usage of Flow, which I may or may not have built with the right debugging setup (thought I would dive in to this, but after this morning\u2019s exercise I\u2019ll leave it to the Pros <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=9\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\">) :</p>\n<p>Workload: ~ 13000 new connections w/ getDatabases</p>\n<pre><code>valgrind --leak-check=yes build/bin/fdbdoc -l 127.0.0.1:27017 -C /etc/foundationdb/fdb.cluster\n==6920== Memcheck, a memory error detector\n==6920== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==6920== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==6920== Command: build/bin/fdbdoc -l 127.0.0.1:27017 -C /etc/foundationdb/fdb.cluster\n==6920== \n0FdbDocServer (1.7): listening on 127.0.0.1:27017\n^C==6920== \n==6920== Process terminating with default action of signal 2 (SIGINT)\n==6920==    at 0x6302BB7: epoll_wait (epoll_wait.c:30)\n==6920==    by 0x6D697F: boost::asio::detail::epoll_reactor::run(long, boost::asio::detail::op_queue&lt;boost::asio::detail::scheduler_operation&gt;&amp;) (epoll_reactor.ipp:471)\n==6920==    by 0x6D79EB: boost::asio::detail::scheduler::do_run_one(boost::asio::detail::conditionally_enabled_mutex::scoped_lock&amp;, boost::asio::detail::scheduler_thread_info&amp;, boost::system::error_code const&amp;) (scheduler.ipp:385)\n==6920==    by 0x6D9D59: boost::asio::detail::scheduler::run_one(boost::system::error_code&amp;) (scheduler.ipp:175)\n==6920==    by 0x6D1A7B: run_one (io_context.ipp:77)\n==6920==    by 0x6D1A7B: N2::ASIOReactor::sleepAndReact(double) (Net2.actor.cpp:994)\n==6920==    by 0x6D2FA3: N2::Net2::run() (Net2.actor.cpp:608)\n==6920==    by 0x450873: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920== \n==6920== HEAP SUMMARY:\n==6920==     in use at exit: 1,305,768 bytes in 13,578 blocks\n==6920==   total heap usage: 904,854 allocs, 891,276 frees, 42,884,036 bytes allocated\n==6920== \n==6920== 56 bytes in 1 blocks are definitely lost in loss record 1,908 of 2,903\n==6920==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6920==    by 0x69C75D: TraceEvent::setNetworkThread() (Trace.cpp:990)\n==6920==    by 0x450304: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920== \n==6920== 304 bytes in 1 blocks are possibly lost in loss record 2,759 of 2,903\n==6920==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6920==    by 0x40134A6: allocate_dtv (dl-tls.c:286)\n==6920==    by 0x40134A6: _dl_allocate_tls (dl-tls.c:530)\n==6920==    by 0x4E44227: allocate_stack (allocatestack.c:627)\n==6920==    by 0x4E44227: pthread_create@@GLIBC_2.2.5 (pthread_create.c:644)\n==6920==    by 0x67C9C7: startThread(void* (*)(void*), void*) (Platform.cpp:2186)\n==6920==    by 0x6F4D90: ThreadPool::addThread(IThreadPoolReceiver*) (vector.tcc:98)\n==6920==    by 0x6B78C3: TraceLog::open(std::string const&amp;, std::string const&amp;, std::string, std::string const&amp;, unsigned long, unsigned long, Optional&lt;NetworkAddress&gt;) (Trace.cpp:306)\n==6920==    by 0x6A63E9: openTraceFile(NetworkAddress const&amp;, unsigned long, unsigned long, std::string, std::string, std::string) (Trace.cpp:632)\n==6920==    by 0x45039A: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920== \n==6920== 304 bytes in 1 blocks are possibly lost in loss record 2,760 of 2,903\n==6920==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6920==    by 0x40134A6: allocate_dtv (dl-tls.c:286)\n==6920==    by 0x40134A6: _dl_allocate_tls (dl-tls.c:530)\n==6920==    by 0x4E44227: allocate_stack (allocatestack.c:627)\n==6920==    by 0x4E44227: pthread_create@@GLIBC_2.2.5 (pthread_create.c:644)\n==6920==    by 0x67E5EC: startThread (Platform.cpp:2186)\n==6920==    by 0x67E5EC: setupSlowTaskProfiler() (Platform.cpp:2840)\n==6920==    by 0x454610: (anonymous namespace)::SetupActorState&lt;(anonymous namespace)::SetupActor&gt;::a_body1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920==    by 0x44E356: (anonymous namespace)::SetupActor::SetupActor(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920==    by 0x44E3DF: setup(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920==    by 0x4507C3: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920== \n==6920== 304 bytes in 1 blocks are possibly lost in loss record 2,761 of 2,903\n==6920==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6920==    by 0x40134A6: allocate_dtv (dl-tls.c:286)\n==6920==    by 0x40134A6: _dl_allocate_tls (dl-tls.c:530)\n==6920==    by 0x4E44227: allocate_stack (allocatestack.c:627)\n==6920==    by 0x4E44227: pthread_create@@GLIBC_2.2.5 (pthread_create.c:644)\n==6920==    by 0x67C9C7: startThread(void* (*)(void*), void*) (Platform.cpp:2186)\n==6920==    by 0x45462D: (anonymous namespace)::SetupActorState&lt;(anonymous namespace)::SetupActor&gt;::a_body1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920==    by 0x44E356: (anonymous namespace)::SetupActor::SetupActor(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920==    by 0x44E3DF: setup(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920==    by 0x4507C3: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==6920== \n==6920== LEAK SUMMARY:\n==6920==    definitely lost: 56 bytes in 1 blocks\n==6920==    indirectly lost: 0 bytes in 0 blocks\n==6920==      possibly lost: 912 bytes in 3 blocks\n==6920==    still reachable: 1,304,800 bytes in 13,574 blocks\n==6920==                       of which reachable via heuristic:\n==6920==                         stdstring          : 87,430 bytes in 1,691 blocks\n==6920==         suppressed: 0 bytes in 0 blocks\n==6920== Reachable blocks (those to which a pointer was found) are not shown.\n==6920== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==6920== \n==6920== For counts of detected and suppressed errors, rerun with: -v\n==6920== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)\n</code></pre>\n<p>w/ full|all</p>\n<pre><code>==9090== 36,480 bytes in 760 blocks are still reachable in loss record 2,934 of 2,942\n==9090==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x465BE0: ExtConnection::ExtConnection(Reference&lt;DocumentLayer&gt;, Reference&lt;BufferedConnection&gt;, long) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x45226A: (anonymous namespace)::ExtServerConnectionActorState&lt;(anonymous namespace)::ExtServerConnectionActor&gt;::a_body1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44D106: (anonymous namespace)::ExtServerConnectionActor::ExtServerConnectionActor(Reference&lt;DocumentLayer&gt; const&amp;, Reference&lt;BufferedConnection&gt; const&amp;, long const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44D213: extServerConnection(Reference&lt;DocumentLayer&gt; const&amp;, Reference&lt;BufferedConnection&gt; const&amp;, long const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x45925E: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopBody1when1(Reference&lt;IConnection&gt; const&amp;, int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x462F05: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;*, Reference&lt;IConnection&gt;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x460115: ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;::fire(Reference&lt;IConnection&gt; const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6E1173: finishSendAndDelPromiseRef (flow.h:331)\n==9090==    by 0x6E1173: N2::Listener::DoAcceptActorState&lt;N2::Listener::DoAcceptActor&gt;::a_body1cont2(Void const&amp;, int) (Net2.actor.g.cpp:759)\n==9090==    by 0x6E1D43: a_body1when1 (Net2.actor.g.cpp:766)\n==9090==    by 0x6E1D43: a_callback_fire (Net2.actor.g.cpp:780)\n==9090==    by 0x6E1D43: ActorCallback&lt;N2::Listener::DoAcceptActor, 0, Void&gt;::fire(Void const&amp;) (flow.h:850)\n==9090==    by 0x421502: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6DE09E: send&lt;Void&gt; (flow.h:630)\n==9090==    by 0x6DE09E: N2::BindPromise::operator()(boost::system::error_code const&amp;, unsigned long) (Net2.actor.cpp:259)\n==9090== \n==9090== 40,000 bytes in 1 blocks are still reachable in loss record 2,935 of 2,942\n==9090==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x54C0657: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x522E4D9: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x52084B4: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5208CF9: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x52B565A: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x52B58F8: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x522796F: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5482949: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x51864CD: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x52A934B: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x51596F5: ??? (in /usr/lib/libfdb_c.so)\n==9090== \n==9090== 65,556 bytes in 1 blocks are still reachable in loss record 2,936 of 2,942\n==9090==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x54C0657: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x54C06E9: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x513FED7: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5385588: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x538707C: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x53924FA: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5392714: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x538266F: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x548AFBB: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x548BB89: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x522796F: ??? (in /usr/lib/libfdb_c.so)\n==9090== \n==9090== 65,556 bytes in 1 blocks are still reachable in loss record 2,937 of 2,942\n==9090==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x54C0657: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x54C06E9: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x513FED7: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5385588: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5386DE4: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x522796F: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x5482949: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x51864CD: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x52A934B: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x51596F5: ??? (in /usr/lib/libfdb_c.so)\n==9090==    by 0x513CCB8: fdb_run_network (in /usr/lib/libfdb_c.so)\n==9090== \n==9090== 66,880 bytes in 760 blocks are still reachable in loss record 2,938 of 2,942\n==9090==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x6E1B76: DoAcceptActorState (Net2.actor.cpp:463)\n==9090==    by 0x6E1B76: DoAcceptActor (Net2.actor.g.cpp:823)\n==9090==    by 0x6E1B76: doAccept (Net2.actor.cpp:461)\n==9090==    by 0x6E1B76: N2::Listener::accept() (Net2.actor.cpp:455)\n==9090==    by 0x456F96: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopBody1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x45549D: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopHead1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x45A053: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopBody1cont1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x4592A6: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopBody1when1(Reference&lt;IConnection&gt; const&amp;, int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x462F05: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;*, Reference&lt;IConnection&gt;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x460115: ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;::fire(Reference&lt;IConnection&gt; const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6E1173: finishSendAndDelPromiseRef (flow.h:331)\n==9090==    by 0x6E1173: N2::Listener::DoAcceptActorState&lt;N2::Listener::DoAcceptActor&gt;::a_body1cont2(Void const&amp;, int) (Net2.actor.g.cpp:759)\n==9090==    by 0x6E1D43: a_body1when1 (Net2.actor.g.cpp:766)\n==9090==    by 0x6E1D43: a_callback_fire (Net2.actor.g.cpp:780)\n==9090==    by 0x6E1D43: ActorCallback&lt;N2::Listener::DoAcceptActor, 0, Void&gt;::fire(Void const&amp;) (flow.h:850)\n==9090==    by 0x421502: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6DE09E: send&lt;Void&gt; (flow.h:630)\n==9090==    by 0x6DE09E: N2::BindPromise::operator()(boost::system::error_code const&amp;, unsigned long) (Net2.actor.cpp:259)\n==9090== \n==9090== 80,000 bytes in 1 blocks are still reachable in loss record 2,939 of 2,942\n==9090==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x6CCF27: initProfiling() (Net2.actor.cpp:81)\n==9090==    by 0x67E583: setupSlowTaskProfiler() (Platform.cpp:2828)\n==9090==    by 0x454610: (anonymous namespace)::SetupActorState&lt;(anonymous namespace)::SetupActor&gt;::a_body1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44E356: (anonymous namespace)::SetupActor::SetupActor(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44E3DF: setup(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x4507C3: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090== \n==9090== 80,000 bytes in 1 blocks are still reachable in loss record 2,940 of 2,942\n==9090==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x6CCF43: initProfiling() (Net2.actor.cpp:82)\n==9090==    by 0x67E583: setupSlowTaskProfiler() (Platform.cpp:2828)\n==9090==    by 0x454610: (anonymous namespace)::SetupActorState&lt;(anonymous namespace)::SetupActor&gt;::a_body1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44E356: (anonymous namespace)::SetupActor::SetupActor(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44E3DF: setup(NetworkAddress const&amp;, Optional&lt;unsigned short&gt; const&amp;, std::string const&amp;, ConnectionOptions const&amp;, char const* const&amp;, std::string const&amp;, std::vector&lt;std::pair&lt;std::string, std::string&gt;, std::allocator&lt;std::pair&lt;std::string, std::string&gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt;, std::allocator&lt;std::pair&lt;FDBNetworkOption, Standalone&lt;StringRef&gt; &gt; &gt; &gt; const&amp;, std::string const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x4507C3: main (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090== \n==9090== 93,568 bytes in 688 blocks are still reachable in loss record 2,941 of 2,942\n==9090==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x4335B2: BufferedConnection::BufferedConnection(Reference&lt;IConnection&gt;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x459227: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopBody1when1(Reference&lt;IConnection&gt; const&amp;, int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x462F05: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;*, Reference&lt;IConnection&gt;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x460115: ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;::fire(Reference&lt;IConnection&gt; const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6E1173: finishSendAndDelPromiseRef (flow.h:331)\n==9090==    by 0x6E1173: N2::Listener::DoAcceptActorState&lt;N2::Listener::DoAcceptActor&gt;::a_body1cont2(Void const&amp;, int) (Net2.actor.g.cpp:759)\n==9090==    by 0x6E1D43: a_body1when1 (Net2.actor.g.cpp:766)\n==9090==    by 0x6E1D43: a_callback_fire (Net2.actor.g.cpp:780)\n==9090==    by 0x6E1D43: ActorCallback&lt;N2::Listener::DoAcceptActor, 0, Void&gt;::fire(Void const&amp;) (flow.h:850)\n==9090==    by 0x421502: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6DE09E: send&lt;Void&gt; (flow.h:630)\n==9090==    by 0x6DE09E: N2::BindPromise::operator()(boost::system::error_code const&amp;, unsigned long) (Net2.actor.cpp:259)\n==9090==    by 0x6DE655: operator() (bind_handler.hpp:65)\n==9090==    by 0x6DE655: asio_handler_invoke&lt;boost::asio::detail::binder1&lt;N2::BindPromise, boost::system::error_code&gt; &gt; (handler_invoke_hook.hpp:69)\n==9090==    by 0x6DE655: invoke&lt;boost::asio::detail::binder1&lt;N2::BindPromise, boost::system::error_code&gt;, N2::BindPromise&gt; (handler_invoke_helpers.hpp:37)\n==9090==    by 0x6DE655: complete&lt;boost::asio::detail::binder1&lt;N2::BindPromise, boost::system::error_code&gt; &gt; (handler_work.hpp:82)\n==9090==    by 0x6DE655: boost::asio::detail::reactive_socket_accept_op&lt;boost::asio::basic_socket&lt;boost::asio::ip::tcp&gt;, boost::asio::ip::tcp, N2::BindPromise&gt;::do_complete(void*, boost::asio::detail::scheduler_operation*, boost::system::error_code const&amp;, unsigned long) (reactive_socket_accept_op.hpp:137)\n==9090==    by 0x6DA22B: complete (scheduler_operation.hpp:40)\n==9090==    by 0x6DA22B: boost::asio::detail::epoll_reactor::descriptor_state::do_complete(void*, boost::asio::detail::scheduler_operation*, boost::system::error_code const&amp;, unsigned long) (epoll_reactor.ipp:776)\n==9090==    by 0x6D7B78: complete (scheduler_operation.hpp:40)\n==9090==    by 0x6D7B78: boost::asio::detail::scheduler::do_run_one(boost::asio::detail::conditionally_enabled_mutex::scoped_lock&amp;, boost::asio::detail::scheduler_thread_info&amp;, boost::system::error_code const&amp;) (scheduler.ipp:401)\n==9090== \n==9090== 115,520 bytes in 760 blocks are still reachable in loss record 2,942 of 2,942\n==9090==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==9090==    by 0x45224B: (anonymous namespace)::ExtServerConnectionActorState&lt;(anonymous namespace)::ExtServerConnectionActor&gt;::a_body1(int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44D106: (anonymous namespace)::ExtServerConnectionActor::ExtServerConnectionActor(Reference&lt;DocumentLayer&gt; const&amp;, Reference&lt;BufferedConnection&gt; const&amp;, long const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x44D213: extServerConnection(Reference&lt;DocumentLayer&gt; const&amp;, Reference&lt;BufferedConnection&gt; const&amp;, long const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x45925E: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_body1loopBody1when1(Reference&lt;IConnection&gt; const&amp;, int) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x462F05: (anonymous namespace)::ExtServerActorState&lt;(anonymous namespace)::ExtServerActor&gt;::a_callback_fire(ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;*, Reference&lt;IConnection&gt;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x460115: ActorCallback&lt;(anonymous namespace)::ExtServerActor, 0, Reference&lt;IConnection&gt; &gt;::fire(Reference&lt;IConnection&gt; const&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6E1173: finishSendAndDelPromiseRef (flow.h:331)\n==9090==    by 0x6E1173: N2::Listener::DoAcceptActorState&lt;N2::Listener::DoAcceptActor&gt;::a_body1cont2(Void const&amp;, int) (Net2.actor.g.cpp:759)\n==9090==    by 0x6E1D43: a_body1when1 (Net2.actor.g.cpp:766)\n==9090==    by 0x6E1D43: a_callback_fire (Net2.actor.g.cpp:780)\n==9090==    by 0x6E1D43: ActorCallback&lt;N2::Listener::DoAcceptActor, 0, Void&gt;::fire(Void const&amp;) (flow.h:850)\n==9090==    by 0x421502: void SAV&lt;Void&gt;::send&lt;Void&gt;(Void&amp;&amp;) (in /home/yennie/repos/fdb-document-layer/build/bin/fdbdoc)\n==9090==    by 0x6DE09E: send&lt;Void&gt; (flow.h:630)\n==9090==    by 0x6DE09E: N2::BindPromise::operator()(boost::system::error_code const&amp;, unsigned long) (Net2.actor.cpp:259)\n==9090==    by 0x6DE655: operator() (bind_handler.hpp:65)\n==9090==    by 0x6DE655: asio_handler_invoke&lt;boost::asio::detail::binder1&lt;N2::BindPromise, boost::system::error_code&gt; &gt; (handler_invoke_hook.hpp:69)\n==9090==    by 0x6DE655: invoke&lt;boost::asio::detail::binder1&lt;N2::BindPromise, boost::system::error_code&gt;, N2::BindPromise&gt; (handler_invoke_helpers.hpp:37)\n==9090==    by 0x6DE655: complete&lt;boost::asio::detail::binder1&lt;N2::BindPromise, boost::system::error_code&gt; &gt; (handler_work.hpp:82)\n==9090==    by 0x6DE655: boost::asio::detail::reactive_socket_accept_op&lt;boost::asio::basic_socket&lt;boost::asio::ip::tcp&gt;, boost::asio::ip::tcp, N2::BindPromise&gt;::do_complete(void*, boost::asio::detail::scheduler_operation*, boost::system::error_code const&amp;, unsigned long) (reactive_socket_accept_op.hpp:137)\n==9090== \n==9090== LEAK SUMMARY:\n==9090==    definitely lost: 56 bytes in 1 blocks\n==9090==    indirectly lost: 0 bytes in 0 blocks\n==9090==      possibly lost: 912 bytes in 3 blocks\n==9090==    still reachable: 1,054,730 bytes in 10,667 blocks\n==9090==                       of which reachable via heuristic:\n==9090==                         stdstring          : 81,756 bytes in 1,503 blocks\n==9090==         suppressed: 0 bytes in 0 blocks\n==9090== \n==9090== For counts of detected and suppressed errors, rerun with: -v\n==9090== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)</code></pre>",
        "post_number": 11,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-08T13:32:25.311Z",
        "reply_count": 1,
        "reply_to_post_number": 10,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 39,
        "readers_count": 38,
        "score": 27.8,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 2,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 9,
          "username": "mbhaskar",
          "name": "Bhaskar Muppana",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/11",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4874,
        "name": "Bhaskar Muppana",
        "username": "mbhaskar",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
        "created_at": "2019-08-12T17:54:58.192Z",
        "cooked": "<p>Just merged a <a href=\"https://github.com/FoundationDB/fdb-document-layer/pull/203\" rel=\"nofollow noopener\">PR</a> to fix the memory leaks, at least majority of them.</p>",
        "post_number": 12,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-12T17:54:58.192Z",
        "reply_count": 1,
        "reply_to_post_number": 11,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 29,
        "readers_count": 28,
        "score": 10.8,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "Bhaskar Muppana",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-document-layer/pull/203",
            "internal": false,
            "reflection": false,
            "title": "Resolves #202: Fixes memory leak on `ExtConnection` by apkar \u00b7 Pull Request #203 \u00b7 FoundationDB/fdb-document-layer \u00b7 GitHub",
            "clicks": 20
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 611,
          "username": "yennie",
          "name": "",
          "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 9,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/12",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 4882,
        "name": "",
        "username": "yennie",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "created_at": "2019-08-13T18:36:22.085Z",
        "cooked": "<p>Looks great so far!  Thanks!</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://global.discourse-cdn.com/foundationdb/original/1X/c4439052e5f9a65b7734e0533f2c445411f7093e.png\" data-download-href=\"/uploads/short-url/s0el0KYkyP2FvaKrwY42CeMXPr0.png?dl=1\" title=\"afterpr.png\" rel=\"nofollow noopener\"><img src=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/c4439052e5f9a65b7734e0533f2c445411f7093e_2_690x156.png\" alt=\"afterpr\" data-base62-sha1=\"s0el0KYkyP2FvaKrwY42CeMXPr0\" width=\"690\" height=\"156\" srcset=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/c4439052e5f9a65b7734e0533f2c445411f7093e_2_690x156.png, https://global.discourse-cdn.com/foundationdb/optimized/1X/c4439052e5f9a65b7734e0533f2c445411f7093e_2_1035x234.png 1.5x, https://global.discourse-cdn.com/foundationdb/optimized/1X/c4439052e5f9a65b7734e0533f2c445411f7093e_2_1380x312.png 2x\" data-small-upload=\"https://global.discourse-cdn.com/foundationdb/optimized/1X/c4439052e5f9a65b7734e0533f2c445411f7093e_2_10x10.png\"><div class=\"meta\">\n<svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\">afterpr.png</span><span class=\"informations\">1663\u00d7377 38.9 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg>\n</div></a></div></p>",
        "post_number": 13,
        "post_type": 1,
        "posts_count": 13,
        "updated_at": "2019-08-13T18:36:22.085Z",
        "reply_count": 0,
        "reply_to_post_number": 12,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 29,
        "readers_count": 28,
        "score": 25.8,
        "yours": false,
        "topic_id": 1557,
        "topic_slug": "document-layer-oom",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://global.discourse-cdn.com/foundationdb/original/1X/c4439052e5f9a65b7734e0533f2c445411f7093e.png",
            "internal": false,
            "reflection": false,
            "title": "c4439052e5f9a65b7734e0533f2c445411f7093e.png",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 9,
          "username": "mbhaskar",
          "name": "Bhaskar Muppana",
          "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png"
        },
        "bookmarked": false,
        "actions_summary": [
          {
            "id": 2,
            "count": 1
          }
        ],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 611,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/document-layer-oom/1557/13",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      4781,
      4783,
      4786,
      4789,
      4790,
      4791,
      4792,
      4793,
      4804,
      4831,
      4833,
      4874,
      4882
    ]
  },
  "timeline_lookup": [
    [
      1,
      2272
    ],
    [
      3,
      2271
    ],
    [
      4,
      2269
    ],
    [
      9,
      2268
    ],
    [
      10,
      2267
    ],
    [
      11,
      2266
    ],
    [
      12,
      2262
    ],
    [
      13,
      2261
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Document Layer OOM",
  "id": 1557,
  "title": "Document Layer OOM",
  "posts_count": 13,
  "created_at": "2019-08-02T13:21:27.375Z",
  "views": 1257,
  "reply_count": 9,
  "like_count": 1,
  "last_posted_at": "2019-08-13T18:36:22.085Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "document-layer-oom",
  "category_id": 11,
  "word_count": 5196,
  "deleted_at": null,
  "user_id": 611,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": "https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_1024x136.png",
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1557",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 13,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 3,
  "show_read_indicator": false,
  "thumbnails": [
    {
      "max_width": null,
      "max_height": null,
      "width": 1671,
      "height": 222,
      "url": "https://global.discourse-cdn.com/foundationdb/original/1X/26a25499fb9c8a8f6d852074d60166410f020910.png"
    },
    {
      "max_width": 1024,
      "max_height": 1024,
      "width": 1024,
      "height": 136,
      "url": "https://global.discourse-cdn.com/foundationdb/optimized/1X/26a25499fb9c8a8f6d852074d60166410f020910_2_1024x136.png"
    }
  ],
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Segmentation fault error and broken cluster",
      "id": 483,
      "title": "Segmentation fault error and broken cluster",
      "slug": "segmentation-fault-error-and-broken-cluster",
      "posts_count": 17,
      "reply_count": 12,
      "highest_post_number": 17,
      "image_url": null,
      "created_at": "2018-05-31T15:34:28.123Z",
      "last_posted_at": "2018-06-11T17:31:13.656Z",
      "bumped": true,
      "bumped_at": "2018-06-11T17:31:13.656Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 2,
      "views": 4331,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 211,
            "username": "brk0v",
            "name": "Viacheslav Biriukov",
            "avatar_template": "/user_avatar/forums.foundationdb.org/brk0v/{size}/173_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 156,
            "username": "spullara",
            "name": "Sam Pullara",
            "avatar_template": "/user_avatar/forums.foundationdb.org/spullara/{size}/125_2.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Foundationdb 6.2 - fdbserver going out of memory",
      "id": 2080,
      "title": "Foundationdb 6.2 - fdbserver going out of memory",
      "slug": "foundationdb-6-2-fdbserver-going-out-of-memory",
      "posts_count": 10,
      "reply_count": 5,
      "highest_post_number": 10,
      "image_url": null,
      "created_at": "2020-04-20T14:55:39.274Z",
      "last_posted_at": "2020-04-23T04:34:49.858Z",
      "bumped": true,
      "bumped_at": "2020-04-23T04:34:49.858Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 1037,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 714,
            "username": "tuk",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/t/b5ac83/{size}.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "FDB out of memory",
      "id": 3460,
      "title": "FDB out of memory",
      "slug": "fdb-out-of-memory",
      "posts_count": 6,
      "reply_count": 2,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2022-07-20T03:12:58.094Z",
      "last_posted_at": "2022-07-22T12:33:26.077Z",
      "bumped": true,
      "bumped_at": "2022-07-22T12:54:40.104Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 962,
      "category_id": 17,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 1126,
            "username": "CodingSuen",
            "name": "CodingSuen",
            "avatar_template": "/user_avatar/forums.foundationdb.org/codingsuen/{size}/1367_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 454,
            "username": "jzhou",
            "name": "Jingyu Zhou",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jzhou/{size}/445_2.png",
            "admin": true,
            "moderator": true,
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 164,
            "username": "Imperatorx",
            "name": "",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/i/d2c977/{size}.png",
            "trust_level": 2
          }
        }
      ]
    },
    {
      "fancy_title": "Foundationdb seems keep reinitialising itself after client hang",
      "id": 1437,
      "title": "Foundationdb seems keep reinitialising itself after client hang",
      "slug": "foundationdb-seems-keep-reinitialising-itself-after-client-hang",
      "posts_count": 6,
      "reply_count": 2,
      "highest_post_number": 6,
      "image_url": null,
      "created_at": "2019-06-10T10:10:13.209Z",
      "last_posted_at": "2019-06-26T18:08:03.629Z",
      "bumped": true,
      "bumped_at": "2019-06-26T18:08:03.629Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1222,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 602,
            "username": "ppggff",
            "name": "ppggff",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ppggff/{size}/855_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 166,
            "username": "gaurav",
            "name": "gaurav",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/b487fb/{size}.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 13,
            "username": "alexmiller",
            "name": "Alex Miller",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Large spikes in memory usage on storage processes, 6.0.18",
      "id": 2115,
      "title": "Large spikes in memory usage on storage processes, 6.0.18",
      "slug": "large-spikes-in-memory-usage-on-storage-processes-6-0-18",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": "https://global.discourse-cdn.com/foundationdb/optimized/1X/4c7f8a022ee38e69df8abe772878aff823a76550_2_1024x320.png",
      "created_at": "2020-05-12T19:17:47.329Z",
      "last_posted_at": "2020-05-12T21:58:14.570Z",
      "bumped": true,
      "bumped_at": "2020-05-12T21:58:14.570Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 582,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 490,
            "username": "rjenkins",
            "name": "Ray Jenkins",
            "avatar_template": "/user_avatar/forums.foundationdb.org/rjenkins/{size}/487_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 611,
        "username": "yennie",
        "name": "",
        "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png",
        "post_count": 9,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 1
      },
      {
        "id": 9,
        "username": "mbhaskar",
        "name": "Bhaskar Muppana",
        "avatar_template": "/user_avatar/forums.foundationdb.org/mbhaskar/{size}/277_2.png",
        "post_count": 3,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      }
    ],
    "created_by": {
      "id": 611,
      "username": "yennie",
      "name": "",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png"
    },
    "last_poster": {
      "id": 611,
      "username": "yennie",
      "name": "",
      "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/y/c68b51/{size}.png"
    },
    "links": [
      {
        "url": "https://github.com/FoundationDB/fdb-document-layer/pull/203",
        "title": "Resolves #202: Fixes memory leak on `ExtConnection` by apkar \u00b7 Pull Request #203 \u00b7 FoundationDB/fdb-document-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 20,
        "user_id": 9,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-document-layer/issues/202",
        "title": "Memory leak on connections \u00b7 Issue #202 \u00b7 FoundationDB/fdb-document-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 7,
        "user_id": 9,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-document-layer/blob/master/packaging/docker/Dockerfile",
        "title": "fdb-document-layer/Dockerfile at master \u00b7 FoundationDB/fdb-document-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 611,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://pastebin.com/mVUx8sL2",
        "title": "[XML] doclayermemleak - Pastebin.com",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 611,
        "domain": "pastebin.com",
        "root_domain": "pastebin.com"
      }
    ]
  },
  "bookmarks": []
}