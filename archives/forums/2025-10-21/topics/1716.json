{
  "post_stream": {
    "posts": [
      {
        "id": 5455,
        "name": "Rishabh",
        "username": "rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "created_at": "2019-11-05T18:47:39.315Z",
        "cooked": "<p>We need to persist strings in database and retrieve those strings in the <strong>same case</strong> as inserted.<br>\nBut, iteration on such strings as keys (ex: in modelling indexes) should be in case-insensitive sorting order.</p>\n<p>To explain this in detail, consider below examples:</p>\n<p>In below pseudo codes, consider [  ] as tuple layer encoding and <strong>CIS</strong> as some datatype called \u201cCase Insensitive String\u201d somehow solving our use case.</p>\n<p>(1) User should be able to fetch stored data in case insensitive fashion:</p>\n<blockquote>\n<p>txn.set( [ <strong>CIS</strong>( \u201cmyKey\u201d ) ], &lt;Data&gt; );<br>\nrange = new Range.<a href=\"https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/Range.html#startsWith(byte%5B%5D)\" rel=\"noopener nofollow ugc\">startsWith</a>( [ <strong>CIS</strong>( \u201cMYKeY\u201d ) ] );<br>\ntxn.getRange( range ) == List{ ( <strong>CIS</strong>( \u201cmyKey\u201d ), &lt;Data&gt; ) }</p>\n<p>// Note: The above range statement  is same as:<br>\nrange = new Range( [ <strong>CIS</strong>( \u201cMYKeY\u201d ) ],  <a href=\"https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/tuple/ByteArrayUtil.java#L351\" rel=\"noopener nofollow ugc\">strinc</a>( [ <strong>CIS</strong>( \u201cMYKeY\u201d ) ] ) );</p>\n</blockquote>\n<p>(2) In key-prefix based range queries, user should be able to decode key data in the <strong>same case</strong> as it was inserted, but data should retrieved in case-insensitive <strong>sorting</strong> fashion:</p>\n<blockquote>\n<p>txn.set( [ <strong>CIS</strong>( \u201cmyKey1\u201d ) ], &lt;Data1&gt; );<br>\ntxn.set( [ <strong>CIS</strong>( \u201cMyKey2\u201d ) ], &lt;Data2&gt; );<br>\nrange = new Range( \u2018\\0x00\u2019, \u2018\\0xff\u2019 ); // get entire subspace<br>\nrangeRead = txn.getRange( range );</p>\n<p>// Even though \u2018m\u2019 &gt; \u2018M\u2019, results are returned in case insensitive sort order<br>\nrangeRead  == List{ (  <strong>CIS</strong> ( \u201cmyKey1\u201d ), &lt;Data1&gt; ), (  <strong>CIS</strong> ( \u201cMyKey2\u201d ), &lt;Data2&gt; ) };</p>\n<p>// There is a way to get strings in original (preserved) case by some API, say originalString()<br>\nrangeRead.map(x \u2192 x.key().originalString() ) == List{ \u201cmyKey1\u201d, \u201cMyKey2\u201d ) }</p>\n</blockquote>\n<p>If we already have a solution for this, please point me to the same. If not, please read below proposed sol\u2019n.</p>\n<p><strong>Sol 1: Keep 2 copies</strong><br>\nStore 2 copies of each string, (1) in lowercase and (2) in originally inserted case. We can then use (1) for key encoding and (2) for returning data to client. Mapping of (1) \u2192 (2) needs to be modeled here.</p>\n<p>This increases key size by 2x which is going unacceptable for us, considering our large indexed data.</p>\n<p><strong>Sol 2: A new Datatype</strong></p>\n<p>Fortunately, string\u2019s characters for our use case are printable ASCII characters (32 to 126) only. Based on this assumption, here is a solution below.</p>\n<p>Tuple Layer already has a datatype \u201cString\u201d which effectively uses <a href=\"http://www.asciitable.com/\" rel=\"noopener nofollow ugc\">ASCII table</a> to map character to byte. For solving our use-case, we introduce a datatype <strong>CIS</strong> in tuple layer with the same approach as \u201cString\u201d but with different mapping table:</p>\n<pre><code class=\"lang-plaintext\">(Space) =&gt; 0\n! =&gt; 1\n...(skipped)....\nA =&gt; 33\na =&gt; 34\nB \nb \n..(skipped)...\nZ\nz \n[ \n..(skipped)....\n~ =&gt; 94\n</code></pre>\n<p>Using this mapping, set() is straightforward. But for read(), we use all upper-case in start range and all lower-case in end range.</p>\n<p>(1) fetch stored data in case insensitive fashion:</p>\n<blockquote>\n<p>txn.set( [  <strong>CIS</strong> ( \u201cmyKey\u201d ) ], &lt;Data&gt; );</p>\n<p>start = [   <strong>CIS</strong> ( \u201cMYKeY\u201d ).upperCase() ];<br>\nend = <a href=\"https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/tuple/ByteArrayUtil.java#L351\" rel=\"noopener nofollow ugc\">strinc</a>(  [ <strong>CIS</strong> ( \u201cMYKeY\u201d ).lowerCase() ] );<br>\ntxn.getRange( new Range( start, end ) ) == List{ (  <strong>CIS</strong> ( \u201cmyKey\u201d ), &lt;Data&gt; ) }</p>\n</blockquote>\n<p>(2) decode key in same case but retrieve data in case-insensitive sorting:</p>\n<blockquote>\n<p>txn.set( [  <strong>CIS</strong> ( \u201cmyKey1\u201d ) ], &lt;Data1&gt; );<br>\ntxn.set( [  <strong>CIS</strong> ( \u201cMyKey2\u201d ) ], &lt;Data2&gt; );<br>\nrangeRead  = txn.getRange( new Range( \u2018\\0x00\u2019, \u2018\\0xff\u2019 ) );</p>\n<p>rangeRead  == List{ (  <strong>CIS</strong> ( \u201cmyKey1\u201d ), &lt;Data1&gt; ), (  <strong>CIS</strong> ( \u201cMyKey2\u201d ), &lt;Data2&gt; ) };</p>\n<p>rangeRead.map(x \u2192 x.key().originalString() ) == List{ \u201cmyKey1\u201d, \u201cMyKey2\u201d ) }</p>\n</blockquote>\n<p>Below is a more complicated example of cases where one models composite indexes based on tuples:</p>\n<blockquote>\n<p>// Assume that we have a dataset of people with composite index<br>\n// on columns: [ city, age, company, name  ], inserted as:<br>\ntxn.set( [  <strong>CIS</strong> ( \u201ccity\u201d ), &lt;age&gt;, <strong>CIS</strong> ( \u201ccompany\u201d ), <strong>CIS</strong> ( \u201cname\u201d ) ], &lt;empty&gt; );</p>\n<p>// To iterate over all people in \u201cSydney\u201d aged 30 in \u201cGoogle\u201d, we do:<br>\nstart = [  <strong>CIS</strong> ( \u201cSydney\u201d ).upperCase(), 30, <strong>CIS</strong> ( \u201cGoogle\u201d ).upperCase() ];<br>\nend = <a href=\"https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/tuple/ByteArrayUtil.java#L351\" rel=\"noopener nofollow ugc\">strinc</a>( [  <strong>CIS</strong> ( \u201cSydney\u201d ).lowerCase(), 30, <strong>CIS</strong> ( \u201cGoogle\u201d ).lowerCase() ] );<br>\ncursor = txn.getRange( new Range( start, end ) );</p>\n</blockquote>\n<p>Additionally:</p>\n<ul>\n<li>For deletion, we need to do: clearRange( upperCase, lowerCase )</li>\n<li>Before every set( key ), we need to do: clearRange( upperCase, lowerCase )</li>\n</ul>\n<p>It would be great if fdb team can provide feedback on this approach.</p>\n<ul>\n<li>Does this approach sound right or is there a simpler way to solve this?</li>\n<li>If it sounds right, could you point me to loop-holes/bugs in this approach, if any?</li>\n<li>Is this very specific to our use case or could this be generalized &amp; contributed to fdb?</li>\n</ul>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-05T18:47:39.315Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 182,
        "reads": 27,
        "readers_count": 26,
        "score": 920.4,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Rishabh",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/tuple/ByteArrayUtil.java#L351",
            "internal": false,
            "reflection": false,
            "title": "foundationdb/ByteArrayUtil.java at master \u00b7 apple/foundationdb \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/Range.html#startsWith(byte%5B%5D)",
            "internal": false,
            "reflection": false,
            "title": "Range (FoundationDB Java Client API)",
            "clicks": 1
          },
          {
            "url": "http://www.asciitable.com/",
            "internal": false,
            "reflection": false,
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 545,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/1",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null,
        "can_vote": false
      },
      {
        "id": 5456,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-11-05T20:01:32.733Z",
        "cooked": "<p>I\u2019ve heard CouchDB people discussing a similar issue, where a different bytestring is needed for proper sorting than the string itself.  (+cc <a class=\"mention\" href=\"/u/garrensmith\">@garrensmith</a> or <a class=\"mention\" href=\"/u/rnewson\">@rnewson</a>)  I believe their solution was to store two copies of the string.</p>\n<aside class=\"quote no-group\" data-username=\"rishabh\" data-post=\"1\" data-topic=\"1716\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/rishabh/48/540_2.png\" class=\"avatar\"> rishabh:</div>\n<blockquote>\n<p>(1) fetch stored data in case insensitive fashion:</p>\n</blockquote>\n</aside>\n<p>Unless I\u2019m missing something, between <code>AAA</code> and <code>aaa</code> is <code>XYZ</code>, so I don\u2019t think doing this range read is going to work, as you\u2019ll read about half your data set each time?</p>\n<p>If all you really need is just to re-establish the proper case of the inserted ASCII-only-and-never-UTF8-string, then I\u2019d probably just uppercase the key, and keep a bitvector in the value of which characters are <em>supposed</em> to be uppercase.  When you need the actual string, you merge the key with the bit vector to produce the appropriately cased string.</p>\n<p>If one were to introduce <code>CIS</code> for keys, you could technically suffix this bitvector onto the end of the key, and do a range read, but the two approaches would be essentially equivalent.</p>",
        "post_number": 2,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-05T20:01:32.733Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 4,
        "reads": 24,
        "readers_count": 23,
        "score": 29.8,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/2",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5457,
        "name": "Robert Newson",
        "username": "rnewson",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rnewson/{size}/502_2.png",
        "created_at": "2019-11-05T20:35:05.330Z",
        "cooked": "<p>A CouchDB index (or \u201cview\u201d in our parlance) has a defined collation order that we are obliged to preserve as we move to a FoundationDB backend. Collation order is (obviously) defined rigidly for keys in FDB as the byte ordering, with no API to alter that.</p>\n<p>We use ICU sort keys (<a href=\"http://userguide.icu-project.org/collation/concepts#TOC-Sortkeys-vs-Comparison\" rel=\"nofollow noopener\">http://userguide.icu-project.org/collation/concepts#TOC-Sortkeys-vs-Comparison</a>) to convert any strings emitted by an index definition into a (longer) value that compares byte-for-byte in the same way that the ICU collator we currently use compares.</p>\n<p>This isn\u2019t strictly about case-folding, as I don\u2019t recognise that as a CouchDB problem (if the user wants case-insensitive search today, they\u2019d have to call toLowerCase() in their map function).</p>\n<p>The other indexes we support at IBM Cloudant (and this will also be true for CouchDB 3.0) is Lucene indexing, which does (typically) perform case-folding. Cloudant\u2019s solution there is <a href=\"https://github.com/cloudant-labs/fdblucene\" rel=\"nofollow noopener\">https://github.com/cloudant-labs/fdblucene</a>, which simply uses FDB as a file store, and so we didn\u2019t need to alter our approach on case-insensitivity there either.</p>\n<p>This is the long way to say that I don\u2019t recall the discussion you are referring to, but hopefully the above was useful even if not relevant to the problem at hand.</p>",
        "post_number": 3,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-05T20:35:05.330Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 4,
        "reads": 24,
        "readers_count": 23,
        "score": 24.8,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Robert Newson",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/cloudant-labs/fdblucene",
            "internal": false,
            "reflection": false,
            "title": "GitHub - cloudant-labs/fdblucene: Lucene / FoundationDB integration library",
            "clicks": 3
          },
          {
            "url": "http://userguide.icu-project.org/collation/concepts#TOC-Sortkeys-vs-Comparison",
            "internal": false,
            "reflection": false,
            "title": "Collation Concepts - ICU User Guide",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 451,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/3",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5460,
        "name": "Rishabh",
        "username": "rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "created_at": "2019-11-05T21:25:18.116Z",
        "cooked": "<aside class=\"quote no-group\" data-username=\"alexmiller\" data-post=\"2\" data-topic=\"1716\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alexmiller/48/326_2.png\" class=\"avatar\"> alexmiller:</div>\n<blockquote>\n<p>Unless I\u2019m missing something, between <code>AAA</code> and <code>aaa</code> is <code>XYZ</code> , so I don\u2019t think doing this range read is going to work, as you\u2019ll read about half your data set each time?</p>\n</blockquote>\n</aside>\n<p>XYZ does not come between AAA and aaa in the character to byte mapping I proposed. It is not based on ASCII mapping. As per the mapping given by me in sol\u2019n:</p>\n<ul>\n<li>AAA = (byte) 33,  (byte) 33,   (byte) 33</li>\n<li>aaa = (byte) 34,  (byte) 34, (byte) 34</li>\n<li>XYZ = (byte) 79, (byte) 81, (byte) 83</li>\n</ul>\n<p>So AAA &lt; aaa &lt;XYZ.</p>",
        "post_number": 4,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-05T21:25:18.116Z",
        "reply_count": 1,
        "reply_to_post_number": 2,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 22,
        "readers_count": 21,
        "score": 14.4,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Rishabh",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 545,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/4",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5461,
        "name": "Alex Miller",
        "username": "alexmiller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "created_at": "2019-11-05T21:37:48.867Z",
        "cooked": "<p>Ah, right, yes.  Apparently that didn\u2019t sink in, sorry.</p>\n<p>You\u2019re still going to have troubles with this for compound keys though, right?  Using your more complicated example as a template to define three tuples:</p>\n<pre><code class=\"lang-auto\">a = [  CIS( \u201cCITY\u201d ), 20,  CIS( \u201ccompany\u201d ),  CIS( \u201cname\u201d ) ]\nb = [  CIS( \"City\" ), 30,  CIS( \"farm\" ), CIS( \"walrus\" ) ]\nc = [  CIS( \"city\" ), 20, CIS( \"company\" ), CIS( \"name\" ) ]\n</code></pre>\n<p>then when your composite index is being searched for <code>( CIS(\"city\"), 20, CIS(\"company\"), _ )</code>, you\u2019d want to only get <code>a</code> and <code>c</code>, but you\u2019d also get <code>b</code>.  This would mean that you could only have one CIS per index, if you wish for it to be precise, and all non-CIS keys would need to precede it in the index.  That may or may not be an actual problem for you.</p>",
        "post_number": 5,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-05T21:38:39.730Z",
        "reply_count": 1,
        "reply_to_post_number": 4,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 22,
        "readers_count": 21,
        "score": 9.4,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Alex Miller",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 545,
          "username": "rishabh",
          "name": "Rishabh",
          "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 13,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/5",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5467,
        "name": "Rishabh",
        "username": "rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "created_at": "2019-11-06T12:04:09.599Z",
        "cooked": "<p>Ah! yes! So for such use cases, bitvector approach is the answer.</p>\n<p>Thanks a lot.</p>",
        "post_number": 6,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-06T12:04:09.599Z",
        "reply_count": 1,
        "reply_to_post_number": 5,
        "quote_count": 0,
        "incoming_link_count": 3,
        "reads": 20,
        "readers_count": 19,
        "score": 24.0,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Rishabh",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 13,
          "username": "alexmiller",
          "name": "Alex Miller",
          "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 545,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/6",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5468,
        "name": "Alec Grieser",
        "username": "alloc",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "created_at": "2019-11-06T15:00:16.220Z",
        "cooked": "<p>I\u2019ll also say that the Record Layer also recently added support for collation indexes using the <a href=\"https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.8.89.0/com/apple/foundationdb/record/metadata/expressions/CollateFunctionKeyExpression.html\"><code>CollationFunctionKeyExpression</code></a> with pluggable collator support (with default implementations using the native tools in the <a href=\"https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.8.89.0/com/apple/foundationdb/record/metadata/expressions/CollateFunctionKeyExpressionFactoryJRE.CollateFunctionKeyExpressionJRE.html\">Java runtime environment</a> and <a href=\"https://javadoc.io/static/org.foundationdb/fdb-record-layer-icu/2.8.89.0/com/apple/foundationdb/record/icu/CollateFunctionKeyExpressionFactoryICU.CollateFunctionKeyExpressionICU.html\">ICU4J</a>).</p>\n<p>You can see the implementation here: <a href=\"https://github.com/FoundationDB/fdb-record-layer/pull/307/files\">https://github.com/FoundationDB/fdb-record-layer/pull/307/files</a></p>\n<p>This takes the approach of converting the string to a byte array where the unsigned byte order of the string is consistent with your desired sort order (so, in your case, converting all characters to lower case and then presumably UTF-8 or ASCII encoding). By default, that is the only thing that goes into the index, so to get the original string back, you can look up the source record from the index. One can also add additional columns to the index (including in the value) and then the Record Layer could use that to retrieve the original string without needing to resolve the original record (at the cost of extra storage).</p>\n<hr>\n<p>As to comments on the original approach presented, I think it also has the following problem. Consider the following three strings:</p>\n<ul>\n<li>STRING</li>\n<li>SUPER</li>\n<li>string</li>\n</ul>\n<p>If I\u2019m understanding the proposal correctly, then I think <code>CIS(\"STRING\")</code> &lt; <code>CIS(\"SUPER\")</code> &lt; <code>CIS(\"string\")</code> as <code>CIS('S')</code> &lt; <code>CIS('s')</code>. So if you had those three strings all in your index, then sorting by their CIS\u2019d values will produce the wrong order (with \u201cSTRING\u201d, \u201cstring\u201d, \u201cSUPER\u201d expected). This would also cause the proposed range deletes to not work properly in this case, as a deletion of the \u201cstring\u201d key (case insensitively) would also delete \u201cSUPER\u201d.</p>\n<p>Unless I\u2019m mistaken.</p>",
        "post_number": 7,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-06T15:00:16.220Z",
        "reply_count": 1,
        "reply_to_post_number": 6,
        "quote_count": 0,
        "incoming_link_count": 1,
        "reads": 22,
        "readers_count": 21,
        "score": 14.4,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Alec Grieser",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/FoundationDB/fdb-record-layer/pull/307/files",
            "internal": false,
            "reflection": false,
            "title": "Resolves #249: Collating index by MMcM \u00b7 Pull Request #307 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
            "clicks": 2
          },
          {
            "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.8.89.0/com/apple/foundationdb/record/metadata/expressions/CollateFunctionKeyExpression.html",
            "internal": false,
            "reflection": false,
            "title": "CollateFunctionKeyExpression (fdb-record-layer-core 2.8.89.0 API)",
            "clicks": 2
          },
          {
            "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-icu/2.8.89.0/com/apple/foundationdb/record/icu/CollateFunctionKeyExpressionFactoryICU.CollateFunctionKeyExpressionICU.html",
            "internal": false,
            "reflection": false,
            "title": "CollateFunctionKeyExpressionFactoryICU.CollateFunctionKeyExpressionICU (fdb-record-layer-icu 2.8.89.0 API)",
            "clicks": 1
          },
          {
            "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.8.89.0/com/apple/foundationdb/record/metadata/expressions/CollateFunctionKeyExpressionFactoryJRE.CollateFunctionKeyExpressionJRE.html",
            "internal": false,
            "reflection": false,
            "title": "CollateFunctionKeyExpressionFactoryJRE.CollateFunctionKeyExpressionJRE (fdb-record-layer-core 2.8.89.0 API)",
            "clicks": 0
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "id": 545,
          "username": "rishabh",
          "name": "Rishabh",
          "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png"
        },
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 8,
        "hidden": false,
        "trust_level": 4,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/7",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5469,
        "name": "Garren Smith",
        "username": "garrensmith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png",
        "created_at": "2019-11-06T15:12:31.710Z",
        "cooked": "<p>I\u2019m not sure if it will help much in your case. But here is CouchDB\u2019s <a href=\"https://github.com/apache/couchdb/blob/prototype/fdb-layer/src/couch_views/src/couch_views_encoding.erl\" rel=\"nofollow noopener\">encoding source code</a></p>\n<p>We use ICU sort strings to sort all strings correctly. We then keep the original keys in the value so that they can be returned back to the user.</p>",
        "post_number": 8,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-06T15:12:31.710Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 0,
        "reads": 21,
        "readers_count": 20,
        "score": 4.2,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Garren Smith",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://github.com/apache/couchdb/blob/prototype/fdb-layer/src/couch_views/src/couch_views_encoding.erl",
            "internal": false,
            "reflection": false,
            "title": "couchdb/couch_views_encoding.erl at prototype/fdb-layer \u00b7 apache/couchdb \u00b7 GitHub",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 499,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/8",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      },
      {
        "id": 5496,
        "name": "Rishabh",
        "username": "rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "created_at": "2019-11-08T16:21:13.121Z",
        "cooked": "<p>Thanks for all the inputs. Looks like the ultimate solution is to have 2 copies:</p>\n<ol>\n<li>lowecase string</li>\n</ol>\n<ul>\n<li>which goes in index (keys) for sorting</li>\n</ul>\n<ol start=\"2\">\n<li>original string</li>\n</ol>\n<ul>\n<li>which can be optimally stored as delta from <span class=\"hashtag-raw\">#1</span> using BitVector approach</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"7\" data-topic=\"1716\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>to get the original string back, you can look up the source record from the index</p>\n</blockquote>\n</aside>\n<p>This approach has two getRange() calls on <strong>separate</strong> ranges while iterating index.</p>\n<aside class=\"quote no-group\" data-username=\"alloc\" data-post=\"7\" data-topic=\"1716\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://sea1.discourse-cdn.com/foundationdb/user_avatar/forums.foundationdb.org/alloc/48/9_2.png\" class=\"avatar\"> alloc:</div>\n<blockquote>\n<p>One can also add additional columns to the index</p>\n</blockquote>\n</aside>\n<p>This approach requires extra storage, but in BitVector approach, this might not be much.</p>\n<p>Also, in indexes, storing BitVector/original string in <em>Value</em> rather than <em>Key</em> will ensure that we don\u2019t disturb the overall sorting order of the index. If we are storing it in index itself (<em>Key</em>), we need to be cautious of sorting order changes.</p>\n<p>Code references of Record Layer and CouchDb are very helpful here. Thanks <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
        "post_number": 9,
        "post_type": 1,
        "posts_count": 9,
        "updated_at": "2019-11-08T16:21:13.121Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 1,
        "incoming_link_count": 1,
        "reads": 16,
        "readers_count": 15,
        "score": 8.2,
        "yours": false,
        "topic_id": 1716,
        "topic_slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
        "display_username": "Rishabh",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 545,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "post_url": "/t/supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data/1716/9",
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false,
        "topic_accepted_answer": null
      }
    ],
    "stream": [
      5455,
      5456,
      5457,
      5460,
      5461,
      5467,
      5468,
      5469,
      5496
    ]
  },
  "timeline_lookup": [
    [
      1,
      2177
    ],
    [
      6,
      2176
    ],
    [
      9,
      2174
    ]
  ],
  "suggested_topics": [],
  "tags": [],
  "tags_descriptions": {},
  "fancy_title": "Supporting Strings with case insensitive comparisons but case preserved in data",
  "id": 1716,
  "title": "Supporting Strings with case insensitive comparisons but case preserved in data",
  "posts_count": 9,
  "created_at": "2019-11-05T18:47:39.241Z",
  "views": 1218,
  "reply_count": 4,
  "like_count": 0,
  "last_posted_at": "2019-11-08T16:21:13.121Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "supporting-strings-with-case-insensitive-comparisons-but-case-preserved-in-data",
  "category_id": 7,
  "word_count": 1939,
  "deleted_at": null,
  "user_id": 545,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "image_url": null,
  "slow_mode_seconds": 0,
  "draft": null,
  "draft_key": "topic_1716",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "current_post_number": 1,
  "highest_post_number": 9,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 10,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": false,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 5,
  "show_read_indicator": false,
  "thumbnails": null,
  "slow_mode_enabled_until": null,
  "tags_disable_ads": false,
  "related_topics": [
    {
      "fancy_title": "Emulate secondary index",
      "id": 430,
      "title": "Emulate secondary index",
      "slug": "emulate-secondary-index",
      "posts_count": 5,
      "reply_count": 2,
      "highest_post_number": 5,
      "image_url": null,
      "created_at": "2018-05-18T07:04:04.967Z",
      "last_posted_at": "2018-05-21T14:11:05.503Z",
      "bumped": true,
      "bumped_at": "2018-05-21T14:11:05.503Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 1123,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 268,
            "username": "urykhy",
            "name": "Yury",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/u/7bcc69/{size}.png",
            "trust_level": 0
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 190,
            "username": "itp",
            "name": "Ian Peters",
            "avatar_template": "/user_avatar/forums.foundationdb.org/itp/{size}/151_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Secondary indexing approaches",
      "id": 792,
      "title": "Secondary indexing approaches",
      "slug": "secondary-indexing-approaches",
      "posts_count": 7,
      "reply_count": 2,
      "highest_post_number": 7,
      "image_url": null,
      "created_at": "2018-10-19T19:24:02.093Z",
      "last_posted_at": "2018-10-20T15:08:09.001Z",
      "bumped": true,
      "bumped_at": "2018-10-20T15:08:09.001Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 1,
      "views": 2905,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 391,
            "username": "atombender",
            "name": "",
            "avatar_template": "/user_avatar/forums.foundationdb.org/atombender/{size}/688_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 81,
            "username": "ryanworl",
            "name": "Ryan Worl",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ryanworl/{size}/440_2.png",
            "trust_level": 3
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    },
    {
      "fancy_title": "Way to rename key",
      "id": 2142,
      "title": "Way to rename key",
      "slug": "way-to-rename-key",
      "posts_count": 19,
      "reply_count": 15,
      "highest_post_number": 19,
      "image_url": null,
      "created_at": "2020-05-29T16:40:04.242Z",
      "last_posted_at": "2020-06-01T00:47:36.612Z",
      "bumped": true,
      "bumped_at": "2020-06-01T00:47:36.612Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 6,
      "views": 1053,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 337,
            "username": "mengxu",
            "name": "Meng Xu",
            "avatar_template": "/user_avatar/forums.foundationdb.org/mengxu/{size}/893_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 12,
            "username": "ajbeamon",
            "name": "A.J. Beamon",
            "avatar_template": "/user_avatar/forums.foundationdb.org/ajbeamon/{size}/13_2.png",
            "admin": true,
            "trust_level": 4
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 7,
            "username": "SteavedHams",
            "name": "Steve Atherton",
            "avatar_template": "/user_avatar/forums.foundationdb.org/steavedhams/{size}/18_2.png",
            "trust_level": 4
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 771,
            "username": "hustnn",
            "name": "Hustnn",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/h/43a26b/{size}.png",
            "trust_level": 0
          }
        }
      ]
    },
    {
      "fancy_title": "Missing API for getting just the count of a key range?",
      "id": 444,
      "title": "Missing API for getting just the count of a key range?",
      "slug": "missing-api-for-getting-just-the-count-of-a-key-range",
      "posts_count": 14,
      "reply_count": 9,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2018-05-21T09:23:36.938Z",
      "last_posted_at": "2018-09-10T16:25:03.060Z",
      "bumped": true,
      "bumped_at": "2018-09-10T16:25:03.060Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 4,
      "views": 3599,
      "category_id": 8,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 208,
            "username": "cloudspeech",
            "name": "Cloudspeech",
            "avatar_template": "/user_avatar/forums.foundationdb.org/cloudspeech/{size}/330_2.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 31,
            "username": "dicklacara",
            "name": "Richard Applebaum",
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/8797f3/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 173,
            "username": "jkominek",
            "name": "Jay Kominek",
            "avatar_template": "/user_avatar/forums.foundationdb.org/jkominek/{size}/140_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 53,
            "username": "KrzysFR",
            "name": "Christophe Chevalier",
            "avatar_template": "/user_avatar/forums.foundationdb.org/krzysfr/{size}/43_2.png",
            "trust_level": 2
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 8,
            "username": "alloc",
            "name": "Alec Grieser",
            "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
            "trust_level": 4
          }
        }
      ]
    },
    {
      "fancy_title": "Custom ordering of keys",
      "id": 255,
      "title": "Custom ordering of keys",
      "slug": "custom-ordering-of-keys",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2018-04-24T23:55:55.338Z",
      "last_posted_at": "2018-04-25T00:00:55.641Z",
      "bumped": true,
      "bumped_at": "2018-04-25T00:00:55.641Z",
      "archetype": "regular",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "tags": [],
      "tags_descriptions": {},
      "like_count": 0,
      "views": 597,
      "category_id": 7,
      "featured_link": null,
      "has_accepted_answer": false,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 52,
            "username": "nutjob",
            "name": null,
            "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/n/f1d935/{size}.png",
            "trust_level": 1
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 22,
            "username": "dave",
            "name": "David Scherer",
            "avatar_template": "/user_avatar/forums.foundationdb.org/dave/{size}/89_2.png",
            "trust_level": 1
          }
        }
      ]
    }
  ],
  "summarizable": false,
  "can_vote": false,
  "vote_count": 0,
  "user_voted": false,
  "discourse_zendesk_plugin_zendesk_id": null,
  "discourse_zendesk_plugin_zendesk_url": "https://your-url.zendesk.com/agent/tickets/",
  "details": {
    "can_edit": false,
    "notification_level": 1,
    "participants": [
      {
        "id": 545,
        "username": "rishabh",
        "name": "Rishabh",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png",
        "post_count": 4,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 13,
        "username": "alexmiller",
        "name": "Alex Miller",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alexmiller/{size}/326_2.png",
        "post_count": 2,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 8,
        "username": "alloc",
        "name": "Alec Grieser",
        "avatar_template": "/user_avatar/forums.foundationdb.org/alloc/{size}/9_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 4
      },
      {
        "id": 451,
        "username": "rnewson",
        "name": "Robert Newson",
        "avatar_template": "/user_avatar/forums.foundationdb.org/rnewson/{size}/502_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      },
      {
        "id": 499,
        "username": "garrensmith",
        "name": "Garren Smith",
        "avatar_template": "/user_avatar/forums.foundationdb.org/garrensmith/{size}/494_2.png",
        "post_count": 1,
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_color": null,
        "flair_bg_color": null,
        "flair_group_id": null,
        "trust_level": 2
      }
    ],
    "created_by": {
      "id": 545,
      "username": "rishabh",
      "name": "Rishabh",
      "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png"
    },
    "last_poster": {
      "id": 545,
      "username": "rishabh",
      "name": "Rishabh",
      "avatar_template": "/user_avatar/forums.foundationdb.org/rishabh/{size}/540_2.png"
    },
    "links": [
      {
        "url": "https://github.com/cloudant-labs/fdblucene",
        "title": "GitHub - cloudant-labs/fdblucene: Lucene / FoundationDB integration library",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 3,
        "user_id": 451,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apache/couchdb/blob/prototype/fdb-layer/src/couch_views/src/couch_views_encoding.erl",
        "title": "couchdb/couch_views_encoding.erl at prototype/fdb-layer \u00b7 apache/couchdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 499,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/apple/foundationdb/blob/master/bindings/java/src/main/com/apple/foundationdb/tuple/ByteArrayUtil.java#L351",
        "title": "foundationdb/ByteArrayUtil.java at master \u00b7 apple/foundationdb \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 545,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://github.com/FoundationDB/fdb-record-layer/pull/307/files",
        "title": "Resolves #249: Collating index by MMcM \u00b7 Pull Request #307 \u00b7 FoundationDB/fdb-record-layer \u00b7 GitHub",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-core/2.8.89.0/com/apple/foundationdb/record/metadata/expressions/CollateFunctionKeyExpression.html",
        "title": "CollateFunctionKeyExpression (fdb-record-layer-core 2.8.89.0 API)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "http://userguide.icu-project.org/collation/concepts#TOC-Sortkeys-vs-Comparison",
        "title": "Collation Concepts - ICU User Guide",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 451,
        "domain": "userguide.icu-project.org",
        "root_domain": "icu-project.org"
      },
      {
        "url": "https://javadoc.io/static/org.foundationdb/fdb-record-layer-icu/2.8.89.0/com/apple/foundationdb/record/icu/CollateFunctionKeyExpressionFactoryICU.CollateFunctionKeyExpressionICU.html",
        "title": "CollateFunctionKeyExpressionFactoryICU.CollateFunctionKeyExpressionICU (fdb-record-layer-icu 2.8.89.0 API)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 8,
        "domain": "javadoc.io",
        "root_domain": "javadoc.io"
      },
      {
        "url": "https://apple.github.io/foundationdb/javadoc/com/apple/foundationdb/Range.html#startsWith(byte%5B%5D)",
        "title": "Range (FoundationDB Java Client API)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 545,
        "domain": "apple.github.io",
        "root_domain": "apple.github.io"
      }
    ]
  },
  "bookmarks": []
}